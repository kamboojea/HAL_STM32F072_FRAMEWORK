
hal_stm32f072cbt6_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bootfill     00000ff8  08000008  08000008  00010008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .isr_vector   000000c0  08001000  08001000  00011000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00004074  080010c0  080010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000067c  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080057b0  080057b0  00030800  2**0
                  CONTENTS
  6 .ARM          00000000  080057b0  080057b0  00030800  2**0
                  CONTENTS
  7 .preinit_array 00000000  080057b0  080057b0  00030800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000074  200000c0  080057b8  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .appfill      0000afb4  0800582c  0800582c  0002582c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 12 .version      00000020  080107e0  080107e0  000307e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .bss          00000268  20000138  20000138  00040138  2**3
                  ALLOC
 14 ._user_heap_stack 00000600  200003a0  200003a0  00040138  2**0
                  ALLOC
 15 .ARM.attributes 00000028  00000000  00000000  00030800  2**0
                  CONTENTS, READONLY
 16 .debug_info   00017bd1  00000000  00000000  00030828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000451c  00000000  00000000  000483f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001058  00000000  00000000  0004c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d7cf  00000000  00000000  0004d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001f9b9  00000000  00000000  0006b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00097e58  00000000  00000000  0008aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00122950  2**0
                  CONTENTS, READONLY
 23 .debug_loc    0000e4d4  00000000  00000000  001229a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000f08  00000000  00000000  00130e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00003038  00000000  00000000  00131d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080010c0 <__do_global_dtors_aux>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4c06      	ldr	r4, [pc, #24]	; (80010dc <__do_global_dtors_aux+0x1c>)
 80010c4:	7823      	ldrb	r3, [r4, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d107      	bne.n	80010da <__do_global_dtors_aux+0x1a>
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <__do_global_dtors_aux+0x20>)
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <__do_global_dtors_aux+0x16>
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <__do_global_dtors_aux+0x24>)
 80010d2:	e000      	b.n	80010d6 <__do_global_dtors_aux+0x16>
 80010d4:	bf00      	nop
 80010d6:	2301      	movs	r3, #1
 80010d8:	7023      	strb	r3, [r4, #0]
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	20000138 	.word	0x20000138
 80010e0:	00000000 	.word	0x00000000
 80010e4:	0800511c 	.word	0x0800511c

080010e8 <frame_dummy>:
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <frame_dummy+0x14>)
 80010ea:	b510      	push	{r4, lr}
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <frame_dummy+0x10>
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <frame_dummy+0x18>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <frame_dummy+0x1c>)
 80010f4:	e000      	b.n	80010f8 <frame_dummy+0x10>
 80010f6:	bf00      	nop
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	00000000 	.word	0x00000000
 8001100:	2000013c 	.word	0x2000013c
 8001104:	0800511c 	.word	0x0800511c

08001108 <__gnu_thumb1_case_shi>:
 8001108:	b403      	push	{r0, r1}
 800110a:	4671      	mov	r1, lr
 800110c:	0849      	lsrs	r1, r1, #1
 800110e:	0040      	lsls	r0, r0, #1
 8001110:	0049      	lsls	r1, r1, #1
 8001112:	5e09      	ldrsh	r1, [r1, r0]
 8001114:	0049      	lsls	r1, r1, #1
 8001116:	448e      	add	lr, r1
 8001118:	bc03      	pop	{r0, r1}
 800111a:	4770      	bx	lr

0800111c <__udivsi3>:
 800111c:	2200      	movs	r2, #0
 800111e:	0843      	lsrs	r3, r0, #1
 8001120:	428b      	cmp	r3, r1
 8001122:	d374      	bcc.n	800120e <__udivsi3+0xf2>
 8001124:	0903      	lsrs	r3, r0, #4
 8001126:	428b      	cmp	r3, r1
 8001128:	d35f      	bcc.n	80011ea <__udivsi3+0xce>
 800112a:	0a03      	lsrs	r3, r0, #8
 800112c:	428b      	cmp	r3, r1
 800112e:	d344      	bcc.n	80011ba <__udivsi3+0x9e>
 8001130:	0b03      	lsrs	r3, r0, #12
 8001132:	428b      	cmp	r3, r1
 8001134:	d328      	bcc.n	8001188 <__udivsi3+0x6c>
 8001136:	0c03      	lsrs	r3, r0, #16
 8001138:	428b      	cmp	r3, r1
 800113a:	d30d      	bcc.n	8001158 <__udivsi3+0x3c>
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	0209      	lsls	r1, r1, #8
 8001140:	ba12      	rev	r2, r2
 8001142:	0c03      	lsrs	r3, r0, #16
 8001144:	428b      	cmp	r3, r1
 8001146:	d302      	bcc.n	800114e <__udivsi3+0x32>
 8001148:	1212      	asrs	r2, r2, #8
 800114a:	0209      	lsls	r1, r1, #8
 800114c:	d065      	beq.n	800121a <__udivsi3+0xfe>
 800114e:	0b03      	lsrs	r3, r0, #12
 8001150:	428b      	cmp	r3, r1
 8001152:	d319      	bcc.n	8001188 <__udivsi3+0x6c>
 8001154:	e000      	b.n	8001158 <__udivsi3+0x3c>
 8001156:	0a09      	lsrs	r1, r1, #8
 8001158:	0bc3      	lsrs	r3, r0, #15
 800115a:	428b      	cmp	r3, r1
 800115c:	d301      	bcc.n	8001162 <__udivsi3+0x46>
 800115e:	03cb      	lsls	r3, r1, #15
 8001160:	1ac0      	subs	r0, r0, r3
 8001162:	4152      	adcs	r2, r2
 8001164:	0b83      	lsrs	r3, r0, #14
 8001166:	428b      	cmp	r3, r1
 8001168:	d301      	bcc.n	800116e <__udivsi3+0x52>
 800116a:	038b      	lsls	r3, r1, #14
 800116c:	1ac0      	subs	r0, r0, r3
 800116e:	4152      	adcs	r2, r2
 8001170:	0b43      	lsrs	r3, r0, #13
 8001172:	428b      	cmp	r3, r1
 8001174:	d301      	bcc.n	800117a <__udivsi3+0x5e>
 8001176:	034b      	lsls	r3, r1, #13
 8001178:	1ac0      	subs	r0, r0, r3
 800117a:	4152      	adcs	r2, r2
 800117c:	0b03      	lsrs	r3, r0, #12
 800117e:	428b      	cmp	r3, r1
 8001180:	d301      	bcc.n	8001186 <__udivsi3+0x6a>
 8001182:	030b      	lsls	r3, r1, #12
 8001184:	1ac0      	subs	r0, r0, r3
 8001186:	4152      	adcs	r2, r2
 8001188:	0ac3      	lsrs	r3, r0, #11
 800118a:	428b      	cmp	r3, r1
 800118c:	d301      	bcc.n	8001192 <__udivsi3+0x76>
 800118e:	02cb      	lsls	r3, r1, #11
 8001190:	1ac0      	subs	r0, r0, r3
 8001192:	4152      	adcs	r2, r2
 8001194:	0a83      	lsrs	r3, r0, #10
 8001196:	428b      	cmp	r3, r1
 8001198:	d301      	bcc.n	800119e <__udivsi3+0x82>
 800119a:	028b      	lsls	r3, r1, #10
 800119c:	1ac0      	subs	r0, r0, r3
 800119e:	4152      	adcs	r2, r2
 80011a0:	0a43      	lsrs	r3, r0, #9
 80011a2:	428b      	cmp	r3, r1
 80011a4:	d301      	bcc.n	80011aa <__udivsi3+0x8e>
 80011a6:	024b      	lsls	r3, r1, #9
 80011a8:	1ac0      	subs	r0, r0, r3
 80011aa:	4152      	adcs	r2, r2
 80011ac:	0a03      	lsrs	r3, r0, #8
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d301      	bcc.n	80011b6 <__udivsi3+0x9a>
 80011b2:	020b      	lsls	r3, r1, #8
 80011b4:	1ac0      	subs	r0, r0, r3
 80011b6:	4152      	adcs	r2, r2
 80011b8:	d2cd      	bcs.n	8001156 <__udivsi3+0x3a>
 80011ba:	09c3      	lsrs	r3, r0, #7
 80011bc:	428b      	cmp	r3, r1
 80011be:	d301      	bcc.n	80011c4 <__udivsi3+0xa8>
 80011c0:	01cb      	lsls	r3, r1, #7
 80011c2:	1ac0      	subs	r0, r0, r3
 80011c4:	4152      	adcs	r2, r2
 80011c6:	0983      	lsrs	r3, r0, #6
 80011c8:	428b      	cmp	r3, r1
 80011ca:	d301      	bcc.n	80011d0 <__udivsi3+0xb4>
 80011cc:	018b      	lsls	r3, r1, #6
 80011ce:	1ac0      	subs	r0, r0, r3
 80011d0:	4152      	adcs	r2, r2
 80011d2:	0943      	lsrs	r3, r0, #5
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d301      	bcc.n	80011dc <__udivsi3+0xc0>
 80011d8:	014b      	lsls	r3, r1, #5
 80011da:	1ac0      	subs	r0, r0, r3
 80011dc:	4152      	adcs	r2, r2
 80011de:	0903      	lsrs	r3, r0, #4
 80011e0:	428b      	cmp	r3, r1
 80011e2:	d301      	bcc.n	80011e8 <__udivsi3+0xcc>
 80011e4:	010b      	lsls	r3, r1, #4
 80011e6:	1ac0      	subs	r0, r0, r3
 80011e8:	4152      	adcs	r2, r2
 80011ea:	08c3      	lsrs	r3, r0, #3
 80011ec:	428b      	cmp	r3, r1
 80011ee:	d301      	bcc.n	80011f4 <__udivsi3+0xd8>
 80011f0:	00cb      	lsls	r3, r1, #3
 80011f2:	1ac0      	subs	r0, r0, r3
 80011f4:	4152      	adcs	r2, r2
 80011f6:	0883      	lsrs	r3, r0, #2
 80011f8:	428b      	cmp	r3, r1
 80011fa:	d301      	bcc.n	8001200 <__udivsi3+0xe4>
 80011fc:	008b      	lsls	r3, r1, #2
 80011fe:	1ac0      	subs	r0, r0, r3
 8001200:	4152      	adcs	r2, r2
 8001202:	0843      	lsrs	r3, r0, #1
 8001204:	428b      	cmp	r3, r1
 8001206:	d301      	bcc.n	800120c <__udivsi3+0xf0>
 8001208:	004b      	lsls	r3, r1, #1
 800120a:	1ac0      	subs	r0, r0, r3
 800120c:	4152      	adcs	r2, r2
 800120e:	1a41      	subs	r1, r0, r1
 8001210:	d200      	bcs.n	8001214 <__udivsi3+0xf8>
 8001212:	4601      	mov	r1, r0
 8001214:	4152      	adcs	r2, r2
 8001216:	4610      	mov	r0, r2
 8001218:	4770      	bx	lr
 800121a:	e7ff      	b.n	800121c <__udivsi3+0x100>
 800121c:	b501      	push	{r0, lr}
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f806 	bl	8001230 <__aeabi_idiv0>
 8001224:	bd02      	pop	{r1, pc}
 8001226:	46c0      	nop			; (mov r8, r8)

08001228 <__aeabi_uidivmod>:
 8001228:	2900      	cmp	r1, #0
 800122a:	d0f7      	beq.n	800121c <__udivsi3+0x100>
 800122c:	e776      	b.n	800111c <__udivsi3>
 800122e:	4770      	bx	lr

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	46c0      	nop			; (mov r8, r8)

08001234 <set_acp_can_task_state>:
 * This function sets the state of the ACP-CAN task to the specified state and updates the timer.
 *
 * @param[in] state The new state to set for the ACP-CAN task.
 */
static void set_acp_can_task_state (acp_can_task_state_t state)
{
 8001234:	b510      	push	{r4, lr}
    acp_can_task_state = state;
 8001236:	4b03      	ldr	r3, [pc, #12]	; (8001244 <set_acp_can_task_state+0x10>)
 8001238:	7018      	strb	r0, [r3, #0]
    acp_can_task_timer = millis();
 800123a:	f000 fcab 	bl	8001b94 <millis>
 800123e:	4b02      	ldr	r3, [pc, #8]	; (8001248 <set_acp_can_task_state+0x14>)
 8001240:	6018      	str	r0, [r3, #0]

}
 8001242:	bd10      	pop	{r4, pc}
 8001244:	20000160 	.word	0x20000160
 8001248:	20000164 	.word	0x20000164

0800124c <acp_can_task_tx_packet_side_a>:
{
 800124c:	b510      	push	{r4, lr}
 800124e:	0001      	movs	r1, r0
	return acp_can_transmit(&acp_can_side_a, acp_packet);
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <acp_can_task_tx_packet_side_a+0xc>)
 8001252:	f000 f8ee 	bl	8001432 <acp_can_transmit>
}
 8001256:	bd10      	pop	{r4, pc}
 8001258:	20000154 	.word	0x20000154

0800125c <acp_can_task>:
{
 800125c:	b510      	push	{r4, lr}
 800125e:	b084      	sub	sp, #16
	switch (acp_can_task_state)
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <acp_can_task+0x64>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <acp_can_task+0x14>
 8001268:	2b01      	cmp	r3, #1
 800126a:	d010      	beq.n	800128e <acp_can_task+0x32>
}
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}
 *
 * This function initializes the ACP-CAN task by initializing the ACP-CAN interface instances for SIDEA and SIDEB.
 */
void acp_can_task_initialise(void)
{
	acp_can_init(&acp_can_side_a, hcan_side_a, "CANSIDA");
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <acp_can_task+0x68>)
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	4c14      	ldr	r4, [pc, #80]	; (80012c8 <acp_can_task+0x6c>)
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <acp_can_task+0x70>)
 8001278:	0020      	movs	r0, r4
 800127a:	f000 f88b 	bl	8001394 <acp_can_init>
	acp_can_set_board_address(&acp_can_side_a, 0x91);
 800127e:	2191      	movs	r1, #145	; 0x91
 8001280:	0020      	movs	r0, r4
 8001282:	f000 f8a1 	bl	80013c8 <acp_can_set_board_address>
	set_acp_can_task_state(ACP_CAN_TASK_SERVICE);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff ffd4 	bl	8001234 <set_acp_can_task_state>
}
 800128c:	e7ee      	b.n	800126c <acp_can_task+0x10>
 */
void acp_can_task_service(void)
{
	acp_packet_t acp_packet;

	if (acp_can_receive(&acp_can_side_a, &acp_packet))
 800128e:	4669      	mov	r1, sp
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <acp_can_task+0x6c>)
 8001292:	f000 f8e4 	bl	800145e <acp_can_receive>
 8001296:	2800      	cmp	r0, #0
 8001298:	d0e8      	beq.n	800126c <acp_can_task+0x10>
	{
#ifdef ENABLE_CAN_PACKETS_DEBUGGING
		debug_printf("CB->Pfeb(A): %s", debug_acp_packet_to_string(&acp_packet));
#endif
		// If the packet is not directed to the WaferPMB, pass it onto the HWM
		if (acp_packet.acp_header.destination == ACP_ADDRESS_PFEB)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <acp_can_task+0x74>)
 800129c:	9a00      	ldr	r2, [sp, #0]
 800129e:	4013      	ands	r3, r2
 80012a0:	2291      	movs	r2, #145	; 0x91
 80012a2:	0252      	lsls	r2, r2, #9
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d1e1      	bne.n	800126c <acp_can_task+0x10>
		{
			if (!acp_notification_packet(&acp_packet))
 80012a8:	4668      	mov	r0, sp
 80012aa:	f000 fc77 	bl	8001b9c <acp_notification_packet>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d1dc      	bne.n	800126c <acp_can_task+0x10>
			{
				acp_command_process(&acp_packet);
 80012b2:	4668      	mov	r0, sp
 80012b4:	f000 fbb6 	bl	8001a24 <acp_command_process>
				acp_can_task_tx_packet_side_a(&acp_packet);
 80012b8:	4668      	mov	r0, sp
 80012ba:	f7ff ffc7 	bl	800124c <acp_can_task_tx_packet_side_a>
}
 80012be:	e7d5      	b.n	800126c <acp_can_task+0x10>
 80012c0:	20000160 	.word	0x20000160
 80012c4:	200000c0 	.word	0x200000c0
 80012c8:	20000154 	.word	0x20000154
 80012cc:	08005144 	.word	0x08005144
 80012d0:	0007fe00 	.word	0x0007fe00

080012d4 <app_task>:
 *
 * This function is responsible for coordinating the execution of all
 * tasks needed for the application.
 */
void app_task(void)
{
 80012d4:	b510      	push	{r4, lr}
	acp_can_task();
 80012d6:	f7ff ffc1 	bl	800125c <acp_can_task>
	led_task();
 80012da:	f000 f841 	bl	8001360 <led_task>
}
 80012de:	bd10      	pop	{r4, pc}

080012e0 <led_task_update>:

/**
 * @brief Update error and status LED classes
 */
static void led_task_update(void)
{
 80012e0:	b510      	push	{r4, lr}
    // Update LED classes
	led_update(&status_led);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <led_task_update+0x10>)
 80012e4:	f000 fa19 	bl	800171a <led_update>
	led_update(&error_led);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <led_task_update+0x14>)
 80012ea:	f000 fa16 	bl	800171a <led_update>
}
 80012ee:	bd10      	pop	{r4, pc}
 80012f0:	20000188 	.word	0x20000188
 80012f4:	20000168 	.word	0x20000168

080012f8 <led_task_error_led_off>:
{
 80012f8:	b510      	push	{r4, lr}
    led_off(&error_led);
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <led_task_error_led_off+0xc>)
 80012fc:	f000 fa3c 	bl	8001778 <led_off>
}
 8001300:	bd10      	pop	{r4, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	20000168 	.word	0x20000168

08001308 <led_task_status_led_flash_rate>:
{
 8001308:	b510      	push	{r4, lr}
 800130a:	000a      	movs	r2, r1
    led_set_flash_rate(&status_led, on_period, off_period);
 800130c:	0001      	movs	r1, r0
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <led_task_status_led_flash_rate+0x10>)
 8001310:	f000 fa28 	bl	8001764 <led_set_flash_rate>
}
 8001314:	bd10      	pop	{r4, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	20000188 	.word	0x20000188

0800131c <led_task_intial_led_startup_flash_rate>:
{
 800131c:	b510      	push	{r4, lr}
	led_task_status_led_flash_rate(INITIAL_STATUS_LED_ON_PERIOD, INITIAL_STATUS_LED_OFF_PERIOD);
 800131e:	20fa      	movs	r0, #250	; 0xfa
 8001320:	0080      	lsls	r0, r0, #2
 8001322:	0001      	movs	r1, r0
 8001324:	f7ff fff0 	bl	8001308 <led_task_status_led_flash_rate>
}
 8001328:	bd10      	pop	{r4, pc}
	...

0800132c <led_task_init>:
{
 800132c:	b510      	push	{r4, lr}
    led_init(&error_led, ERROR_LED_PORT, ERROR_LED_PIN);
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	4c08      	ldr	r4, [pc, #32]	; (8001354 <led_task_init+0x28>)
 8001332:	0212      	lsls	r2, r2, #8
 8001334:	0021      	movs	r1, r4
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <led_task_init+0x2c>)
 8001338:	f000 f9df 	bl	80016fa <led_init>
    led_init(&status_led, STATUS_LED_PORT, STATUS_LED_PIN);
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	01d2      	lsls	r2, r2, #7
 8001340:	0021      	movs	r1, r4
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <led_task_init+0x30>)
 8001344:	f000 f9d9 	bl	80016fa <led_init>
    led_task_intial_led_startup_flash_rate();
 8001348:	f7ff ffe8 	bl	800131c <led_task_intial_led_startup_flash_rate>
    led_task_error_led_off();
 800134c:	f7ff ffd4 	bl	80012f8 <led_task_error_led_off>
}
 8001350:	bd10      	pop	{r4, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	48000800 	.word	0x48000800
 8001358:	20000168 	.word	0x20000168
 800135c:	20000188 	.word	0x20000188

08001360 <led_task>:
{
 8001360:	b510      	push	{r4, lr}
    if (!initialised)
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <led_task+0x1c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <led_task+0x10>
    led_task_update();
 800136a:	f7ff ffb9 	bl	80012e0 <led_task_update>
}
 800136e:	bd10      	pop	{r4, pc}
        led_task_init();
 8001370:	f7ff ffdc 	bl	800132c <led_task_init>
        initialised = true;
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <led_task+0x1c>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e7f6      	b.n	800136a <led_task+0xa>
 800137c:	20000184 	.word	0x20000184

08001380 <can_handle_to_can_assignment_index>:
 * @param can Pointer to the CAN handle
 * @return The CAN assignment index
 */
static can_assignment_index_t can_handle_to_can_assignment_index(CAN_HandleTypeDef *hcan)
{
    if (hcan->Instance == CAN)
 8001380:	6802      	ldr	r2, [r0, #0]
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <can_handle_to_can_assignment_index+0x10>)
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <can_handle_to_can_assignment_index+0xc>
    {
        return CAN1_ASSIGNMENT_INDEX;
    }
   	return CAN2_ASSIGNMENT_INDEX;
 8001388:	2001      	movs	r0, #1
}
 800138a:	4770      	bx	lr
        return CAN1_ASSIGNMENT_INDEX;
 800138c:	2000      	movs	r0, #0
 800138e:	e7fc      	b.n	800138a <can_handle_to_can_assignment_index+0xa>
 8001390:	40006400 	.word	0x40006400

08001394 <acp_can_init>:
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	0006      	movs	r6, r0
 8001398:	000c      	movs	r4, r1
 800139a:	0015      	movs	r5, r2
 * @param hcan Pointer to the CAN handle
 * @return true if the UART is assigned, false otherwise
 */
static inline bool can_assigned(CAN_HandleTypeDef *hcan)
{
    return can_assignment[can_handle_to_can_assignment_index(hcan)] != NOT_ASSIGNED;
 800139c:	0008      	movs	r0, r1
 800139e:	f7ff ffef 	bl	8001380 <can_handle_to_can_assignment_index>
 80013a2:	0080      	lsls	r0, r0, #2
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <acp_can_init+0x30>)
 80013a6:	5883      	ldr	r3, [r0, r2]
	if (can_assigned(hcan))
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <acp_can_init+0x1c>
		return false;
 80013ac:	2000      	movs	r0, #0
}
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
	me->hcan = hcan;
 80013b0:	6074      	str	r4, [r6, #4]
	me->name = name;
 80013b2:	6035      	str	r5, [r6, #0]
 * in the @c can_assignment array. The array is used to keep track of
 * which UART driver is assigned to which UART handle.
 */
static inline void assign_can(acp_can_t *acp_can)
{
	can_assignment[can_handle_to_can_assignment_index(acp_can->hcan)] = acp_can;
 80013b4:	0020      	movs	r0, r4
 80013b6:	f7ff ffe3 	bl	8001380 <can_handle_to_can_assignment_index>
 80013ba:	0080      	lsls	r0, r0, #2
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <acp_can_init+0x30>)
 80013be:	50c6      	str	r6, [r0, r3]
	return true;
 80013c0:	2001      	movs	r0, #1
}
 80013c2:	e7f4      	b.n	80013ae <acp_can_init+0x1a>
 80013c4:	200001a4 	.word	0x200001a4

080013c8 <acp_can_set_board_address>:
{
 80013c8:	b530      	push	{r4, r5, lr}
 80013ca:	b08b      	sub	sp, #44	; 0x2c
 80013cc:	0004      	movs	r4, r0
 80013ce:	000d      	movs	r5, r1
	HAL_CAN_Stop(me->hcan);
 80013d0:	6840      	ldr	r0, [r0, #4]
 80013d2:	f001 f814 	bl	80023fe <HAL_CAN_Stop>
	can_assignment_index_t can = can_handle_to_can_assignment_index(me->hcan);
 80013d6:	6860      	ldr	r0, [r4, #4]
 80013d8:	f7ff ffd2 	bl	8001380 <can_handle_to_can_assignment_index>
	uint32_t ext_filter = address << 12;
 80013dc:	032b      	lsls	r3, r5, #12
	filter_config.FilterBank = ((can == CAN1_ASSIGNMENT_INDEX) ? 0 : SLAVE_START_FILTER_BANK);
 80013de:	2800      	cmp	r0, #0
 80013e0:	d11b      	bne.n	800141a <acp_can_set_board_address+0x52>
 80013e2:	2200      	movs	r2, #0
 80013e4:	9205      	str	r2, [sp, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80013e6:	2200      	movs	r2, #0
 80013e8:	9206      	str	r2, [sp, #24]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80013ea:	3201      	adds	r2, #1
 80013ec:	9207      	str	r2, [sp, #28]
	filter_config.FilterIdHigh = (ext_filter >> 16) & 0xFFFF;
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	9100      	str	r1, [sp, #0]
	filter_config.FilterIdLow = ext_filter & 0xFFFF;
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	9301      	str	r3, [sp, #4]
	filter_config.FilterMaskIdHigh = (ext_filter >> 16) & 0xFFFF;
 80013f8:	9102      	str	r1, [sp, #8]
	filter_config.FilterMaskIdLow = ext_filter & 0xFFFF;
 80013fa:	9303      	str	r3, [sp, #12]
	filter_config.FilterFIFOAssignment = ((can == CAN1_ASSIGNMENT_INDEX) ? CAN_RX_FIFO0 : CAN_RX_FIFO1);
 80013fc:	1e43      	subs	r3, r0, #1
 80013fe:	4198      	sbcs	r0, r3
 8001400:	9004      	str	r0, [sp, #16]
	filter_config.FilterActivation = ENABLE;
 8001402:	9208      	str	r2, [sp, #32]
	filter_config.SlaveStartFilterBank = SLAVE_START_FILTER_BANK;
 8001404:	230e      	movs	r3, #14
 8001406:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(me->hcan, &filter_config) != HAL_OK)
 8001408:	4669      	mov	r1, sp
 800140a:	6860      	ldr	r0, [r4, #4]
 800140c:	f000 ff41 	bl	8002292 <HAL_CAN_ConfigFilter>
 8001410:	2800      	cmp	r0, #0
 8001412:	d004      	beq.n	800141e <acp_can_set_board_address+0x56>
		return false;
 8001414:	2000      	movs	r0, #0
}
 8001416:	b00b      	add	sp, #44	; 0x2c
 8001418:	bd30      	pop	{r4, r5, pc}
	filter_config.FilterBank = ((can == CAN1_ASSIGNMENT_INDEX) ? 0 : SLAVE_START_FILTER_BANK);
 800141a:	220e      	movs	r2, #14
 800141c:	e7e2      	b.n	80013e4 <acp_can_set_board_address+0x1c>
	if (HAL_CAN_Start(me->hcan) != HAL_OK)
 800141e:	6860      	ldr	r0, [r4, #4]
 8001420:	f000 ffbd 	bl	800239e <HAL_CAN_Start>
 8001424:	2800      	cmp	r0, #0
 8001426:	d102      	bne.n	800142e <acp_can_set_board_address+0x66>
	me->address = address;
 8001428:	8125      	strh	r5, [r4, #8]
	return true;
 800142a:	3001      	adds	r0, #1
 800142c:	e7f3      	b.n	8001416 <acp_can_set_board_address+0x4e>
		return false;
 800142e:	2000      	movs	r0, #0
 8001430:	e7f1      	b.n	8001416 <acp_can_set_board_address+0x4e>

08001432 <acp_can_transmit>:
{
 8001432:	b500      	push	{lr}
 8001434:	b089      	sub	sp, #36	; 0x24
 8001436:	000a      	movs	r2, r1
	tx_header.IDE = CAN_ID_EXT;
 8001438:	2304      	movs	r3, #4
 800143a:	9304      	str	r3, [sp, #16]
	tx_header.RTR = CAN_RTR_DATA;
 800143c:	2300      	movs	r3, #0
 800143e:	9305      	str	r3, [sp, #20]
	tx_header.ExtId = acp_packet->acp_header.ext_id;
 8001440:	680b      	ldr	r3, [r1, #0]
 8001442:	9303      	str	r3, [sp, #12]
	tx_header.DLC = acp_packet->len;
 8001444:	790b      	ldrb	r3, [r1, #4]
 8001446:	9306      	str	r3, [sp, #24]
	return HAL_CAN_AddTxMessage(me->hcan, &tx_header, acp_packet->data, &tx_mailbox_used) == HAL_OK;
 8001448:	3205      	adds	r2, #5
 800144a:	6840      	ldr	r0, [r0, #4]
 800144c:	ab01      	add	r3, sp, #4
 800144e:	a902      	add	r1, sp, #8
 8001450:	f001 f806 	bl	8002460 <HAL_CAN_AddTxMessage>
 8001454:	4243      	negs	r3, r0
 8001456:	4158      	adcs	r0, r3
 8001458:	b2c0      	uxtb	r0, r0
}
 800145a:	b009      	add	sp, #36	; 0x24
 800145c:	bd00      	pop	{pc}

0800145e <acp_can_receive>:
{
 800145e:	b530      	push	{r4, r5, lr}
 8001460:	b089      	sub	sp, #36	; 0x24
 8001462:	000c      	movs	r4, r1
	can_assignment_index_t can = can_handle_to_can_assignment_index(me->hcan);
 8001464:	6845      	ldr	r5, [r0, #4]
 8001466:	0028      	movs	r0, r5
 8001468:	f7ff ff8a 	bl	8001380 <can_handle_to_can_assignment_index>
	HAL_StatusTypeDef status = HAL_CAN_GetRxMessage(me->hcan, ((can == CAN1_ASSIGNMENT_INDEX) ? CAN_RX_FIFO0 : CAN_RX_FIFO1), &rx_header, acp_packet->data);
 800146c:	1e43      	subs	r3, r0, #1
 800146e:	4198      	sbcs	r0, r3
 8001470:	b2c1      	uxtb	r1, r0
 8001472:	1d63      	adds	r3, r4, #5
 8001474:	aa01      	add	r2, sp, #4
 8001476:	0028      	movs	r0, r5
 8001478:	f001 f86b 	bl	8002552 <HAL_CAN_GetRxMessage>
	if ( status != HAL_OK)
 800147c:	2800      	cmp	r0, #0
 800147e:	d002      	beq.n	8001486 <acp_can_receive+0x28>
		return false;
 8001480:	2000      	movs	r0, #0
}
 8001482:	b009      	add	sp, #36	; 0x24
 8001484:	bd30      	pop	{r4, r5, pc}
	acp_packet->acp_header.ext_id = rx_header.ExtId;
 8001486:	ab01      	add	r3, sp, #4
 8001488:	9a02      	ldr	r2, [sp, #8]
 800148a:	6022      	str	r2, [r4, #0]
	acp_packet->len = rx_header.DLC;
 800148c:	7c1b      	ldrb	r3, [r3, #16]
 800148e:	7123      	strb	r3, [r4, #4]
	memset (&acp_packet->data[acp_packet->len], 0, (CAN_DATA_SIZE - acp_packet->len));
 8001490:	18e0      	adds	r0, r4, r3
 8001492:	3005      	adds	r0, #5
 8001494:	2208      	movs	r2, #8
 8001496:	1ad2      	subs	r2, r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f002 fdcc 	bl	8004036 <memset>
	return true;
 800149e:	2001      	movs	r0, #1
 80014a0:	e7ef      	b.n	8001482 <acp_can_receive+0x24>
	...

080014a4 <debug_printf>:
 * @param format Format string for printf
 * @param ... Variable arguments for printf
 * @return True if the printf output is successfully transmitted, False otherwise
 */
bool debug_printf(const char *format, ... )
{
 80014a4:	b40f      	push	{r0, r1, r2, r3}
 80014a6:	b530      	push	{r4, r5, lr}
 80014a8:	b083      	sub	sp, #12
 80014aa:	ac06      	add	r4, sp, #24
 80014ac:	cc20      	ldmia	r4!, {r5}
    printf ("%08d - ", (int)HAL_GetTick());
 80014ae:	f000 fe31 	bl	8002114 <HAL_GetTick>
 80014b2:	0001      	movs	r1, r0
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <debug_printf+0x34>)
 80014b6:	f002 fdc7 	bl	8004048 <iprintf>

    va_list aptr;
    va_start(aptr, format);
 80014ba:	9401      	str	r4, [sp, #4]
    vprintf(format, aptr);
 80014bc:	0021      	movs	r1, r4
 80014be:	0028      	movs	r0, r5
 80014c0:	f002 fe58 	bl	8004174 <viprintf>
    printf("\r\n");
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <debug_printf+0x38>)
 80014c6:	f002 fe4b 	bl	8004160 <puts>
    va_end(aptr);
    return true;
}
 80014ca:	2001      	movs	r0, #1
 80014cc:	b003      	add	sp, #12
 80014ce:	bc30      	pop	{r4, r5}
 80014d0:	bc08      	pop	{r3}
 80014d2:	b004      	add	sp, #16
 80014d4:	4718      	bx	r3
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	0800514c 	.word	0x0800514c
 80014dc:	08005154 	.word	0x08005154

080014e0 <flash_busy>:
 * or a timeout occurs. The timeout duration is defined by SAMPLE_TIMEOUT.
 *
 * @return TRUE if the flash memory is still busy, FALSE if the write operation is completed or a timeout occurs.
 */
static bool flash_busy(void)
{
 80014e0:	b500      	push	{lr}
 80014e2:	b083      	sub	sp, #12
    uint32_t sample_timer = millis(); // Start the timer
 80014e4:	f000 fb56 	bl	8001b94 <millis>
 80014e8:	9001      	str	r0, [sp, #4]
    volatile bool busy_flag; // Check the busy flag

    do
    {
        busy_flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY); // Check the busy flag
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <flash_busy+0x34>)
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	466a      	mov	r2, sp
 80014f4:	70d3      	strb	r3, [r2, #3]

    } while (busy_flag || millis_timeout(&sample_timer, SAMPLE_TIMEOUT));
 80014f6:	78d3      	ldrb	r3, [r2, #3]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f6      	bne.n	80014ea <flash_busy+0xa>
 80014fc:	2132      	movs	r1, #50	; 0x32
 80014fe:	a801      	add	r0, sp, #4
 8001500:	f000 fb38 	bl	8001b74 <millis_timeout>
 8001504:	2800      	cmp	r0, #0
 8001506:	d1f0      	bne.n	80014ea <flash_busy+0xa>

    return busy_flag ; // Write operation completed
 8001508:	466b      	mov	r3, sp
 800150a:	78d8      	ldrb	r0, [r3, #3]
 800150c:	b2c0      	uxtb	r0, r0
}
 800150e:	b003      	add	sp, #12
 8001510:	bd00      	pop	{pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40022000 	.word	0x40022000

08001518 <eop_flag>:
 * until it is cleared or a timeout occurs.
 *
 * @return False if the EOP flag is cleared within the timeout, True otherwise.
 */
static bool eop_flag(void)
{
 8001518:	b500      	push	{lr}
 800151a:	b083      	sub	sp, #12
    uint32_t sample_timer = millis(); /**< Variable to store the current time in milliseconds. */
 800151c:	f000 fb3a 	bl	8001b94 <millis>
 8001520:	9001      	str	r0, [sp, #4]
    volatile bool eop_flag ; /**< Flag indicating the EOP status. */

    do
    {
        eop_flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP); /**< Update the EOP flag status. */
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <eop_flag+0x38>)
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	2320      	movs	r3, #32
 8001528:	4013      	ands	r3, r2
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	4193      	sbcs	r3, r2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	466a      	mov	r2, sp
 8001532:	70d3      	strb	r3, [r2, #3]

    } while (eop_flag || millis_timeout(&sample_timer, SAMPLE_TIMEOUT));
 8001534:	78d3      	ldrb	r3, [r2, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f3      	bne.n	8001522 <eop_flag+0xa>
 800153a:	2132      	movs	r1, #50	; 0x32
 800153c:	a801      	add	r0, sp, #4
 800153e:	f000 fb19 	bl	8001b74 <millis_timeout>
 8001542:	2800      	cmp	r0, #0
 8001544:	d1ed      	bne.n	8001522 <eop_flag+0xa>

    return eop_flag; /**< EOP flag cleared within the timeout, return 0 indicating success. */
 8001546:	466b      	mov	r3, sp
 8001548:	78d8      	ldrb	r0, [r3, #3]
 800154a:	b2c0      	uxtb	r0, r0
}
 800154c:	b003      	add	sp, #12
 800154e:	bd00      	pop	{pc}
 8001550:	40022000 	.word	0x40022000

08001554 <is_flash_ready>:
 * Otherwise, it returns HAL_OK indicating that the flash memory is ready for operations.
 *
 * @return HAL_StatusTypeDef The status indicating if the flash memory is ready (HAL_OK) or busy (HAL_BUSY).
 */
static HAL_StatusTypeDef is_flash_ready(void)
{
 8001554:	b510      	push	{r4, lr}
    if (flash_busy())
 8001556:	f7ff ffc3 	bl	80014e0 <flash_busy>
 800155a:	2800      	cmp	r0, #0
 800155c:	d10a      	bne.n	8001574 <is_flash_ready+0x20>
    {
        return HAL_BUSY; /**< Flash memory is busy, return HAL_BUSY. */
    }

    // Check the EOP flag in the FLASH_SR register
    if (eop_flag())
 800155e:	f7ff ffdb 	bl	8001518 <eop_flag>
 8001562:	2800      	cmp	r0, #0
 8001564:	d101      	bne.n	800156a <is_flash_ready+0x16>
    {
        /* Clear the EOP flag */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
        return HAL_BUSY; /**< EOP flag is set, return HAL_BUSY. */
    }
    return HAL_OK; /**< Flash memory is ready for operations, return HAL_OK. */
 8001566:	2000      	movs	r0, #0
}
 8001568:	bd10      	pop	{r4, pc}
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <is_flash_ready+0x24>)
 800156c:	2220      	movs	r2, #32
 800156e:	60da      	str	r2, [r3, #12]
        return HAL_BUSY; /**< EOP flag is set, return HAL_BUSY. */
 8001570:	2002      	movs	r0, #2
 8001572:	e7f9      	b.n	8001568 <is_flash_ready+0x14>
        return HAL_BUSY; /**< Flash memory is busy, return HAL_BUSY. */
 8001574:	2002      	movs	r0, #2
 8001576:	e7f7      	b.n	8001568 <is_flash_ready+0x14>
 8001578:	40022000 	.word	0x40022000

0800157c <flash_driver_init>:
    if (dev == NULL)
 800157c:	2800      	cmp	r0, #0
 800157e:	d00a      	beq.n	8001596 <flash_driver_init+0x1a>
    dev->start_sector = start_sector;
 8001580:	6001      	str	r1, [r0, #0]
    dev->num_sectors = num_sectors;
 8001582:	6042      	str	r2, [r0, #4]
    dev->erase = erase;
 8001584:	6083      	str	r3, [r0, #8]
    dev->write = write;
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	60c3      	str	r3, [r0, #12]
    dev->write_option_byte = write_option_byte;
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	6143      	str	r3, [r0, #20]
    dev->read = read;
 800158e:	9b02      	ldr	r3, [sp, #8]
 8001590:	6103      	str	r3, [r0, #16]
    return HAL_OK;
 8001592:	2000      	movs	r0, #0
}
 8001594:	4770      	bx	lr
	    return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
 8001598:	e7fc      	b.n	8001594 <flash_driver_init+0x18>

0800159a <flash_driver_erase>:
{
 800159a:	b500      	push	{lr}
 800159c:	b087      	sub	sp, #28
	if (dev == NULL)
 800159e:	2800      	cmp	r0, #0
 80015a0:	d016      	beq.n	80015d0 <flash_driver_erase+0x36>
    uint32_t sector_error = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	9305      	str	r3, [sp, #20]
    erase_init_struct.TypeErase     = FLASH_TYPEERASE_PAGES; // Set the erase type to erase pages
 80015a6:	9302      	str	r3, [sp, #8]
    erase_init_struct.PageAddress   = dev->start_sector; // Set the start address of the sector to be erased
 80015a8:	6803      	ldr	r3, [r0, #0]
 80015aa:	9303      	str	r3, [sp, #12]
    erase_init_struct.NbPages       = dev->num_sectors; // Set the number of sectors to be erased
 80015ac:	6843      	ldr	r3, [r0, #4]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9304      	str	r3, [sp, #16]
    HAL_StatusTypeDef status = HAL_FLASH_Unlock(); // Unlock the flash for erase operation
 80015b2:	f001 f8f9 	bl	80027a8 <HAL_FLASH_Unlock>
    if (status != HAL_OK)
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d001      	beq.n	80015be <flash_driver_erase+0x24>
}
 80015ba:	b007      	add	sp, #28
 80015bc:	bd00      	pop	{pc}
    status = HAL_FLASHEx_Erase(&erase_init_struct, &sector_error); // Erase the specified flash sectors
 80015be:	a905      	add	r1, sp, #20
 80015c0:	a802      	add	r0, sp, #8
 80015c2:	f001 fb93 	bl	8002cec <HAL_FLASHEx_Erase>
    if (status != HAL_OK)
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d1f7      	bne.n	80015ba <flash_driver_erase+0x20>
    return HAL_FLASH_Lock();
 80015ca:	f001 f905 	bl	80027d8 <HAL_FLASH_Lock>
 80015ce:	e7f4      	b.n	80015ba <flash_driver_erase+0x20>
		return HAL_ERROR; // Return error status if device pointer is NULL
 80015d0:	2001      	movs	r0, #1
 80015d2:	e7f2      	b.n	80015ba <flash_driver_erase+0x20>

080015d4 <flash_driver_write_data>:
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	0005      	movs	r5, r0
 80015d8:	000f      	movs	r7, r1
 80015da:	0016      	movs	r6, r2
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 80015dc:	f001 f8e4 	bl	80027a8 <HAL_FLASH_Unlock>
    if(status != HAL_OK)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d116      	bne.n	8001612 <flash_driver_write_data+0x3e>
    int sofar = 0;
 80015e4:	2400      	movs	r4, #0
    while (sofar < (numberofbytes / 2))  // Dividing by 2 to write 2 bytes per iteration
 80015e6:	0873      	lsrs	r3, r6, #1
 80015e8:	42a3      	cmp	r3, r4
 80015ea:	dd13      	ble.n	8001614 <flash_driver_write_data+0x40>
        uint16_t halfword_data = data[sofar];
 80015ec:	0063      	lsls	r3, r4, #1
 80015ee:	5afa      	ldrh	r2, [r7, r3]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, start_page_address, halfword_data);
 80015f0:	2300      	movs	r3, #0
 80015f2:	0029      	movs	r1, r5
 80015f4:	2001      	movs	r0, #1
 80015f6:	f001 f94b 	bl	8002890 <HAL_FLASH_Program>
        if (status != HAL_OK)
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d106      	bne.n	800160c <flash_driver_write_data+0x38>
        start_page_address += 2;
 80015fe:	3502      	adds	r5, #2
        sofar++;
 8001600:	3401      	adds	r4, #1
		status = is_flash_ready();
 8001602:	f7ff ffa7 	bl	8001554 <is_flash_ready>
		if (status != HAL_OK)
 8001606:	2800      	cmp	r0, #0
 8001608:	d0ed      	beq.n	80015e6 <flash_driver_write_data+0x12>
 800160a:	e002      	b.n	8001612 <flash_driver_write_data+0x3e>
			return HAL_FLASH_GetError();
 800160c:	f001 f90e 	bl	800282c <HAL_FLASH_GetError>
 8001610:	b2c0      	uxtb	r0, r0
}
 8001612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (numberofbytes & 1)
 8001614:	07f3      	lsls	r3, r6, #31
 8001616:	d507      	bpl.n	8001628 <flash_driver_write_data+0x54>
    	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, start_page_address, halfword_data);
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <flash_driver_write_data+0x64>)
 800161a:	2300      	movs	r3, #0
 800161c:	0029      	movs	r1, r5
 800161e:	2001      	movs	r0, #1
 8001620:	f001 f936 	bl	8002890 <HAL_FLASH_Program>
    	if (status != HAL_OK)
 8001624:	2800      	cmp	r0, #0
 8001626:	d102      	bne.n	800162e <flash_driver_write_data+0x5a>
    return HAL_FLASH_Lock();
 8001628:	f001 f8d6 	bl	80027d8 <HAL_FLASH_Lock>
 800162c:	e7f1      	b.n	8001612 <flash_driver_write_data+0x3e>
			return HAL_FLASH_GetError();
 800162e:	f001 f8fd 	bl	800282c <HAL_FLASH_GetError>
 8001632:	b2c0      	uxtb	r0, r0
 8001634:	e7ed      	b.n	8001612 <flash_driver_write_data+0x3e>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	0000ffff 	.word	0x0000ffff

0800163c <flash_driver_write_data_option_bytes>:
{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	0004      	movs	r4, r0
 8001642:	000d      	movs	r5, r1
    if (option_bytes == NULL || num_bytes == 0)
 8001644:	2800      	cmp	r0, #0
 8001646:	d035      	beq.n	80016b4 <flash_driver_write_data_option_bytes+0x78>
 8001648:	2900      	cmp	r1, #0
 800164a:	d102      	bne.n	8001652 <flash_driver_write_data_option_bytes+0x16>
        return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
}
 800164e:	b006      	add	sp, #24
 8001650:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() != HAL_OK)
 8001652:	f001 f8a9 	bl	80027a8 <HAL_FLASH_Unlock>
 8001656:	2800      	cmp	r0, #0
 8001658:	d001      	beq.n	800165e <flash_driver_write_data_option_bytes+0x22>
        return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
 800165c:	e7f7      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
    if (HAL_FLASH_OB_Unlock() != HAL_OK)
 800165e:	f001 f8c5 	bl	80027ec <HAL_FLASH_OB_Unlock>
 8001662:	2800      	cmp	r0, #0
 8001664:	d001      	beq.n	800166a <flash_driver_write_data_option_bytes+0x2e>
        return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	e7f1      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
    if (HAL_FLASHEx_OBErase() != HAL_OK)
 800166a:	f001 fa03 	bl	8002a74 <HAL_FLASHEx_OBErase>
 800166e:	1e06      	subs	r6, r0, #0
 8001670:	d122      	bne.n	80016b8 <flash_driver_write_data_option_bytes+0x7c>
    for (uint8_t i = 0; i < num_bytes; i++)
 8001672:	42ae      	cmp	r6, r5
 8001674:	d212      	bcs.n	800169c <flash_driver_write_data_option_bytes+0x60>
        option_byte.DATAAddress = option_bytes[i].address;
 8001676:	00f3      	lsls	r3, r6, #3
 8001678:	18e3      	adds	r3, r4, r3
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	9204      	str	r2, [sp, #16]
        option_byte.DATAData = option_bytes[i].data;
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	466a      	mov	r2, sp
 8001682:	7513      	strb	r3, [r2, #20]
        option_byte.OptionType = OPTIONBYTE_DATA;
 8001684:	2308      	movs	r3, #8
 8001686:	9300      	str	r3, [sp, #0]
        if (HAL_FLASHEx_OBProgram(&option_byte) != HAL_OK)
 8001688:	4668      	mov	r0, sp
 800168a:	f001 fad3 	bl	8002c34 <HAL_FLASHEx_OBProgram>
 800168e:	2800      	cmp	r0, #0
 8001690:	d102      	bne.n	8001698 <flash_driver_write_data_option_bytes+0x5c>
    for (uint8_t i = 0; i < num_bytes; i++)
 8001692:	3601      	adds	r6, #1
 8001694:	b2f6      	uxtb	r6, r6
 8001696:	e7ec      	b.n	8001672 <flash_driver_write_data_option_bytes+0x36>
            return HAL_ERROR;
 8001698:	2001      	movs	r0, #1
 800169a:	e7d8      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
    if (HAL_FLASH_OB_Lock() != HAL_OK)
 800169c:	f001 f8ba 	bl	8002814 <HAL_FLASH_OB_Lock>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d001      	beq.n	80016a8 <flash_driver_write_data_option_bytes+0x6c>
        return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
 80016a6:	e7d2      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
    if (HAL_FLASH_Lock() != HAL_OK)
 80016a8:	f001 f896 	bl	80027d8 <HAL_FLASH_Lock>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d0ce      	beq.n	800164e <flash_driver_write_data_option_bytes+0x12>
        return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
 80016b2:	e7cc      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
        return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	e7ca      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>
        return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	e7c8      	b.n	800164e <flash_driver_write_data_option_bytes+0x12>

080016bc <flash_driver_read_data>:
{
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	0005      	movs	r5, r0
 80016c0:	000f      	movs	r7, r1
 80016c2:	0016      	movs	r6, r2
	if (rx_buffer == NULL)
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d016      	beq.n	80016f6 <flash_driver_read_data+0x3a>
	int16_t index = 0;
 80016c8:	2400      	movs	r4, #0
 80016ca:	e000      	b.n	80016ce <flash_driver_read_data+0x12>
        if (!(numberofwords--))
 80016cc:	001e      	movs	r6, r3
   	    HAL_StatusTypeDef status = is_flash_ready();
 80016ce:	f7ff ff41 	bl	8001554 <is_flash_ready>
   	    if(status != HAL_OK)
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d10e      	bne.n	80016f4 <flash_driver_read_data+0x38>
    	uint16_t data = *(__IO uint16_t *)start_page_address;
 80016d6:	882b      	ldrh	r3, [r5, #0]
        uint16_t swapped_data = ((data & 0xFF) << 8) | ((data >> 8) & 0xFF);
 80016d8:	021a      	lsls	r2, r3, #8
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	4313      	orrs	r3, r2
 80016de:	b29b      	uxth	r3, r3
        start_page_address += 2;
 80016e0:	3502      	adds	r5, #2
        rx_buffer[index] = swapped_data;
 80016e2:	0062      	lsls	r2, r4, #1
 80016e4:	18ba      	adds	r2, r7, r2
 80016e6:	8013      	strh	r3, [r2, #0]
        index++;
 80016e8:	3401      	adds	r4, #1
 80016ea:	b224      	sxth	r4, r4
        if (!(numberofwords--))
 80016ec:	1e73      	subs	r3, r6, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2e00      	cmp	r6, #0
 80016f2:	d1eb      	bne.n	80016cc <flash_driver_read_data+0x10>
}
 80016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return HAL_ERROR; // Return error if the device instance is not valid
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7fc      	b.n	80016f4 <flash_driver_read_data+0x38>

080016fa <led_init>:
 * @param  port: pointer to the GPIO port to which the led is connected
 * @param  pin: pin number of the GPIO port to which the led is connected
 * @retval None
 */
void led_init(led_t* const led, GPIO_TypeDef* port, uint16_t pin)
{
 80016fa:	b510      	push	{r4, lr}
 80016fc:	0004      	movs	r4, r0
    led->port = port;
 80016fe:	6001      	str	r1, [r0, #0]
    led->pin = pin;
 8001700:	8082      	strh	r2, [r0, #4]
    led->flash_mode = false;
 8001702:	2300      	movs	r3, #0
 8001704:	7603      	strb	r3, [r0, #24]
    led->state = false;
 8001706:	7403      	strb	r3, [r0, #16]
    led->timer = millis();
 8001708:	f000 fa44 	bl	8001b94 <millis>
 800170c:	6160      	str	r0, [r4, #20]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800170e:	88a1      	ldrh	r1, [r4, #4]
 8001710:	6820      	ldr	r0, [r4, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	f001 fc0a 	bl	8002f2c <HAL_GPIO_WritePin>
}
 8001718:	bd10      	pop	{r4, pc}

0800171a <led_update>:
 * @brief  Updates the state of an led
 * @param  led: pointer to the led to update
 * @retval None
 */
void led_update(led_t* const led)
{
 800171a:	b510      	push	{r4, lr}
 800171c:	0004      	movs	r4, r0
    if (!led->flash_mode)
 800171e:	7e03      	ldrb	r3, [r0, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <led_update+0x1c>
	    return;
	
    if (led->state)
 8001724:	7c03      	ldrb	r3, [r0, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00e      	beq.n	8001748 <led_update+0x2e>
    {
        if (millis_timeout(&led->timer, led->on_period))
 800172a:	3014      	adds	r0, #20
 800172c:	68a1      	ldr	r1, [r4, #8]
 800172e:	f000 fa21 	bl	8001b74 <millis_timeout>
 8001732:	2800      	cmp	r0, #0
 8001734:	d100      	bne.n	8001738 <led_update+0x1e>
        {
            led->state = true;
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
        }
    }
}
 8001736:	bd10      	pop	{r4, pc}
            led->state = false;
 8001738:	2300      	movs	r3, #0
 800173a:	7423      	strb	r3, [r4, #16]
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800173c:	88a1      	ldrh	r1, [r4, #4]
 800173e:	6820      	ldr	r0, [r4, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	f001 fbf3 	bl	8002f2c <HAL_GPIO_WritePin>
 8001746:	e7f6      	b.n	8001736 <led_update+0x1c>
        if (millis_timeout(&led->timer, led->off_period))
 8001748:	3014      	adds	r0, #20
 800174a:	68e1      	ldr	r1, [r4, #12]
 800174c:	f000 fa12 	bl	8001b74 <millis_timeout>
 8001750:	2800      	cmp	r0, #0
 8001752:	d0f0      	beq.n	8001736 <led_update+0x1c>
            led->state = true;
 8001754:	2301      	movs	r3, #1
 8001756:	7423      	strb	r3, [r4, #16]
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8001758:	88a1      	ldrh	r1, [r4, #4]
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	f001 fbe5 	bl	8002f2c <HAL_GPIO_WritePin>
 8001762:	e7e8      	b.n	8001736 <led_update+0x1c>

08001764 <led_set_flash_rate>:
 * @param  on_period: on period of the led in milliseconds
 * @param  off_period: off period of the led in milliseconds
 * @retval None
 */
void led_set_flash_rate(led_t* const led, const uint32_t on_period, const uint32_t off_period)
{
 8001764:	b510      	push	{r4, lr}
 8001766:	0004      	movs	r4, r0
    led->on_period = on_period;
 8001768:	6081      	str	r1, [r0, #8]
    led->off_period = off_period;
 800176a:	60c2      	str	r2, [r0, #12]
    led->flash_mode = true;
 800176c:	2301      	movs	r3, #1
 800176e:	7603      	strb	r3, [r0, #24]
    led->timer = millis();
 8001770:	f000 fa10 	bl	8001b94 <millis>
 8001774:	6160      	str	r0, [r4, #20]
}
 8001776:	bd10      	pop	{r4, pc}

08001778 <led_off>:
 * @brief  Turns off an led
 * @param  led: pointer to the led to turn off
 * @retval None
 */
void led_off(led_t* const led)
{
 8001778:	b510      	push	{r4, lr}
    led->state = false;
 800177a:	2300      	movs	r3, #0
 800177c:	7403      	strb	r3, [r0, #16]
    led->flash_mode = false;
 800177e:	7603      	strb	r3, [r0, #24]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8001780:	8881      	ldrh	r1, [r0, #4]
 8001782:	6800      	ldr	r0, [r0, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	f001 fbd1 	bl	8002f2c <HAL_GPIO_WritePin>
}
 800178a:	bd10      	pop	{r4, pc}

0800178c <cmd_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <cmd_reset+0x14>)
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <cmd_reset+0x18>)
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800179a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800179c:	e7fd      	b.n	800179a <cmd_reset+0xe>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0004 	.word	0x05fa0004

080017a8 <cmd_set_flash_address>:
 *  Return:			ACP error code
 */
static acp_result_t cmd_set_flash_address(acp_packet_t *acp_packet)
{
	return ACP_SUCCESS;
}
 80017a8:	2001      	movs	r0, #1
 80017aa:	4770      	bx	lr

080017ac <cmd_echo_data>:
 *  Return:			ACP_SUCCESS
 */
static uint8_t cmd_echo_data(acp_packet_t *ptr)
{
	return (ACP_SUCCESS);
}
 80017ac:	2001      	movs	r0, #1
 80017ae:	4770      	bx	lr

080017b0 <cmd_get_uid_upper>:
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	0004      	movs	r4, r0
	uint32_t uuid_w2 = HAL_GetUIDw2();
 80017b4:	f000 fcc0 	bl	8002138 <HAL_GetUIDw2>
	acp_packet->data[0] = (uint8_t)((uuid_w2>>0) & 0xff);
 80017b8:	7160      	strb	r0, [r4, #5]
	acp_packet->data[1] = (uint8_t)((uuid_w2>>8) & 0xff);
 80017ba:	0a03      	lsrs	r3, r0, #8
 80017bc:	71a3      	strb	r3, [r4, #6]
	acp_packet->data[2] = (uint8_t)((uuid_w2>>16) & 0xff);
 80017be:	0c03      	lsrs	r3, r0, #16
 80017c0:	71e3      	strb	r3, [r4, #7]
	acp_packet->data[3] = (uint8_t)((uuid_w2>>24) & 0xff);
 80017c2:	0e00      	lsrs	r0, r0, #24
 80017c4:	7220      	strb	r0, [r4, #8]
	acp_packet->len = 4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	7123      	strb	r3, [r4, #4]
}
 80017ca:	2001      	movs	r0, #1
 80017cc:	bd10      	pop	{r4, pc}

080017ce <cmd_get_uid_lower>:
{
 80017ce:	b570      	push	{r4, r5, r6, lr}
 80017d0:	0004      	movs	r4, r0
	uint32_t uuid_w0 = HAL_GetUIDw0();
 80017d2:	f000 fca5 	bl	8002120 <HAL_GetUIDw0>
 80017d6:	0005      	movs	r5, r0
	uint32_t uuid_w1 = HAL_GetUIDw1();
 80017d8:	f000 fca8 	bl	800212c <HAL_GetUIDw1>
	acp_packet->data[0] = (uint8_t)((uuid_w0>>0) & 0xff);
 80017dc:	7165      	strb	r5, [r4, #5]
	acp_packet->data[1] = (uint8_t)((uuid_w0>>8) & 0xff);
 80017de:	0a2b      	lsrs	r3, r5, #8
 80017e0:	71a3      	strb	r3, [r4, #6]
	acp_packet->data[2] = (uint8_t)((uuid_w0>>16) & 0xff);
 80017e2:	0c2b      	lsrs	r3, r5, #16
 80017e4:	71e3      	strb	r3, [r4, #7]
	acp_packet->data[3] = (uint8_t)((uuid_w0>>24) & 0xff);
 80017e6:	0e2d      	lsrs	r5, r5, #24
 80017e8:	7225      	strb	r5, [r4, #8]
	acp_packet->data[4] = (uint8_t)((uuid_w1>>0) & 0xff);
 80017ea:	7260      	strb	r0, [r4, #9]
	acp_packet->data[5] = (uint8_t)((uuid_w1>>8) & 0xff);
 80017ec:	0a03      	lsrs	r3, r0, #8
 80017ee:	72a3      	strb	r3, [r4, #10]
	acp_packet->data[6] = (uint8_t)((uuid_w1>>16) & 0xff);
 80017f0:	0c03      	lsrs	r3, r0, #16
 80017f2:	72e3      	strb	r3, [r4, #11]
	acp_packet->data[7] = (uint8_t)((uuid_w1>>24) & 0xff);
 80017f4:	0e00      	lsrs	r0, r0, #24
 80017f6:	7320      	strb	r0, [r4, #12]
	acp_packet->len = 8;
 80017f8:	2308      	movs	r3, #8
 80017fa:	7123      	strb	r3, [r4, #4]
}
 80017fc:	2001      	movs	r0, #1
 80017fe:	bd70      	pop	{r4, r5, r6, pc}

08001800 <cmd_get_board_id>:
{
 8001800:	b510      	push	{r4, lr}
 8001802:	0004      	movs	r4, r0
	memcpy(acp_packet->data, board_info.board_id + 4, 8);
 8001804:	3005      	adds	r0, #5
 8001806:	2208      	movs	r2, #8
 8001808:	4903      	ldr	r1, [pc, #12]	; (8001818 <cmd_get_board_id+0x18>)
 800180a:	f002 fc0b 	bl	8004024 <memcpy>
	acp_packet->len = 8;
 800180e:	2308      	movs	r3, #8
 8001810:	7123      	strb	r3, [r4, #4]
}
 8001812:	2001      	movs	r0, #1
 8001814:	bd10      	pop	{r4, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	080107e4 	.word	0x080107e4

0800181c <cmd_get_fw_version>:
{
 800181c:	b510      	push	{r4, lr}
 800181e:	0004      	movs	r4, r0
	memcpy(acp_packet->data, board_info.version + 4, 8);
 8001820:	3005      	adds	r0, #5
 8001822:	2208      	movs	r2, #8
 8001824:	4903      	ldr	r1, [pc, #12]	; (8001834 <cmd_get_fw_version+0x18>)
 8001826:	f002 fbfd 	bl	8004024 <memcpy>
	acp_packet->len = 8;
 800182a:	2308      	movs	r3, #8
 800182c:	7123      	strb	r3, [r4, #4]
}
 800182e:	2001      	movs	r0, #1
 8001830:	bd10      	pop	{r4, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	080107f4 	.word	0x080107f4

08001838 <acp_cmd_error>:
{
 8001838:	0003      	movs	r3, r0
 800183a:	0008      	movs	r0, r1
	acp_packet->len = 6;
 800183c:	2206      	movs	r2, #6
 800183e:	711a      	strb	r2, [r3, #4]
	acp_packet->data[0] = 'E';
 8001840:	323f      	adds	r2, #63	; 0x3f
 8001842:	715a      	strb	r2, [r3, #5]
	acp_packet->data[1] = 'R';
 8001844:	320d      	adds	r2, #13
 8001846:	719a      	strb	r2, [r3, #6]
	acp_packet->data[2] = 'R';
 8001848:	71da      	strb	r2, [r3, #7]
	acp_packet->data[3] = 'O';
 800184a:	214f      	movs	r1, #79	; 0x4f
 800184c:	7219      	strb	r1, [r3, #8]
	acp_packet->data[4] = 'R';
 800184e:	725a      	strb	r2, [r3, #9]
	acp_packet->data[5] = error;
 8001850:	7298      	strb	r0, [r3, #10]
}
 8001852:	4770      	bx	lr

08001854 <cmd_validate_storage>:
{
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	0005      	movs	r5, r0
    if (memcmp(new_board_id, old_board_id, BOARD_ID_SIZE) != 0)
 800185a:	4925      	ldr	r1, [pc, #148]	; (80018f0 <cmd_validate_storage+0x9c>)
 800185c:	23f8      	movs	r3, #248	; 0xf8
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	18c8      	adds	r0, r1, r3
 8001862:	2208      	movs	r2, #8
 8001864:	f002 fbd0 	bl	8004008 <memcmp>
 8001868:	2800      	cmp	r0, #0
 800186a:	d122      	bne.n	80018b2 <cmd_validate_storage+0x5e>
    uint32_t flash_crc  = crc32(0, (uint8_t *) STORAGE_AREA_START_ADDRESS, STORAGE_AREA_SIZE);
 800186c:	22f8      	movs	r2, #248	; 0xf8
 800186e:	0212      	lsls	r2, r2, #8
 8001870:	4920      	ldr	r1, [pc, #128]	; (80018f4 <cmd_validate_storage+0xa0>)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f95a 	bl	8001b2c <crc32>
 8001878:	0006      	movs	r6, r0
    uint32_t remote_crc = (acp_packet->data[0] << 24) | (acp_packet->data[1] << 16) | (acp_packet->data[2] << 8) | acp_packet->data[3];
 800187a:	796c      	ldrb	r4, [r5, #5]
 800187c:	0624      	lsls	r4, r4, #24
 800187e:	79ab      	ldrb	r3, [r5, #6]
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	431c      	orrs	r4, r3
 8001884:	79eb      	ldrb	r3, [r5, #7]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	431c      	orrs	r4, r3
 800188a:	7a2b      	ldrb	r3, [r5, #8]
 800188c:	431c      	orrs	r4, r3
    debug_printf("Flash  CRC %08X\r\n", flash_crc);
 800188e:	0001      	movs	r1, r0
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <cmd_validate_storage+0xa4>)
 8001892:	f7ff fe07 	bl	80014a4 <debug_printf>
    debug_printf("Remote CRC %08X\r\n", remote_crc);
 8001896:	0021      	movs	r1, r4
 8001898:	4818      	ldr	r0, [pc, #96]	; (80018fc <cmd_validate_storage+0xa8>)
 800189a:	f7ff fe03 	bl	80014a4 <debug_printf>
    if (flash_crc != remote_crc)
 800189e:	42a6      	cmp	r6, r4
 80018a0:	d00d      	beq.n	80018be <cmd_validate_storage+0x6a>
        debug_printf("ERROR: Checksum mismatch\r\n");
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <cmd_validate_storage+0xac>)
 80018a4:	f7ff fdfe 	bl	80014a4 <debug_printf>
        return (acp_cmd_error(acp_packet, ACP_ERROR_CHECKSUM_ERROR));
 80018a8:	2113      	movs	r1, #19
 80018aa:	0028      	movs	r0, r5
 80018ac:	f7ff ffc4 	bl	8001838 <acp_cmd_error>
 80018b0:	e003      	b.n	80018ba <cmd_validate_storage+0x66>
        return (acp_cmd_error(acp_packet, ACP_ERROR_INVALID_IMAGE));
 80018b2:	2114      	movs	r1, #20
 80018b4:	0028      	movs	r0, r5
 80018b6:	f7ff ffbf 	bl	8001838 <acp_cmd_error>
}
 80018ba:	b004      	add	sp, #16
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
	OptionByteData option_bytes[NUM_OPTION_BYTES] = {
 80018be:	4668      	mov	r0, sp
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <cmd_validate_storage+0xb0>)
 80018c2:	0002      	movs	r2, r0
 80018c4:	cb52      	ldmia	r3!, {r1, r4, r6}
 80018c6:	c252      	stmia	r2!, {r1, r4, r6}
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6013      	str	r3, [r2, #0]
	if (flash_driver_write_data_option_bytes(option_bytes, NUM_OPTION_BYTES) != HAL_OK)
 80018cc:	2102      	movs	r1, #2
 80018ce:	f7ff feb5 	bl	800163c <flash_driver_write_data_option_bytes>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d103      	bne.n	80018de <cmd_validate_storage+0x8a>
    acp_packet->len = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	712b      	strb	r3, [r5, #4]
    return (ACP_SUCCESS);
 80018da:	2001      	movs	r0, #1
 80018dc:	e7ed      	b.n	80018ba <cmd_validate_storage+0x66>
		debug_printf("ERROR: flash_driver_write_data_option_bytes() failed.\r\n");
 80018de:	480a      	ldr	r0, [pc, #40]	; (8001908 <cmd_validate_storage+0xb4>)
 80018e0:	f7ff fde0 	bl	80014a4 <debug_printf>
		return (acp_cmd_error(acp_packet, ACP_ERROR_HAL_ERROR));
 80018e4:	210a      	movs	r1, #10
 80018e6:	0028      	movs	r0, r5
 80018e8:	f7ff ffa6 	bl	8001838 <acp_cmd_error>
 80018ec:	e7e5      	b.n	80018ba <cmd_validate_storage+0x66>
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	080107e4 	.word	0x080107e4
 80018f4:	08010800 	.word	0x08010800
 80018f8:	08005158 	.word	0x08005158
 80018fc:	0800516c 	.word	0x0800516c
 8001900:	08005180 	.word	0x08005180
 8001904:	08005134 	.word	0x08005134
 8001908:	0800519c 	.word	0x0800519c

0800190c <cmd_write_flash_data>:
{
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190e:	0004      	movs	r4, r0
	if (acp_packet->len < 2)
 8001910:	7905      	ldrb	r5, [r0, #4]
 8001912:	2d01      	cmp	r5, #1
 8001914:	d923      	bls.n	800195e <cmd_write_flash_data+0x52>
	uint32_t flash_write_ptr = (acp_packet->data[0] << 8) | acp_packet->data[1];
 8001916:	7941      	ldrb	r1, [r0, #5]
 8001918:	0209      	lsls	r1, r1, #8
 800191a:	7983      	ldrb	r3, [r0, #6]
 800191c:	4319      	orrs	r1, r3
	flash_write_ptr += internal_flash_device.start_sector;
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <cmd_write_flash_data+0x90>)
 8001920:	681e      	ldr	r6, [r3, #0]
 8001922:	1876      	adds	r6, r6, r1
	acp_packet->len -= 2;
 8001924:	3d02      	subs	r5, #2
 8001926:	b2ed      	uxtb	r5, r5
 8001928:	7105      	strb	r5, [r0, #4]
	if (((flash_write_ptr + acp_packet->len) > (FLASH_BANK1_END + 1)) || (flash_write_ptr & 0x01))
 800192a:	19aa      	adds	r2, r5, r6
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <cmd_write_flash_data+0x94>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d81d      	bhi.n	800196e <cmd_write_flash_data+0x62>
 8001932:	07f3      	lsls	r3, r6, #31
 8001934:	d41b      	bmi.n	800196e <cmd_write_flash_data+0x62>
	if (memcmp((uint8_t *)flash_write_ptr, (uint8_t *)&acp_packet->data[2], acp_packet->len) != 0)
 8001936:	1dc7      	adds	r7, r0, #7
 8001938:	002a      	movs	r2, r5
 800193a:	0039      	movs	r1, r7
 800193c:	0030      	movs	r0, r6
 800193e:	f002 fb63 	bl	8004008 <memcmp>
 8001942:	2800      	cmp	r0, #0
 8001944:	d007      	beq.n	8001956 <cmd_write_flash_data+0x4a>
		HAL_StatusTypeDef status = internal_flash_device.write(flash_write_ptr, (uint16_t *)&acp_packet->data[2], acp_packet->len);
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <cmd_write_flash_data+0x90>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	b2aa      	uxth	r2, r5
 800194c:	0039      	movs	r1, r7
 800194e:	0030      	movs	r0, r6
 8001950:	4798      	blx	r3
		if (status != HAL_OK)
 8001952:	2800      	cmp	r0, #0
 8001954:	d11a      	bne.n	800198c <cmd_write_flash_data+0x80>
	acp_packet->len = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	7123      	strb	r3, [r4, #4]
	return (ACP_SUCCESS);
 800195a:	2001      	movs	r0, #1
 800195c:	e015      	b.n	800198a <cmd_write_flash_data+0x7e>
		debug_printf("ERROR: Invalid address\r\n");
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <cmd_write_flash_data+0x98>)
 8001960:	f7ff fda0 	bl	80014a4 <debug_printf>
		return (acp_cmd_error(acp_packet, ACP_ERROR_ADDRESS_INVALID));
 8001964:	2111      	movs	r1, #17
 8001966:	0020      	movs	r0, r4
 8001968:	f7ff ff66 	bl	8001838 <acp_cmd_error>
 800196c:	e00d      	b.n	800198a <cmd_write_flash_data+0x7e>
		debug_printf("ERROR: Write pointer %d\r\n", flash_write_ptr);
 800196e:	0031      	movs	r1, r6
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <cmd_write_flash_data+0x9c>)
 8001972:	f7ff fd97 	bl	80014a4 <debug_printf>
		debug_printf("ERROR: Write address %d > %d\r\n", flash_write_ptr + acp_packet->len, FLASH_BANK1_END);
 8001976:	7921      	ldrb	r1, [r4, #4]
 8001978:	1989      	adds	r1, r1, r6
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <cmd_write_flash_data+0xa0>)
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <cmd_write_flash_data+0xa4>)
 800197e:	f7ff fd91 	bl	80014a4 <debug_printf>
		return (acp_cmd_error(acp_packet, ACP_ERROR_ADDRESS_INVALID));
 8001982:	2111      	movs	r1, #17
 8001984:	0020      	movs	r0, r4
 8001986:	f7ff ff57 	bl	8001838 <acp_cmd_error>
}
 800198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			debug_printf("ERROR: Flash write failed\r\n");
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <cmd_write_flash_data+0xa8>)
 800198e:	f7ff fd89 	bl	80014a4 <debug_printf>
			return (acp_cmd_error(acp_packet, ACP_ERROR_FLASH_WRITE_FAILED));
 8001992:	2112      	movs	r1, #18
 8001994:	0020      	movs	r0, r4
 8001996:	f7ff ff4f 	bl	8001838 <acp_cmd_error>
 800199a:	e7f6      	b.n	800198a <cmd_write_flash_data+0x7e>
 800199c:	200001b0 	.word	0x200001b0
 80019a0:	08020000 	.word	0x08020000
 80019a4:	080051d4 	.word	0x080051d4
 80019a8:	080051f0 	.word	0x080051f0
 80019ac:	0801ffff 	.word	0x0801ffff
 80019b0:	0800520c 	.word	0x0800520c
 80019b4:	0800522c 	.word	0x0800522c

080019b8 <cmd_erase_storage>:
{
 80019b8:	b530      	push	{r4, r5, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	0004      	movs	r4, r0
	flash_driver_init(&internal_flash_device, START_SECTOR, NUM_SECTOR, flash_driver_erase, flash_driver_write_data, flash_driver_write_data_option_bytes, flash_driver_read_data);
 80019be:	4d11      	ldr	r5, [pc, #68]	; (8001a04 <cmd_erase_storage+0x4c>)
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <cmd_erase_storage+0x50>)
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <cmd_erase_storage+0x54>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <cmd_erase_storage+0x58>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <cmd_erase_storage+0x5c>)
 80019ce:	221f      	movs	r2, #31
 80019d0:	4911      	ldr	r1, [pc, #68]	; (8001a18 <cmd_erase_storage+0x60>)
 80019d2:	0028      	movs	r0, r5
 80019d4:	f7ff fdd2 	bl	800157c <flash_driver_init>
	if (flash_driver_erase(&internal_flash_device) == HAL_OK)
 80019d8:	0028      	movs	r0, r5
 80019da:	f7ff fdde 	bl	800159a <flash_driver_erase>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d008      	beq.n	80019f4 <cmd_erase_storage+0x3c>
	debug_printf("ERROR: Failed to erase storage area\r\n");
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <cmd_erase_storage+0x64>)
 80019e4:	f7ff fd5e 	bl	80014a4 <debug_printf>
	return (acp_cmd_error(acp_packet, ACP_ERROR_MEMORY_NOT_ERASED));
 80019e8:	2110      	movs	r1, #16
 80019ea:	0020      	movs	r0, r4
 80019ec:	f7ff ff24 	bl	8001838 <acp_cmd_error>
}
 80019f0:	b005      	add	sp, #20
 80019f2:	bd30      	pop	{r4, r5, pc}
		debug_printf("Storage area erased\r\n");
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <cmd_erase_storage+0x68>)
 80019f6:	f7ff fd55 	bl	80014a4 <debug_printf>
		acp_packet->len = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	7123      	strb	r3, [r4, #4]
		return (ACP_SUCCESS);
 80019fe:	2001      	movs	r0, #1
 8001a00:	e7f6      	b.n	80019f0 <cmd_erase_storage+0x38>
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	200001b0 	.word	0x200001b0
 8001a08:	080016bd 	.word	0x080016bd
 8001a0c:	0800163d 	.word	0x0800163d
 8001a10:	080015d5 	.word	0x080015d5
 8001a14:	0800159b 	.word	0x0800159b
 8001a18:	08010800 	.word	0x08010800
 8001a1c:	08005260 	.word	0x08005260
 8001a20:	08005248 	.word	0x08005248

08001a24 <acp_command_process>:
{
 8001a24:	b510      	push	{r4, lr}
    uint16_t temp = acp_packet->acp_header.source;
 8001a26:	8842      	ldrh	r2, [r0, #2]
 8001a28:	04d1      	lsls	r1, r2, #19
    acp_packet->acp_header.source = acp_packet->acp_header.destination;
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	035b      	lsls	r3, r3, #13
 8001a2e:	0d9b      	lsrs	r3, r3, #22
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4c23      	ldr	r4, [pc, #140]	; (8001ac0 <acp_command_process+0x9c>)
 8001a34:	4022      	ands	r2, r4
 8001a36:	4313      	orrs	r3, r2
 8001a38:	8043      	strh	r3, [r0, #2]
    acp_packet->acp_header.destination = temp;
 8001a3a:	0d8a      	lsrs	r2, r1, #22
 8001a3c:	0252      	lsls	r2, r2, #9
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <acp_command_process+0xa0>)
 8001a40:	6801      	ldr	r1, [r0, #0]
 8001a42:	400b      	ands	r3, r1
 8001a44:	4313      	orrs	r3, r2
 8001a46:	6003      	str	r3, [r0, #0]
	if (application_command_table != NULL)
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <acp_command_process+0xa4>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d00a      	beq.n	8001a66 <acp_command_process+0x42>
		for (cmd_entry_ptr = application_command_table; cmd_entry_ptr->fptr != NULL; cmd_entry_ptr++)
 8001a50:	6853      	ldr	r3, [r2, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d014      	beq.n	8001a80 <acp_command_process+0x5c>
			if (acp_packet->acp_header.function == cmd_entry_ptr->function)
 8001a56:	8803      	ldrh	r3, [r0, #0]
 8001a58:	05db      	lsls	r3, r3, #23
 8001a5a:	0ddb      	lsrs	r3, r3, #23
 8001a5c:	8811      	ldrh	r1, [r2, #0]
 8001a5e:	428b      	cmp	r3, r1
 8001a60:	d003      	beq.n	8001a6a <acp_command_process+0x46>
		for (cmd_entry_ptr = application_command_table; cmd_entry_ptr->fptr != NULL; cmd_entry_ptr++)
 8001a62:	3208      	adds	r2, #8
 8001a64:	e7f4      	b.n	8001a50 <acp_command_process+0x2c>
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <acp_command_process+0xa8>)
 8001a68:	e00d      	b.n	8001a86 <acp_command_process+0x62>
				acp_packet->acp_header.function |= ACP_COMMAND_RESPONSE;
 8001a6a:	2480      	movs	r4, #128	; 0x80
 8001a6c:	0064      	lsls	r4, r4, #1
 8001a6e:	431c      	orrs	r4, r3
 8001a70:	8801      	ldrh	r1, [r0, #0]
 8001a72:	0a49      	lsrs	r1, r1, #9
 8001a74:	024b      	lsls	r3, r1, #9
 8001a76:	4323      	orrs	r3, r4
 8001a78:	8003      	strh	r3, [r0, #0]
				return (cmd_entry_ptr->fptr(acp_packet));
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	4798      	blx	r3
}
 8001a7e:	bd10      	pop	{r4, pc}
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <acp_command_process+0xa8>)
 8001a82:	e000      	b.n	8001a86 <acp_command_process+0x62>
    for (cmd_entry_ptr = acp_framework_cmd_table; cmd_entry_ptr->fptr != NULL; cmd_entry_ptr++)
 8001a84:	3208      	adds	r2, #8
 8001a86:	6853      	ldr	r3, [r2, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <acp_command_process+0x8a>
    	if (acp_packet->acp_header.function == cmd_entry_ptr->function)
 8001a8c:	8803      	ldrh	r3, [r0, #0]
 8001a8e:	05db      	lsls	r3, r3, #23
 8001a90:	0ddb      	lsrs	r3, r3, #23
 8001a92:	8811      	ldrh	r1, [r2, #0]
 8001a94:	428b      	cmp	r3, r1
 8001a96:	d1f5      	bne.n	8001a84 <acp_command_process+0x60>
    		acp_packet->acp_header.function |= ACP_COMMAND_RESPONSE;
 8001a98:	2480      	movs	r4, #128	; 0x80
 8001a9a:	0064      	lsls	r4, r4, #1
 8001a9c:	431c      	orrs	r4, r3
 8001a9e:	8801      	ldrh	r1, [r0, #0]
 8001aa0:	0a49      	lsrs	r1, r1, #9
 8001aa2:	024b      	lsls	r3, r1, #9
 8001aa4:	4323      	orrs	r3, r4
 8001aa6:	8003      	strh	r3, [r0, #0]
    		return (cmd_entry_ptr->fptr(acp_packet));
 8001aa8:	6853      	ldr	r3, [r2, #4]
 8001aaa:	4798      	blx	r3
 8001aac:	e7e7      	b.n	8001a7e <acp_command_process+0x5a>
	acp_packet->acp_header.function |= ACP_COMMAND_RESPONSE;
 8001aae:	8802      	ldrh	r2, [r0, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	33ff      	adds	r3, #255	; 0xff
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	8003      	strh	r3, [r0, #0]
    return (acp_cmd_error(acp_packet, ACP_ERROR_UNKNOWN_COMMAND));
 8001ab8:	2102      	movs	r1, #2
 8001aba:	f7ff febd 	bl	8001838 <acp_cmd_error>
 8001abe:	e7de      	b.n	8001a7e <acp_command_process+0x5a>
 8001ac0:	ffffe007 	.word	0xffffe007
 8001ac4:	fff801ff 	.word	0xfff801ff
 8001ac8:	200001ac 	.word	0x200001ac
 8001acc:	08005288 	.word	0x08005288

08001ad0 <vectors_to_ram>:
#define TOP_OF_STACK						   	(uint32_t)(&_estack)
#define RESET_HANDLER							(uint32_t)(&Reset_Handler)


void vectors_to_ram(void)
{
 8001ad0:	b082      	sub	sp, #8
    // Copy interrupt vector table to the RAM.
    volatile uint32_t *vector_table = (volatile uint32_t *)0x20000000;

    for(uint32_t idx = 0; idx < 48; idx++)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	e009      	b.n	8001aea <vectors_to_ram+0x1a>
    	vector_table[idx] = *(__IO uint32_t*)((uint32_t)APPLICATION_START_ADDR + (idx << 2));
 8001ad6:	0093      	lsls	r3, r2, #2
 8001ad8:	4911      	ldr	r1, [pc, #68]	; (8001b20 <vectors_to_ram+0x50>)
 8001ada:	1859      	adds	r1, r3, r1
 8001adc:	2080      	movs	r0, #128	; 0x80
 8001ade:	0580      	lsls	r0, r0, #22
 8001ae0:	4684      	mov	ip, r0
 8001ae2:	4463      	add	r3, ip
 8001ae4:	6809      	ldr	r1, [r1, #0]
 8001ae6:	6019      	str	r1, [r3, #0]
    for(uint32_t idx = 0; idx < 48; idx++)
 8001ae8:	3201      	adds	r2, #1
 8001aea:	2a2f      	cmp	r2, #47	; 0x2f
 8001aec:	d9f3      	bls.n	8001ad6 <vectors_to_ram+0x6>

    // Reset all AHB peripherals
    __HAL_RCC_AHB_FORCE_RESET();
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <vectors_to_ram+0x54>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	4252      	negs	r2, r2
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_RCC_AHB_RELEASE_RESET();
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28

    // Enable SYSCFG clock
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	6999      	ldr	r1, [r3, #24]
 8001afc:	3201      	adds	r2, #1
 8001afe:	4311      	orrs	r1, r2
 8001b00:	6199      	str	r1, [r3, #24]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	401a      	ands	r2, r3
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]

    // Remap SRAM into 0x0000 0000
    __HAL_SYSCFG_REMAPMEMORY_SRAM();
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <vectors_to_ram+0x58>)
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	2003      	movs	r0, #3
 8001b10:	4381      	bics	r1, r0
 8001b12:	6019      	str	r1, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4302      	orrs	r2, r0
 8001b18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1a:	b662      	cpsie	i

    __enable_irq();
}
 8001b1c:	b002      	add	sp, #8
 8001b1e:	4770      	bx	lr
 8001b20:	08001000 	.word	0x08001000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000

08001b2c <crc32>:
 *					len		length of content
 *
 *	Return:			TRUE if notification is new
 */
uint32_t crc32(uint32_t crc, uint8_t *ptr, uint32_t len)
{
 8001b2c:	b510      	push	{r4, lr}
	crc = crc ^ ~0U;
 8001b2e:	43c0      	mvns	r0, r0

	while (len--)
 8001b30:	e00a      	b.n	8001b48 <crc32+0x1c>
		crc = crc32_table[(crc ^ *ptr++) & 0xFF] ^ (crc >> 8);
 8001b32:	780a      	ldrb	r2, [r1, #0]
 8001b34:	4042      	eors	r2, r0
 8001b36:	23ff      	movs	r3, #255	; 0xff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <crc32+0x28>)
 8001b3e:	589b      	ldr	r3, [r3, r2]
 8001b40:	0a00      	lsrs	r0, r0, #8
 8001b42:	4058      	eors	r0, r3
	while (len--)
 8001b44:	0022      	movs	r2, r4
		crc = crc32_table[(crc ^ *ptr++) & 0xFF] ^ (crc >> 8);
 8001b46:	3101      	adds	r1, #1
	while (len--)
 8001b48:	1e54      	subs	r4, r2, #1
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d1f1      	bne.n	8001b32 <crc32+0x6>

	return crc ^ ~0U;
 8001b4e:	43c0      	mvns	r0, r0
}
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	080052e0 	.word	0x080052e0

08001b58 <__io_putchar>:
#define UART_DELAY 100

UART_HandleTypeDef huart2; // assuming that you've already initialized this somewhere

int __io_putchar(int ch)
{
 8001b58:	b500      	push	{lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, DATA_SIZE, UART_DELAY);
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	a901      	add	r1, sp, #4
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <__io_putchar+0x18>)
 8001b66:	f002 f8fc 	bl	8003d62 <HAL_UART_Transmit>
    return ch;
}
 8001b6a:	9801      	ldr	r0, [sp, #4]
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bd00      	pop	{pc}
 8001b70:	200001c8 	.word	0x200001c8

08001b74 <millis_timeout>:
 * @param[in] reference_time A pointer to the reference time in milliseconds.
 * @param[in] interval The time interval in milliseconds to check against.
 * @return true if the interval has passed, false otherwise.
 */
bool millis_timeout(millis_t* reference_time, millis_t interval)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	0004      	movs	r4, r0
 8001b78:	000d      	movs	r5, r1
    if (HAL_GetTick() - *reference_time > interval)
 8001b7a:	f000 facb 	bl	8002114 <HAL_GetTick>
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	1ac0      	subs	r0, r0, r3
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d801      	bhi.n	8001b8a <millis_timeout+0x16>
    {
        *reference_time = HAL_GetTick();
        return true;
    }
    return false;
 8001b86:	2000      	movs	r0, #0
}
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
        *reference_time = HAL_GetTick();
 8001b8a:	f000 fac3 	bl	8002114 <HAL_GetTick>
 8001b8e:	6020      	str	r0, [r4, #0]
        return true;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7f9      	b.n	8001b88 <millis_timeout+0x14>

08001b94 <millis>:
 * @brief Returns the current systick in milliseconds
 *
 * @return The current systick value in milliseconds.
 */
millis_t millis(void)
{
 8001b94:	b510      	push	{r4, lr}
    return HAL_GetTick();
 8001b96:	f000 fabd 	bl	8002114 <HAL_GetTick>
}
 8001b9a:	bd10      	pop	{r4, pc}

08001b9c <acp_notification_packet>:
 *
 * @return True if ACP packet is a response/notification
 */
bool acp_notification_packet(acp_packet_t *acp_packet)
{
	return (acp_packet->acp_header.function >= ACP_COMMAND_RESPONSE);
 8001b9c:	8800      	ldrh	r0, [r0, #0]
 8001b9e:	05c0      	lsls	r0, r0, #23
 8001ba0:	0dc3      	lsrs	r3, r0, #23
 8001ba2:	20ff      	movs	r0, #255	; 0xff
 8001ba4:	4298      	cmp	r0, r3
 8001ba6:	4180      	sbcs	r0, r0
 8001ba8:	4240      	negs	r0, r0
}
 8001baa:	4770      	bx	lr

08001bac <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001bac:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001bae:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_CAN_Init+0x40>)
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_CAN_Init+0x44>)
 8001bb2:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 8;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8001bbc:	22c0      	movs	r2, #192	; 0xc0
 8001bbe:	0492      	lsls	r2, r2, #18
 8001bc0:	60c2      	str	r2, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001bc2:	22f0      	movs	r2, #240	; 0xf0
 8001bc4:	0312      	lsls	r2, r2, #12
 8001bc6:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001bc8:	22c0      	movs	r2, #192	; 0xc0
 8001bca:	03d2      	lsls	r2, r2, #15
 8001bcc:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001bce:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001bd0:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001bd2:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001bd4:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001bd6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001bd8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001bda:	f000 fab3 	bl	8002144 <HAL_CAN_Init>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d100      	bne.n	8001be4 <MX_CAN_Init+0x38>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001be2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001be4:	f000 f908 	bl	8001df8 <Error_Handler>
}
 8001be8:	e7fb      	b.n	8001be2 <MX_CAN_Init+0x36>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000250 	.word	0x20000250
 8001bf0:	40006400 	.word	0x40006400

08001bf4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	2214      	movs	r2, #20
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	a803      	add	r0, sp, #12
 8001c00:	f002 fa19 	bl	8004036 <memset>
  if(canHandle->Instance==CAN)
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_CAN_MspInit+0x60>)
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_CAN_MspInit+0x1c>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001c0c:	b008      	add	sp, #32
 8001c0e:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_CAN_MspInit+0x64>)
 8001c12:	69d9      	ldr	r1, [r3, #28]
 8001c14:	2080      	movs	r0, #128	; 0x80
 8001c16:	0480      	lsls	r0, r0, #18
 8001c18:	4301      	orrs	r1, r0
 8001c1a:	61d9      	str	r1, [r3, #28]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	4002      	ands	r2, r0
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	02c9      	lsls	r1, r1, #11
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	400b      	ands	r3, r1
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c36:	23c0      	movs	r3, #192	; 0xc0
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	3301      	adds	r3, #1
 8001c42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001c44:	3301      	adds	r3, #1
 8001c46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	a903      	add	r1, sp, #12
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <HAL_CAN_MspInit+0x68>)
 8001c4c:	f001 f8a0 	bl	8002d90 <HAL_GPIO_Init>
}
 8001c50:	e7dc      	b.n	8001c0c <HAL_CAN_MspInit+0x18>
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40006400 	.word	0x40006400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400

08001c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c60:	b510      	push	{r4, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	2214      	movs	r2, #20
 8001c66:	2100      	movs	r1, #0
 8001c68:	a805      	add	r0, sp, #20
 8001c6a:	f002 f9e4 	bl	8004036 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <MX_GPIO_Init+0x90>)
 8001c70:	6959      	ldr	r1, [r3, #20]
 8001c72:	2080      	movs	r0, #128	; 0x80
 8001c74:	0300      	lsls	r0, r0, #12
 8001c76:	4301      	orrs	r1, r0
 8001c78:	6159      	str	r1, [r3, #20]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	4002      	ands	r2, r0
 8001c7e:	9201      	str	r2, [sp, #4]
 8001c80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	6959      	ldr	r1, [r3, #20]
 8001c84:	2080      	movs	r0, #128	; 0x80
 8001c86:	03c0      	lsls	r0, r0, #15
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	6159      	str	r1, [r3, #20]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	4002      	ands	r2, r0
 8001c90:	9202      	str	r2, [sp, #8]
 8001c92:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	6959      	ldr	r1, [r3, #20]
 8001c96:	2080      	movs	r0, #128	; 0x80
 8001c98:	02c0      	lsls	r0, r0, #11
 8001c9a:	4301      	orrs	r1, r0
 8001c9c:	6159      	str	r1, [r3, #20]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	4002      	ands	r2, r0
 8001ca2:	9203      	str	r2, [sp, #12]
 8001ca4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0289      	lsls	r1, r1, #10
 8001cac:	430a      	orrs	r2, r1
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	9304      	str	r3, [sp, #16]
 8001cb6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_CAN_ENABLE_PIN_GPIO_Port, GPIO_CAN_ENABLE_PIN_Pin, GPIO_PIN_SET);
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	4c0e      	ldr	r4, [pc, #56]	; (8001cf4 <MX_GPIO_Init+0x94>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	0189      	lsls	r1, r1, #6
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	f001 f933 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8001cc6:	21c0      	movs	r1, #192	; 0xc0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	0209      	lsls	r1, r1, #8
 8001ccc:	0020      	movs	r0, r4
 8001cce:	f001 f92d 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_CAN_ENABLE_PIN_Pin|STATUS_LED_Pin|ERROR_LED_Pin;
 8001cd2:	23e0      	movs	r3, #224	; 0xe0
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	a905      	add	r1, sp, #20
 8001ce4:	0020      	movs	r0, r4
 8001ce6:	f001 f853 	bl	8002d90 <HAL_GPIO_Init>

}
 8001cea:	b00a      	add	sp, #40	; 0x28
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cf8:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MX_I2C2_Init+0x54>)
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_I2C2_Init+0x58>)
 8001cfe:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_I2C2_Init+0x5c>)
 8001d02:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d0e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d10:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d12:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d14:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d16:	f001 f90f 	bl	8002f38 <HAL_I2C_Init>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d10c      	bne.n	8001d38 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	480a      	ldr	r0, [pc, #40]	; (8001d4c <MX_I2C2_Init+0x54>)
 8001d22:	f001 f96f 	bl	8003004 <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d109      	bne.n	8001d3e <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_I2C2_Init+0x54>)
 8001d2e:	f001 f995 	bl	800305c <HAL_I2CEx_ConfigDigitalFilter>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d106      	bne.n	8001d44 <MX_I2C2_Init+0x4c>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d36:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001d38:	f000 f85e 	bl	8001df8 <Error_Handler>
 8001d3c:	e7ef      	b.n	8001d1e <MX_I2C2_Init+0x26>
    Error_Handler();
 8001d3e:	f000 f85b 	bl	8001df8 <Error_Handler>
 8001d42:	e7f2      	b.n	8001d2a <MX_I2C2_Init+0x32>
    Error_Handler();
 8001d44:	f000 f858 	bl	8001df8 <Error_Handler>
}
 8001d48:	e7f5      	b.n	8001d36 <MX_I2C2_Init+0x3e>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20000278 	.word	0x20000278
 8001d50:	40005800 	.word	0x40005800
 8001d54:	20303e5d 	.word	0x20303e5d

08001d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	2214      	movs	r2, #20
 8001d60:	2100      	movs	r1, #0
 8001d62:	a803      	add	r0, sp, #12
 8001d64:	f002 f967 	bl	8004036 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_I2C_MspInit+0x60>)
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d70:	b008      	add	sp, #32
 8001d72:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4c11      	ldr	r4, [pc, #68]	; (8001dbc <HAL_I2C_MspInit+0x64>)
 8001d76:	6962      	ldr	r2, [r4, #20]
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	02c9      	lsls	r1, r1, #11
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	6162      	str	r2, [r4, #20]
 8001d80:	6963      	ldr	r3, [r4, #20]
 8001d82:	400b      	ands	r3, r1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	3b0f      	subs	r3, #15
 8001d94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001d96:	3b02      	subs	r3, #2
 8001d98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	a903      	add	r1, sp, #12
 8001d9c:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <HAL_I2C_MspInit+0x68>)
 8001d9e:	f000 fff7 	bl	8002d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da2:	69e2      	ldr	r2, [r4, #28]
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	03c9      	lsls	r1, r1, #15
 8001da8:	430a      	orrs	r2, r1
 8001daa:	61e2      	str	r2, [r4, #28]
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	400b      	ands	r3, r1
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	9b02      	ldr	r3, [sp, #8]
}
 8001db4:	e7dc      	b.n	8001d70 <HAL_I2C_MspInit+0x18>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40005800 	.word	0x40005800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001dc4:	b510      	push	{r4, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <MX_IWDG_Init+0x24>)
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_IWDG_Init+0x28>)
 8001dca:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <MX_IWDG_Init+0x2c>)
 8001dd2:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 3124;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_IWDG_Init+0x30>)
 8001dd6:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001dd8:	f001 f96a 	bl	80030b0 <HAL_IWDG_Init>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d100      	bne.n	8001de2 <MX_IWDG_Init+0x1e>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001de0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001de2:	f000 f809 	bl	8001df8 <Error_Handler>
}
 8001de6:	e7fb      	b.n	8001de0 <MX_IWDG_Init+0x1c>
 8001de8:	200002cc 	.word	0x200002cc
 8001dec:	40003000 	.word	0x40003000
 8001df0:	00000fff 	.word	0x00000fff
 8001df4:	00000c34 	.word	0x00000c34

08001df8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <Error_Handler+0x2>

08001dfc <SystemClock_Config>:
{
 8001dfc:	b500      	push	{lr}
 8001dfe:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e00:	2234      	movs	r2, #52	; 0x34
 8001e02:	2100      	movs	r1, #0
 8001e04:	a80b      	add	r0, sp, #44	; 0x2c
 8001e06:	f002 f916 	bl	8004036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a807      	add	r0, sp, #28
 8001e10:	f002 f911 	bl	8004036 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	221c      	movs	r2, #28
 8001e16:	2100      	movs	r1, #0
 8001e18:	4668      	mov	r0, sp
 8001e1a:	f002 f90c 	bl	8004036 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e22:	3b08      	subs	r3, #8
 8001e24:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e26:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	3301      	adds	r3, #1
 8001e2a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	031b      	lsls	r3, r3, #12
 8001e36:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	a80b      	add	r0, sp, #44	; 0x2c
 8001e3a:	f001 f975 	bl	8003128 <HAL_RCC_OscConfig>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d117      	bne.n	8001e72 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e42:	2307      	movs	r3, #7
 8001e44:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	3b05      	subs	r3, #5
 8001e48:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e4e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e50:	2101      	movs	r1, #1
 8001e52:	a807      	add	r0, sp, #28
 8001e54:	f001 fc4c 	bl	80036f0 <HAL_RCC_ClockConfig>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d10c      	bne.n	8001e76 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e64:	4668      	mov	r0, sp
 8001e66:	f001 fcfb 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d105      	bne.n	8001e7a <SystemClock_Config+0x7e>
}
 8001e6e:	b019      	add	sp, #100	; 0x64
 8001e70:	bd00      	pop	{pc}
    Error_Handler();
 8001e72:	f7ff ffc1 	bl	8001df8 <Error_Handler>
    Error_Handler();
 8001e76:	f7ff ffbf 	bl	8001df8 <Error_Handler>
    Error_Handler();
 8001e7a:	f7ff ffbd 	bl	8001df8 <Error_Handler>
	...

08001e80 <main>:
{
 8001e80:	b510      	push	{r4, lr}
  HAL_Init();
 8001e82:	f000 f92b 	bl	80020dc <HAL_Init>
  SystemClock_Config();
 8001e86:	f7ff ffb9 	bl	8001dfc <SystemClock_Config>
  MX_GPIO_Init();
 8001e8a:	f7ff fee9 	bl	8001c60 <MX_GPIO_Init>
  MX_CAN_Init();
 8001e8e:	f7ff fe8d 	bl	8001bac <MX_CAN_Init>
  MX_I2C2_Init();
 8001e92:	f7ff ff31 	bl	8001cf8 <MX_I2C2_Init>
  MX_IWDG_Init();
 8001e96:	f7ff ff95 	bl	8001dc4 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8001e9a:	f000 f877 	bl	8001f8c <MX_USART1_UART_Init>
	  app_task();
 8001e9e:	f7ff fa19 	bl	80012d4 <app_task>
	  HAL_IWDG_Refresh(&hiwdg);
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <main+0x2c>)
 8001ea4:	f001 f938 	bl	8003118 <HAL_IWDG_Refresh>
  while (1)
 8001ea8:	e7f9      	b.n	8001e9e <main+0x1e>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	200002cc 	.word	0x200002cc

08001eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_MspInit+0x2c>)
 8001eb4:	6999      	ldr	r1, [r3, #24]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4311      	orrs	r1, r2
 8001eba:	6199      	str	r1, [r3, #24]
 8001ebc:	6999      	ldr	r1, [r3, #24]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	9200      	str	r2, [sp, #0]
 8001ec2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0549      	lsls	r1, r1, #21
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	61da      	str	r2, [r3, #28]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	b002      	add	sp, #8
 8001ed8:	4770      	bx	lr
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40021000 	.word	0x40021000

08001ee0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <NMI_Handler>

08001ee2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler>

08001ee4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	4770      	bx	lr

08001ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eea:	f000 f907 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eee:	bd10      	pop	{r4, pc}

08001ef0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	000c      	movs	r4, r1
 8001ef4:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e004      	b.n	8001f04 <_read+0x14>
  {
    *ptr++ = __io_getchar();
 8001efa:	e000      	b.n	8001efe <_read+0xe>
 8001efc:	bf00      	nop
 8001efe:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001f02:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	42b5      	cmp	r5, r6
 8001f06:	dbf8      	blt.n	8001efa <_read+0xa>
  }

  return len;
}
 8001f08:	0030      	movs	r0, r6
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2400      	movs	r4, #0
 8001f12:	e005      	b.n	8001f20 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001f14:	1c4d      	adds	r5, r1, #1
 8001f16:	7808      	ldrb	r0, [r1, #0]
 8001f18:	f7ff fe1e 	bl	8001b58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8001f1e:	0029      	movs	r1, r5
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	42b4      	cmp	r4, r6
 8001f22:	dbf7      	blt.n	8001f14 <_write+0x8>
  }
  return len;
}
 8001f24:	0030      	movs	r0, r6
 8001f26:	bd70      	pop	{r4, r5, r6, pc}

08001f28 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001f28:	2001      	movs	r0, #1
}
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	4770      	bx	lr

08001f38 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	4770      	bx	lr

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <_sbrk+0x38>)
 8001f46:	490d      	ldr	r1, [pc, #52]	; (8001f7c <_sbrk+0x3c>)
 8001f48:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4a:	490d      	ldr	r1, [pc, #52]	; (8001f80 <_sbrk+0x40>)
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	2900      	cmp	r1, #0
 8001f50:	d007      	beq.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	490b      	ldr	r1, [pc, #44]	; (8001f80 <_sbrk+0x40>)
 8001f54:	6808      	ldr	r0, [r1, #0]
 8001f56:	18c3      	adds	r3, r0, r3
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d806      	bhi.n	8001f6a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f5c:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <_sbrk+0x40>)
 8001f5e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f60:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f62:	4907      	ldr	r1, [pc, #28]	; (8001f80 <_sbrk+0x40>)
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <_sbrk+0x44>)
 8001f66:	6008      	str	r0, [r1, #0]
 8001f68:	e7f3      	b.n	8001f52 <_sbrk+0x12>
    errno = ENOMEM;
 8001f6a:	f002 f823 	bl	8003fb4 <__errno>
 8001f6e:	230c      	movs	r3, #12
 8001f70:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f72:	2001      	movs	r0, #1
 8001f74:	4240      	negs	r0, r0
 8001f76:	e7f3      	b.n	8001f60 <_sbrk+0x20>
 8001f78:	20004000 	.word	0x20004000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	200002dc 	.word	0x200002dc
 8001f84:	200003a0 	.word	0x200003a0

08001f88 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f88:	4770      	bx	lr
	...

08001f8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f8c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <MX_USART1_UART_Init+0x38>)
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <MX_USART1_UART_Init+0x3c>)
 8001f92:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8001f94:	2396      	movs	r3, #150	; 0x96
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f001 ffb7 	bl	8003f24 <HAL_RS485Ex_Init>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d100      	bne.n	8001fbc <MX_USART1_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fba:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001fbc:	f7ff ff1c 	bl	8001df8 <Error_Handler>
}
 8001fc0:	e7fb      	b.n	8001fba <MX_USART1_UART_Init+0x2e>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	200002e0 	.word	0x200002e0
 8001fc8:	40013800 	.word	0x40013800

08001fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	2214      	movs	r2, #20
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	a803      	add	r0, sp, #12
 8001fd8:	f002 f82d 	bl	8004036 <memset>
  if(uartHandle->Instance==USART1)
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_UART_MspInit+0x60>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fe4:	b008      	add	sp, #32
 8001fe6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_UART_MspInit+0x64>)
 8001fea:	6999      	ldr	r1, [r3, #24]
 8001fec:	2080      	movs	r0, #128	; 0x80
 8001fee:	01c0      	lsls	r0, r0, #7
 8001ff0:	4301      	orrs	r1, r0
 8001ff2:	6199      	str	r1, [r3, #24]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	4002      	ands	r2, r0
 8001ff8:	9201      	str	r2, [sp, #4]
 8001ffa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0289      	lsls	r1, r1, #10
 8002002:	430a      	orrs	r2, r1
 8002004:	615a      	str	r2, [r3, #20]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	400b      	ands	r3, r1
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800200e:	23b0      	movs	r3, #176	; 0xb0
 8002010:	015b      	lsls	r3, r3, #5
 8002012:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002018:	3301      	adds	r3, #1
 800201a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800201c:	3b02      	subs	r3, #2
 800201e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	2090      	movs	r0, #144	; 0x90
 8002022:	a903      	add	r1, sp, #12
 8002024:	05c0      	lsls	r0, r0, #23
 8002026:	f000 feb3 	bl	8002d90 <HAL_GPIO_Init>
}
 800202a:	e7db      	b.n	8001fe4 <HAL_UART_MspInit+0x18>
 800202c:	40013800 	.word	0x40013800
 8002030:	40021000 	.word	0x40021000

08002034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002036:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002038:	f7ff ffa6 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <LoopForever+0x6>)
  ldr r1, =_edata
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <LoopForever+0xe>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002054:	4c0b      	ldr	r4, [pc, #44]	; (8002084 <LoopForever+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002062:	f001 ffad 	bl	8003fc0 <__libc_init_array>
  /* Call vectors_to_ram */
  bl 	vectors_to_ram
 8002066:	f7ff fd33 	bl	8001ad0 <vectors_to_ram>
/* Call the application's entry point.*/
  bl main
 800206a:	f7ff ff09 	bl	8001e80 <main>

0800206e <LoopForever>:

LoopForever:
    b LoopForever
 800206e:	e7fe      	b.n	800206e <LoopForever>
  ldr   r0, =_estack
 8002070:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002074:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8002078:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800207c:	080057b8 	.word	0x080057b8
  ldr r2, =_sbss
 8002080:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002084:	200003a0 	.word	0x200003a0

08002088 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC1_COMP_IRQHandler>
	...

0800208c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b510      	push	{r4, lr}
 800208e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_InitTick+0x44>)
 8002092:	7819      	ldrb	r1, [r3, #0]
 8002094:	20fa      	movs	r0, #250	; 0xfa
 8002096:	0080      	lsls	r0, r0, #2
 8002098:	f7ff f840 	bl	800111c <__udivsi3>
 800209c:	0001      	movs	r1, r0
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_InitTick+0x48>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f7ff f83b 	bl	800111c <__udivsi3>
 80020a6:	f000 fb33 	bl	8002710 <HAL_SYSTICK_Config>
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	2c03      	cmp	r4, #3
 80020b0:	d901      	bls.n	80020b6 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
 80020b4:	e00a      	b.n	80020cc <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b6:	3001      	adds	r0, #1
 80020b8:	2200      	movs	r2, #0
 80020ba:	0021      	movs	r1, r4
 80020bc:	4240      	negs	r0, r0
 80020be:	f000 faf7 	bl	80026b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_InitTick+0x4c>)
 80020c4:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 80020c6:	2000      	movs	r0, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x40>
    return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
}
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	200000c8 	.word	0x200000c8
 80020d4:	200000c4 	.word	0x200000c4
 80020d8:	200000cc 	.word	0x200000cc

080020dc <HAL_Init>:
{
 80020dc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_Init+0x1c>)
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	2110      	movs	r1, #16
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7ff ffcf 	bl	800208c <HAL_InitTick>
  HAL_MspInit();
 80020ee:	f7ff fedf 	bl	8001eb0 <HAL_MspInit>
}
 80020f2:	2000      	movs	r0, #0
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020fc:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_IncTick+0x10>)
 80020fe:	6811      	ldr	r1, [r2, #0]
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_IncTick+0x14>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	185b      	adds	r3, r3, r1
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	4770      	bx	lr
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	20000368 	.word	0x20000368
 8002110:	200000c8 	.word	0x200000c8

08002114 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002114:	4b01      	ldr	r3, [pc, #4]	; (800211c <HAL_GetTick+0x8>)
 8002116:	6818      	ldr	r0, [r3, #0]
}
 8002118:	4770      	bx	lr
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000368 	.word	0x20000368

08002120 <HAL_GetUIDw0>:
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002120:	4b01      	ldr	r3, [pc, #4]	; (8002128 <HAL_GetUIDw0+0x8>)
 8002122:	6818      	ldr	r0, [r3, #0]
}
 8002124:	4770      	bx	lr
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	1ffff7ac 	.word	0x1ffff7ac

0800212c <HAL_GetUIDw1>:
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_GetUIDw1+0x8>)
 800212e:	6818      	ldr	r0, [r3, #0]
}
 8002130:	4770      	bx	lr
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	1ffff7b0 	.word	0x1ffff7b0

08002138 <HAL_GetUIDw2>:
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002138:	4b01      	ldr	r3, [pc, #4]	; (8002140 <HAL_GetUIDw2+0x8>)
 800213a:	6818      	ldr	r0, [r3, #0]
}
 800213c:	4770      	bx	lr
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	1ffff7b4 	.word	0x1ffff7b4

08002144 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002148:	d100      	bne.n	800214c <HAL_CAN_Init+0x8>
 800214a:	e0a0      	b.n	800228e <HAL_CAN_Init+0x14a>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800214c:	2320      	movs	r3, #32
 800214e:	5cc3      	ldrb	r3, [r0, r3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01a      	beq.n	800218a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430b      	orrs	r3, r1
 800215c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215e:	f7ff ffd9 	bl	8002114 <HAL_GetTick>
 8002162:	0005      	movs	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	07d2      	lsls	r2, r2, #31
 800216a:	d411      	bmi.n	8002190 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800216c:	f7ff ffd2 	bl	8002114 <HAL_GetTick>
 8002170:	1b40      	subs	r0, r0, r5
 8002172:	280a      	cmp	r0, #10
 8002174:	d9f6      	bls.n	8002164 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002176:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	4313      	orrs	r3, r2
 800217e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002180:	2320      	movs	r3, #32
 8002182:	2205      	movs	r2, #5
 8002184:	54e2      	strb	r2, [r4, r3]

      return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002188:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 800218a:	f7ff fd33 	bl	8001bf4 <HAL_CAN_MspInit>
 800218e:	e7e1      	b.n	8002154 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	2102      	movs	r1, #2
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002198:	f7ff ffbc 	bl	8002114 <HAL_GetTick>
 800219c:	0005      	movs	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	0792      	lsls	r2, r2, #30
 80021a4:	d50e      	bpl.n	80021c4 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a6:	f7ff ffb5 	bl	8002114 <HAL_GetTick>
 80021aa:	1b40      	subs	r0, r0, r5
 80021ac:	280a      	cmp	r0, #10
 80021ae:	d9f6      	bls.n	800219e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	4313      	orrs	r3, r2
 80021b8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ba:	2320      	movs	r3, #32
 80021bc:	2205      	movs	r2, #5
 80021be:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7e1      	b.n	8002188 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021c4:	7e22      	ldrb	r2, [r4, #24]
 80021c6:	2a01      	cmp	r2, #1
 80021c8:	d03e      	beq.n	8002248 <HAL_CAN_Init+0x104>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	438a      	bics	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80021d2:	7e63      	ldrb	r3, [r4, #25]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d03c      	beq.n	8002252 <HAL_CAN_Init+0x10e>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	438b      	bics	r3, r1
 80021e0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021e2:	7ea3      	ldrb	r3, [r4, #26]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d03a      	beq.n	800225e <HAL_CAN_Init+0x11a>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	2120      	movs	r1, #32
 80021ee:	438b      	bics	r3, r1
 80021f0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021f2:	7ee3      	ldrb	r3, [r4, #27]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d038      	beq.n	800226a <HAL_CAN_Init+0x126>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	2110      	movs	r1, #16
 80021fe:	430b      	orrs	r3, r1
 8002200:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002202:	7f23      	ldrb	r3, [r4, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d036      	beq.n	8002276 <HAL_CAN_Init+0x132>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	2108      	movs	r1, #8
 800220e:	438b      	bics	r3, r1
 8002210:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002212:	7f63      	ldrb	r3, [r4, #29]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d034      	beq.n	8002282 <HAL_CAN_Init+0x13e>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	2104      	movs	r1, #4
 800221e:	438b      	bics	r3, r1
 8002220:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002222:	68a3      	ldr	r3, [r4, #8]
 8002224:	68e2      	ldr	r2, [r4, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	6922      	ldr	r2, [r4, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	6962      	ldr	r2, [r4, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	6862      	ldr	r2, [r4, #4]
 8002232:	3a01      	subs	r2, #1
 8002234:	6821      	ldr	r1, [r4, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800223a:	2300      	movs	r3, #0
 800223c:	6263      	str	r3, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800223e:	3320      	adds	r3, #32
 8002240:	2201      	movs	r2, #1
 8002242:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002244:	2000      	movs	r0, #0
 8002246:	e79f      	b.n	8002188 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e7bf      	b.n	80021d2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	2140      	movs	r1, #64	; 0x40
 8002258:	430b      	orrs	r3, r1
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e7c1      	b.n	80021e2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800225e:	6822      	ldr	r2, [r4, #0]
 8002260:	6813      	ldr	r3, [r2, #0]
 8002262:	2120      	movs	r1, #32
 8002264:	430b      	orrs	r3, r1
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e7c3      	b.n	80021f2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800226a:	6822      	ldr	r2, [r4, #0]
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	2110      	movs	r1, #16
 8002270:	438b      	bics	r3, r1
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e7c5      	b.n	8002202 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	2108      	movs	r1, #8
 800227c:	430b      	orrs	r3, r1
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e7c7      	b.n	8002212 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	2104      	movs	r1, #4
 8002288:	430b      	orrs	r3, r1
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e7c9      	b.n	8002222 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
 8002290:	e77a      	b.n	8002188 <HAL_CAN_Init+0x44>

08002292 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002292:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002294:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002296:	2320      	movs	r3, #32
 8002298:	5cc3      	ldrb	r3, [r0, r3]

  if ((state == HAL_CAN_STATE_READY) ||
 800229a:	3b01      	subs	r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d906      	bls.n	80022b0 <HAL_CAN_ConfigFilter+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	02db      	lsls	r3, r3, #11
 80022a8:	4313      	orrs	r3, r2
 80022aa:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80022ac:	2001      	movs	r0, #1
  }
}
 80022ae:	bd30      	pop	{r4, r5, pc}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b0:	2480      	movs	r4, #128	; 0x80
 80022b2:	00a4      	lsls	r4, r4, #2
 80022b4:	5910      	ldr	r0, [r2, r4]
 80022b6:	2301      	movs	r3, #1
 80022b8:	4318      	orrs	r0, r3
 80022ba:	5110      	str	r0, [r2, r4]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022bc:	201f      	movs	r0, #31
 80022be:	694c      	ldr	r4, [r1, #20]
 80022c0:	4020      	ands	r0, r4
 80022c2:	4083      	lsls	r3, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022c4:	2487      	movs	r4, #135	; 0x87
 80022c6:	00a4      	lsls	r4, r4, #2
 80022c8:	5910      	ldr	r0, [r2, r4]
 80022ca:	43dd      	mvns	r5, r3
 80022cc:	4398      	bics	r0, r3
 80022ce:	5110      	str	r0, [r2, r4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022d0:	69c8      	ldr	r0, [r1, #28]
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d118      	bne.n	8002308 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022d6:	3c10      	subs	r4, #16
 80022d8:	5910      	ldr	r0, [r2, r4]
 80022da:	4028      	ands	r0, r5
 80022dc:	5110      	str	r0, [r2, r4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022de:	68c8      	ldr	r0, [r1, #12]
 80022e0:	0404      	lsls	r4, r0, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022e2:	6848      	ldr	r0, [r1, #4]
 80022e4:	0400      	lsls	r0, r0, #16
 80022e6:	0c00      	lsrs	r0, r0, #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022e8:	4304      	orrs	r4, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ea:	6948      	ldr	r0, [r1, #20]
 80022ec:	3048      	adds	r0, #72	; 0x48
 80022ee:	00c0      	lsls	r0, r0, #3
 80022f0:	5084      	str	r4, [r0, r2]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022f2:	6888      	ldr	r0, [r1, #8]
 80022f4:	0404      	lsls	r4, r0, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022f6:	6808      	ldr	r0, [r1, #0]
 80022f8:	0400      	lsls	r0, r0, #16
 80022fa:	0c00      	lsrs	r0, r0, #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022fc:	4304      	orrs	r4, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022fe:	6948      	ldr	r0, [r1, #20]
 8002300:	3048      	adds	r0, #72	; 0x48
 8002302:	00c0      	lsls	r0, r0, #3
 8002304:	1810      	adds	r0, r2, r0
 8002306:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002308:	69c8      	ldr	r0, [r1, #28]
 800230a:	2801      	cmp	r0, #1
 800230c:	d01a      	beq.n	8002344 <HAL_CAN_ConfigFilter+0xb2>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800230e:	6988      	ldr	r0, [r1, #24]
 8002310:	2800      	cmp	r0, #0
 8002312:	d132      	bne.n	800237a <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002314:	2481      	movs	r4, #129	; 0x81
 8002316:	00a4      	lsls	r4, r4, #2
 8002318:	5910      	ldr	r0, [r2, r4]
 800231a:	4028      	ands	r0, r5
 800231c:	5110      	str	r0, [r2, r4]
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800231e:	6908      	ldr	r0, [r1, #16]
 8002320:	2800      	cmp	r0, #0
 8002322:	d130      	bne.n	8002386 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002324:	2485      	movs	r4, #133	; 0x85
 8002326:	00a4      	lsls	r4, r4, #2
 8002328:	5910      	ldr	r0, [r2, r4]
 800232a:	4005      	ands	r5, r0
 800232c:	5115      	str	r5, [r2, r4]
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800232e:	6a09      	ldr	r1, [r1, #32]
 8002330:	2901      	cmp	r1, #1
 8002332:	d02e      	beq.n	8002392 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0089      	lsls	r1, r1, #2
 8002338:	5853      	ldr	r3, [r2, r1]
 800233a:	2001      	movs	r0, #1
 800233c:	4383      	bics	r3, r0
 800233e:	5053      	str	r3, [r2, r1]
    return HAL_OK;
 8002340:	2000      	movs	r0, #0
 8002342:	e7b4      	b.n	80022ae <HAL_CAN_ConfigFilter+0x1c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002344:	2483      	movs	r4, #131	; 0x83
 8002346:	00a4      	lsls	r4, r4, #2
 8002348:	5910      	ldr	r0, [r2, r4]
 800234a:	4318      	orrs	r0, r3
 800234c:	5110      	str	r0, [r2, r4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800234e:	6808      	ldr	r0, [r1, #0]
 8002350:	0404      	lsls	r4, r0, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002352:	6848      	ldr	r0, [r1, #4]
 8002354:	0400      	lsls	r0, r0, #16
 8002356:	0c00      	lsrs	r0, r0, #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002358:	4304      	orrs	r4, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235a:	6948      	ldr	r0, [r1, #20]
 800235c:	3048      	adds	r0, #72	; 0x48
 800235e:	00c0      	lsls	r0, r0, #3
 8002360:	5084      	str	r4, [r0, r2]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002362:	6888      	ldr	r0, [r1, #8]
 8002364:	0404      	lsls	r4, r0, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002366:	68c8      	ldr	r0, [r1, #12]
 8002368:	0400      	lsls	r0, r0, #16
 800236a:	0c00      	lsrs	r0, r0, #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800236c:	4304      	orrs	r4, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800236e:	6948      	ldr	r0, [r1, #20]
 8002370:	3048      	adds	r0, #72	; 0x48
 8002372:	00c0      	lsls	r0, r0, #3
 8002374:	1810      	adds	r0, r2, r0
 8002376:	6044      	str	r4, [r0, #4]
 8002378:	e7c9      	b.n	800230e <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800237a:	2481      	movs	r4, #129	; 0x81
 800237c:	00a4      	lsls	r4, r4, #2
 800237e:	5910      	ldr	r0, [r2, r4]
 8002380:	4318      	orrs	r0, r3
 8002382:	5110      	str	r0, [r2, r4]
 8002384:	e7cb      	b.n	800231e <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002386:	2485      	movs	r4, #133	; 0x85
 8002388:	00a4      	lsls	r4, r4, #2
 800238a:	5910      	ldr	r0, [r2, r4]
 800238c:	4318      	orrs	r0, r3
 800238e:	5110      	str	r0, [r2, r4]
 8002390:	e7cd      	b.n	800232e <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002392:	2087      	movs	r0, #135	; 0x87
 8002394:	0080      	lsls	r0, r0, #2
 8002396:	5811      	ldr	r1, [r2, r0]
 8002398:	430b      	orrs	r3, r1
 800239a:	5013      	str	r3, [r2, r0]
 800239c:	e7ca      	b.n	8002334 <HAL_CAN_ConfigFilter+0xa2>

0800239e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800239e:	b570      	push	{r4, r5, r6, lr}
 80023a0:	0004      	movs	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023a2:	2320      	movs	r3, #32
 80023a4:	5cc3      	ldrb	r3, [r0, r3]
 80023a6:	b2de      	uxtb	r6, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d007      	beq.n	80023bc <HAL_CAN_Start+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	031b      	lsls	r3, r3, #12
 80023b2:	4313      	orrs	r3, r2
 80023b4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80023b6:	2601      	movs	r6, #1
  }
}
 80023b8:	0030      	movs	r0, r6
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023bc:	331f      	adds	r3, #31
 80023be:	2202      	movs	r2, #2
 80023c0:	54c2      	strb	r2, [r0, r3]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c2:	6802      	ldr	r2, [r0, #0]
 80023c4:	6813      	ldr	r3, [r2, #0]
 80023c6:	2101      	movs	r1, #1
 80023c8:	438b      	bics	r3, r1
 80023ca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80023cc:	f7ff fea2 	bl	8002114 <HAL_GetTick>
 80023d0:	0005      	movs	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	07db      	lsls	r3, r3, #31
 80023d8:	d50d      	bpl.n	80023f6 <HAL_CAN_Start+0x58>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023da:	f7ff fe9b 	bl	8002114 <HAL_GetTick>
 80023de:	1b40      	subs	r0, r0, r5
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d9f6      	bls.n	80023d2 <HAL_CAN_Start+0x34>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4313      	orrs	r3, r2
 80023ec:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80023ee:	2320      	movs	r3, #32
 80023f0:	2205      	movs	r2, #5
 80023f2:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80023f4:	e7e0      	b.n	80023b8 <HAL_CAN_Start+0x1a>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80023fa:	2600      	movs	r6, #0
 80023fc:	e7dc      	b.n	80023b8 <HAL_CAN_Start+0x1a>

080023fe <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80023fe:	b570      	push	{r4, r5, r6, lr}
 8002400:	0004      	movs	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002402:	2320      	movs	r3, #32
 8002404:	5cc3      	ldrb	r3, [r0, r3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d006      	beq.n	8002418 <HAL_CAN_Stop+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800240a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	035b      	lsls	r3, r3, #13
 8002410:	4313      	orrs	r3, r2
 8002412:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
  }
}
 8002416:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002418:	6802      	ldr	r2, [r0, #0]
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	430b      	orrs	r3, r1
 8002420:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002422:	f7ff fe77 	bl	8002114 <HAL_GetTick>
 8002426:	0005      	movs	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	07d2      	lsls	r2, r2, #31
 800242e:	d40e      	bmi.n	800244e <HAL_CAN_Stop+0x50>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002430:	f7ff fe70 	bl	8002114 <HAL_GetTick>
 8002434:	1b40      	subs	r0, r0, r5
 8002436:	280a      	cmp	r0, #10
 8002438:	d9f6      	bls.n	8002428 <HAL_CAN_Stop+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800243a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	4313      	orrs	r3, r2
 8002442:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002444:	2320      	movs	r3, #32
 8002446:	2205      	movs	r2, #5
 8002448:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800244a:	2001      	movs	r0, #1
 800244c:	e7e3      	b.n	8002416 <HAL_CAN_Stop+0x18>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2102      	movs	r1, #2
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8002456:	2320      	movs	r3, #32
 8002458:	2201      	movs	r2, #1
 800245a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800245c:	2000      	movs	r0, #0
 800245e:	e7da      	b.n	8002416 <HAL_CAN_Stop+0x18>

08002460 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002460:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002462:	2420      	movs	r4, #32
 8002464:	5d04      	ldrb	r4, [r0, r4]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002466:	6805      	ldr	r5, [r0, #0]
 8002468:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800246a:	3c01      	subs	r4, #1
 800246c:	b2e4      	uxtb	r4, r4
 800246e:	2c01      	cmp	r4, #1
 8002470:	d868      	bhi.n	8002544 <HAL_CAN_AddTxMessage+0xe4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002472:	24e0      	movs	r4, #224	; 0xe0
 8002474:	0564      	lsls	r4, r4, #21
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002476:	4225      	tst	r5, r4
 8002478:	d05d      	beq.n	8002536 <HAL_CAN_AddTxMessage+0xd6>
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800247a:	0e2d      	lsrs	r5, r5, #24
 800247c:	2403      	movs	r4, #3
 800247e:	402c      	ands	r4, r5

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002480:	2501      	movs	r5, #1
 8002482:	40a5      	lsls	r5, r4
 8002484:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002486:	688b      	ldr	r3, [r1, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d13d      	bne.n	8002508 <HAL_CAN_AddTxMessage+0xa8>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800248c:	680b      	ldr	r3, [r1, #0]
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	68cd      	ldr	r5, [r1, #12]
 8002492:	432b      	orrs	r3, r5
 8002494:	0025      	movs	r5, r4
 8002496:	3518      	adds	r5, #24
 8002498:	012d      	lsls	r5, r5, #4
 800249a:	6806      	ldr	r6, [r0, #0]
 800249c:	51ab      	str	r3, [r5, r6]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800249e:	0023      	movs	r3, r4
 80024a0:	3318      	adds	r3, #24
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	6805      	ldr	r5, [r0, #0]
 80024a6:	46ac      	mov	ip, r5
 80024a8:	4463      	add	r3, ip
 80024aa:	690d      	ldr	r5, [r1, #16]
 80024ac:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024ae:	7d0b      	ldrb	r3, [r1, #20]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d034      	beq.n	800251e <HAL_CAN_AddTxMessage+0xbe>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024b4:	79d3      	ldrb	r3, [r2, #7]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	7991      	ldrb	r1, [r2, #6]
 80024ba:	0409      	lsls	r1, r1, #16
 80024bc:	430b      	orrs	r3, r1
 80024be:	7951      	ldrb	r1, [r2, #5]
 80024c0:	0209      	lsls	r1, r1, #8
 80024c2:	430b      	orrs	r3, r1
 80024c4:	7911      	ldrb	r1, [r2, #4]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	0125      	lsls	r5, r4, #4
 80024ca:	6801      	ldr	r1, [r0, #0]
 80024cc:	1949      	adds	r1, r1, r5
 80024ce:	318d      	adds	r1, #141	; 0x8d
 80024d0:	31ff      	adds	r1, #255	; 0xff
 80024d2:	600b      	str	r3, [r1, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024d4:	78d3      	ldrb	r3, [r2, #3]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	7891      	ldrb	r1, [r2, #2]
 80024da:	0409      	lsls	r1, r1, #16
 80024dc:	430b      	orrs	r3, r1
 80024de:	7851      	ldrb	r1, [r2, #1]
 80024e0:	0209      	lsls	r1, r1, #8
 80024e2:	430b      	orrs	r3, r1
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6802      	ldr	r2, [r0, #0]
 80024ea:	4694      	mov	ip, r2
 80024ec:	4465      	add	r5, ip
 80024ee:	002a      	movs	r2, r5
 80024f0:	3289      	adds	r2, #137	; 0x89
 80024f2:	32ff      	adds	r2, #255	; 0xff
 80024f4:	6013      	str	r3, [r2, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024f6:	6802      	ldr	r2, [r0, #0]
 80024f8:	3418      	adds	r4, #24
 80024fa:	0124      	lsls	r4, r4, #4
 80024fc:	58a3      	ldr	r3, [r4, r2]
 80024fe:	2101      	movs	r1, #1
 8002500:	430b      	orrs	r3, r1
 8002502:	50a3      	str	r3, [r4, r2]

      /* Return function status */
      return HAL_OK;
 8002504:	2000      	movs	r0, #0
 8002506:	e023      	b.n	8002550 <HAL_CAN_AddTxMessage+0xf0>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002508:	684d      	ldr	r5, [r1, #4]
 800250a:	00ed      	lsls	r5, r5, #3
 800250c:	432b      	orrs	r3, r5
                                                           pHeader->IDE |
 800250e:	68cd      	ldr	r5, [r1, #12]
 8002510:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002512:	0025      	movs	r5, r4
 8002514:	3518      	adds	r5, #24
 8002516:	012d      	lsls	r5, r5, #4
 8002518:	6806      	ldr	r6, [r0, #0]
 800251a:	51ab      	str	r3, [r5, r6]
 800251c:	e7bf      	b.n	800249e <HAL_CAN_AddTxMessage+0x3e>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800251e:	0023      	movs	r3, r4
 8002520:	3318      	adds	r3, #24
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	6801      	ldr	r1, [r0, #0]
 8002526:	468c      	mov	ip, r1
 8002528:	4463      	add	r3, ip
 800252a:	685d      	ldr	r5, [r3, #4]
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0049      	lsls	r1, r1, #1
 8002530:	4329      	orrs	r1, r5
 8002532:	6059      	str	r1, [r3, #4]
 8002534:	e7be      	b.n	80024b4 <HAL_CAN_AddTxMessage+0x54>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002536:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	039b      	lsls	r3, r3, #14
 800253c:	4313      	orrs	r3, r2
 800253e:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	e005      	b.n	8002550 <HAL_CAN_AddTxMessage+0xf0>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002544:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	02db      	lsls	r3, r3, #11
 800254a:	4313      	orrs	r3, r2
 800254c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800254e:	2001      	movs	r0, #1
  }
}
 8002550:	bd70      	pop	{r4, r5, r6, pc}

08002552 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002552:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002554:	2420      	movs	r4, #32
 8002556:	5d04      	ldrb	r4, [r0, r4]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002558:	3c01      	subs	r4, #1
 800255a:	b2e4      	uxtb	r4, r4
 800255c:	2c01      	cmp	r4, #1
 800255e:	d900      	bls.n	8002562 <HAL_CAN_GetRxMessage+0x10>
 8002560:	e09e      	b.n	80026a0 <HAL_CAN_GetRxMessage+0x14e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002562:	2900      	cmp	r1, #0
 8002564:	d10a      	bne.n	800257c <HAL_CAN_GetRxMessage+0x2a>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002566:	6804      	ldr	r4, [r0, #0]
 8002568:	68e4      	ldr	r4, [r4, #12]
 800256a:	07a4      	lsls	r4, r4, #30
 800256c:	d111      	bne.n	8002592 <HAL_CAN_GetRxMessage+0x40>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800256e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	039b      	lsls	r3, r3, #14
 8002574:	4313      	orrs	r3, r2
 8002576:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8002578:	2001      	movs	r0, #1
 800257a:	e097      	b.n	80026ac <HAL_CAN_GetRxMessage+0x15a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800257c:	6804      	ldr	r4, [r0, #0]
 800257e:	6924      	ldr	r4, [r4, #16]
 8002580:	07a4      	lsls	r4, r4, #30
 8002582:	d106      	bne.n	8002592 <HAL_CAN_GetRxMessage+0x40>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002584:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	039b      	lsls	r3, r3, #14
 800258a:	4313      	orrs	r3, r2
 800258c:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 800258e:	2001      	movs	r0, #1
 8002590:	e08c      	b.n	80026ac <HAL_CAN_GetRxMessage+0x15a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002592:	000c      	movs	r4, r1
 8002594:	341b      	adds	r4, #27
 8002596:	0124      	lsls	r4, r4, #4
 8002598:	6805      	ldr	r5, [r0, #0]
 800259a:	5965      	ldr	r5, [r4, r5]
 800259c:	2404      	movs	r4, #4
 800259e:	402c      	ands	r4, r5
 80025a0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025a2:	d166      	bne.n	8002672 <HAL_CAN_GetRxMessage+0x120>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025a4:	000c      	movs	r4, r1
 80025a6:	341b      	adds	r4, #27
 80025a8:	0124      	lsls	r4, r4, #4
 80025aa:	6805      	ldr	r5, [r0, #0]
 80025ac:	5964      	ldr	r4, [r4, r5]
 80025ae:	0d64      	lsrs	r4, r4, #21
 80025b0:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025b2:	000c      	movs	r4, r1
 80025b4:	341b      	adds	r4, #27
 80025b6:	0124      	lsls	r4, r4, #4
 80025b8:	6805      	ldr	r5, [r0, #0]
 80025ba:	5966      	ldr	r6, [r4, r5]
 80025bc:	2502      	movs	r5, #2
 80025be:	4035      	ands	r5, r6
 80025c0:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80025c2:	6805      	ldr	r5, [r0, #0]
 80025c4:	192c      	adds	r4, r5, r4
 80025c6:	6864      	ldr	r4, [r4, #4]
 80025c8:	0724      	lsls	r4, r4, #28
 80025ca:	d55a      	bpl.n	8002682 <HAL_CAN_GetRxMessage+0x130>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025cc:	2408      	movs	r4, #8
 80025ce:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025d0:	000c      	movs	r4, r1
 80025d2:	341b      	adds	r4, #27
 80025d4:	0124      	lsls	r4, r4, #4
 80025d6:	6805      	ldr	r5, [r0, #0]
 80025d8:	192d      	adds	r5, r5, r4
 80025da:	686e      	ldr	r6, [r5, #4]
 80025dc:	0a36      	lsrs	r6, r6, #8
 80025de:	25ff      	movs	r5, #255	; 0xff
 80025e0:	4035      	ands	r5, r6
 80025e2:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025e4:	6805      	ldr	r5, [r0, #0]
 80025e6:	46ac      	mov	ip, r5
 80025e8:	4464      	add	r4, ip
 80025ea:	6864      	ldr	r4, [r4, #4]
 80025ec:	0c24      	lsrs	r4, r4, #16
 80025ee:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025f0:	010a      	lsls	r2, r1, #4
 80025f2:	6804      	ldr	r4, [r0, #0]
 80025f4:	18a4      	adds	r4, r4, r2
 80025f6:	34b9      	adds	r4, #185	; 0xb9
 80025f8:	34ff      	adds	r4, #255	; 0xff
 80025fa:	6824      	ldr	r4, [r4, #0]
 80025fc:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025fe:	6804      	ldr	r4, [r0, #0]
 8002600:	18a4      	adds	r4, r4, r2
 8002602:	34b9      	adds	r4, #185	; 0xb9
 8002604:	34ff      	adds	r4, #255	; 0xff
 8002606:	6824      	ldr	r4, [r4, #0]
 8002608:	0a24      	lsrs	r4, r4, #8
 800260a:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800260c:	6804      	ldr	r4, [r0, #0]
 800260e:	18a4      	adds	r4, r4, r2
 8002610:	34b9      	adds	r4, #185	; 0xb9
 8002612:	34ff      	adds	r4, #255	; 0xff
 8002614:	6824      	ldr	r4, [r4, #0]
 8002616:	0c24      	lsrs	r4, r4, #16
 8002618:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800261a:	6804      	ldr	r4, [r0, #0]
 800261c:	18a4      	adds	r4, r4, r2
 800261e:	34b9      	adds	r4, #185	; 0xb9
 8002620:	34ff      	adds	r4, #255	; 0xff
 8002622:	6824      	ldr	r4, [r4, #0]
 8002624:	0e24      	lsrs	r4, r4, #24
 8002626:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002628:	6804      	ldr	r4, [r0, #0]
 800262a:	18a4      	adds	r4, r4, r2
 800262c:	34bd      	adds	r4, #189	; 0xbd
 800262e:	34ff      	adds	r4, #255	; 0xff
 8002630:	6824      	ldr	r4, [r4, #0]
 8002632:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002634:	6804      	ldr	r4, [r0, #0]
 8002636:	18a4      	adds	r4, r4, r2
 8002638:	34bd      	adds	r4, #189	; 0xbd
 800263a:	34ff      	adds	r4, #255	; 0xff
 800263c:	6824      	ldr	r4, [r4, #0]
 800263e:	0a24      	lsrs	r4, r4, #8
 8002640:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002642:	6804      	ldr	r4, [r0, #0]
 8002644:	18a4      	adds	r4, r4, r2
 8002646:	34bd      	adds	r4, #189	; 0xbd
 8002648:	34ff      	adds	r4, #255	; 0xff
 800264a:	6824      	ldr	r4, [r4, #0]
 800264c:	0c24      	lsrs	r4, r4, #16
 800264e:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002650:	6804      	ldr	r4, [r0, #0]
 8002652:	46a4      	mov	ip, r4
 8002654:	4462      	add	r2, ip
 8002656:	32bd      	adds	r2, #189	; 0xbd
 8002658:	32ff      	adds	r2, #255	; 0xff
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	0e12      	lsrs	r2, r2, #24
 800265e:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002660:	2900      	cmp	r1, #0
 8002662:	d117      	bne.n	8002694 <HAL_CAN_GetRxMessage+0x142>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002664:	6802      	ldr	r2, [r0, #0]
 8002666:	68d3      	ldr	r3, [r2, #12]
 8002668:	3120      	adds	r1, #32
 800266a:	430b      	orrs	r3, r1
 800266c:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800266e:	2000      	movs	r0, #0
 8002670:	e01c      	b.n	80026ac <HAL_CAN_GetRxMessage+0x15a>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002672:	000c      	movs	r4, r1
 8002674:	341b      	adds	r4, #27
 8002676:	0124      	lsls	r4, r4, #4
 8002678:	6805      	ldr	r5, [r0, #0]
 800267a:	5964      	ldr	r4, [r4, r5]
 800267c:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800267e:	6054      	str	r4, [r2, #4]
 8002680:	e797      	b.n	80025b2 <HAL_CAN_GetRxMessage+0x60>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002682:	000c      	movs	r4, r1
 8002684:	341b      	adds	r4, #27
 8002686:	0124      	lsls	r4, r4, #4
 8002688:	192d      	adds	r5, r5, r4
 800268a:	686d      	ldr	r5, [r5, #4]
 800268c:	240f      	movs	r4, #15
 800268e:	402c      	ands	r4, r5
 8002690:	6114      	str	r4, [r2, #16]
 8002692:	e79d      	b.n	80025d0 <HAL_CAN_GetRxMessage+0x7e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002694:	6802      	ldr	r2, [r0, #0]
 8002696:	6913      	ldr	r3, [r2, #16]
 8002698:	2120      	movs	r1, #32
 800269a:	430b      	orrs	r3, r1
 800269c:	6113      	str	r3, [r2, #16]
 800269e:	e7e6      	b.n	800266e <HAL_CAN_GetRxMessage+0x11c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	02db      	lsls	r3, r3, #11
 80026a6:	4313      	orrs	r3, r2
 80026a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
  }
}
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b0:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80026b2:	2800      	cmp	r0, #0
 80026b4:	db11      	blt.n	80026da <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b6:	0883      	lsrs	r3, r0, #2
 80026b8:	4e13      	ldr	r6, [pc, #76]	; (8002708 <HAL_NVIC_SetPriority+0x58>)
 80026ba:	33c0      	adds	r3, #192	; 0xc0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	599d      	ldr	r5, [r3, r6]
 80026c0:	2403      	movs	r4, #3
 80026c2:	4020      	ands	r0, r4
 80026c4:	00c0      	lsls	r0, r0, #3
 80026c6:	22ff      	movs	r2, #255	; 0xff
 80026c8:	0014      	movs	r4, r2
 80026ca:	4084      	lsls	r4, r0
 80026cc:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026ce:	0189      	lsls	r1, r1, #6
 80026d0:	400a      	ands	r2, r1
 80026d2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d4:	432a      	orrs	r2, r5
 80026d6:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80026d8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026da:	230f      	movs	r3, #15
 80026dc:	4003      	ands	r3, r0
 80026de:	3b08      	subs	r3, #8
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3306      	adds	r3, #6
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_NVIC_SetPriority+0x5c>)
 80026e8:	4694      	mov	ip, r2
 80026ea:	4463      	add	r3, ip
 80026ec:	685c      	ldr	r4, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4010      	ands	r0, r2
 80026f2:	00c0      	lsls	r0, r0, #3
 80026f4:	32fc      	adds	r2, #252	; 0xfc
 80026f6:	0015      	movs	r5, r2
 80026f8:	4085      	lsls	r5, r0
 80026fa:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026fc:	0189      	lsls	r1, r1, #6
 80026fe:	400a      	ands	r2, r1
 8002700:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002702:	4322      	orrs	r2, r4
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e7e7      	b.n	80026d8 <HAL_NVIC_SetPriority+0x28>
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	3801      	subs	r0, #1
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	045b      	lsls	r3, r3, #17
 8002716:	4298      	cmp	r0, r3
 8002718:	d20f      	bcs.n	800273a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_SYSTICK_Config+0x30>)
 800271c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_SYSTICK_Config+0x34>)
 8002720:	6a03      	ldr	r3, [r0, #32]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	21c0      	movs	r1, #192	; 0xc0
 8002728:	0609      	lsls	r1, r1, #24
 800272a:	430b      	orrs	r3, r1
 800272c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272e:	2300      	movs	r3, #0
 8002730:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	3307      	adds	r3, #7
 8002734:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002736:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002738:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800273c:	e7fc      	b.n	8002738 <HAL_SYSTICK_Config+0x28>
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	e000e010 	.word	0xe000e010
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002748:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <FLASH_Program_HalfWord+0x18>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <FLASH_Program_HalfWord+0x1c>)
 8002752:	6913      	ldr	r3, [r2, #16]
 8002754:	2401      	movs	r4, #1
 8002756:	4323      	orrs	r3, r4
 8002758:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800275a:	8001      	strh	r1, [r0, #0]
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20000370 	.word	0x20000370
 8002764:	40022000 	.word	0x40022000

08002768 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <FLASH_SetErrorCode+0x38>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	2110      	movs	r1, #16
 800276e:	000b      	movs	r3, r1
 8002770:	4013      	ands	r3, r2
 8002772:	4211      	tst	r1, r2
 8002774:	d005      	beq.n	8002782 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <FLASH_SetErrorCode+0x3c>)
 8002778:	69d3      	ldr	r3, [r2, #28]
 800277a:	390e      	subs	r1, #14
 800277c:	430b      	orrs	r3, r1
 800277e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002780:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <FLASH_SetErrorCode+0x38>)
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	0752      	lsls	r2, r2, #29
 8002788:	d506      	bpl.n	8002798 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800278a:	4906      	ldr	r1, [pc, #24]	; (80027a4 <FLASH_SetErrorCode+0x3c>)
 800278c:	69ca      	ldr	r2, [r1, #28]
 800278e:	2001      	movs	r0, #1
 8002790:	4302      	orrs	r2, r0
 8002792:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8002794:	2204      	movs	r2, #4
 8002796:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002798:	4a01      	ldr	r2, [pc, #4]	; (80027a0 <FLASH_SetErrorCode+0x38>)
 800279a:	60d3      	str	r3, [r2, #12]
}  
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40022000 	.word	0x40022000
 80027a4:	20000370 	.word	0x20000370

080027a8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_FLASH_Unlock+0x24>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	d509      	bpl.n	80027c4 <HAL_FLASH_Unlock+0x1c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_FLASH_Unlock+0x24>)
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_FLASH_Unlock+0x28>)
 80027b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_FLASH_Unlock+0x2c>)
 80027b8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	d403      	bmi.n	80027c8 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2000      	movs	r0, #0
 80027c2:	e000      	b.n	80027c6 <HAL_FLASH_Unlock+0x1e>
 80027c4:	2000      	movs	r0, #0
}
 80027c6:	4770      	bx	lr
      status = HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e7fc      	b.n	80027c6 <HAL_FLASH_Unlock+0x1e>
 80027cc:	40022000 	.word	0x40022000
 80027d0:	45670123 	.word	0x45670123
 80027d4:	cdef89ab 	.word	0xcdef89ab

080027d8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027d8:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <HAL_FLASH_Lock+0x10>)
 80027da:	6913      	ldr	r3, [r2, #16]
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	430b      	orrs	r3, r1
 80027e0:	6113      	str	r3, [r2, #16]
}
 80027e2:	2000      	movs	r0, #0
 80027e4:	4770      	bx	lr
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_FLASH_OB_Unlock+0x1c>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	059b      	lsls	r3, r3, #22
 80027f2:	d406      	bmi.n	8002802 <HAL_FLASH_OB_Unlock+0x16>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <HAL_FLASH_OB_Unlock+0x1c>)
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_FLASH_OB_Unlock+0x20>)
 80027f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_FLASH_OB_Unlock+0x24>)
 80027fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 80027fe:	2000      	movs	r0, #0
}
 8002800:	4770      	bx	lr
    return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
 8002804:	e7fc      	b.n	8002800 <HAL_FLASH_OB_Unlock+0x14>
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40022000 	.word	0x40022000
 800280c:	45670123 	.word	0x45670123
 8002810:	cdef89ab 	.word	0xcdef89ab

08002814 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <HAL_FLASH_OB_Lock+0x10>)
 8002816:	6913      	ldr	r3, [r2, #16]
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_FLASH_OB_Lock+0x14>)
 800281a:	400b      	ands	r3, r1
 800281c:	6113      	str	r3, [r2, #16]
}
 800281e:	2000      	movs	r0, #0
 8002820:	4770      	bx	lr
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	40022000 	.word	0x40022000
 8002828:	fffffdff 	.word	0xfffffdff

0800282c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800282c:	4b01      	ldr	r3, [pc, #4]	; (8002834 <HAL_FLASH_GetError+0x8>)
 800282e:	69d8      	ldr	r0, [r3, #28]
}
 8002830:	4770      	bx	lr
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000370 	.word	0x20000370

08002838 <FLASH_WaitForLastOperation>:
{
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fc6a 	bl	8002114 <HAL_GetTick>
 8002840:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <FLASH_WaitForLastOperation+0x54>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	07db      	lsls	r3, r3, #31
 8002848:	d50a      	bpl.n	8002860 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800284a:	1c63      	adds	r3, r4, #1
 800284c:	d0f9      	beq.n	8002842 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800284e:	2c00      	cmp	r4, #0
 8002850:	d004      	beq.n	800285c <FLASH_WaitForLastOperation+0x24>
 8002852:	f7ff fc5f 	bl	8002114 <HAL_GetTick>
 8002856:	1b40      	subs	r0, r0, r5
 8002858:	42a0      	cmp	r0, r4
 800285a:	d9f2      	bls.n	8002842 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800285c:	2003      	movs	r0, #3
 800285e:	e00f      	b.n	8002880 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <FLASH_WaitForLastOperation+0x54>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	d502      	bpl.n	800286e <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <FLASH_WaitForLastOperation+0x54>)
 800286a:	2220      	movs	r2, #32
 800286c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <FLASH_WaitForLastOperation+0x54>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	06db      	lsls	r3, r3, #27
 8002874:	d405      	bmi.n	8002882 <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <FLASH_WaitForLastOperation+0x54>)
 8002878:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800287a:	075b      	lsls	r3, r3, #29
 800287c:	d401      	bmi.n	8002882 <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 800287e:	2000      	movs	r0, #0
}
 8002880:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 8002882:	f7ff ff71 	bl	8002768 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002886:	2001      	movs	r0, #1
 8002888:	e7fa      	b.n	8002880 <FLASH_WaitForLastOperation+0x48>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	40022000 	.word	0x40022000

08002890 <HAL_FLASH_Program>:
{
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	46ce      	mov	lr, r9
 8002894:	4647      	mov	r7, r8
 8002896:	b580      	push	{r7, lr}
 8002898:	0005      	movs	r5, r0
 800289a:	000e      	movs	r6, r1
 800289c:	4690      	mov	r8, r2
 800289e:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_FLASH_Program+0x9c>)
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d03e      	beq.n	8002926 <HAL_FLASH_Program+0x96>
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_FLASH_Program+0x9c>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028ae:	4820      	ldr	r0, [pc, #128]	; (8002930 <HAL_FLASH_Program+0xa0>)
 80028b0:	f7ff ffc2 	bl	8002838 <FLASH_WaitForLastOperation>
 80028b4:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 80028b6:	d12f      	bne.n	8002918 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80028b8:	2d01      	cmp	r5, #1
 80028ba:	d007      	beq.n	80028cc <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028bc:	2d02      	cmp	r5, #2
 80028be:	d002      	beq.n	80028c6 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 80028c0:	2304      	movs	r3, #4
 80028c2:	4699      	mov	r9, r3
    for (index = 0U; index < nbiterations; index++)
 80028c4:	e01d      	b.n	8002902 <HAL_FLASH_Program+0x72>
      nbiterations = 2U;
 80028c6:	2302      	movs	r3, #2
 80028c8:	4699      	mov	r9, r3
 80028ca:	e01a      	b.n	8002902 <HAL_FLASH_Program+0x72>
      nbiterations = 1U;
 80028cc:	2301      	movs	r3, #1
 80028ce:	4699      	mov	r9, r3
 80028d0:	e017      	b.n	8002902 <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80028d2:	2220      	movs	r2, #32
 80028d4:	1ad2      	subs	r2, r2, r3
 80028d6:	0039      	movs	r1, r7
 80028d8:	4091      	lsls	r1, r2
 80028da:	000a      	movs	r2, r1
 80028dc:	4641      	mov	r1, r8
 80028de:	40d9      	lsrs	r1, r3
 80028e0:	4311      	orrs	r1, r2
 80028e2:	b289      	uxth	r1, r1
 80028e4:	1980      	adds	r0, r0, r6
 80028e6:	f7ff ff2f 	bl	8002748 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028ea:	4811      	ldr	r0, [pc, #68]	; (8002930 <HAL_FLASH_Program+0xa0>)
 80028ec:	f7ff ffa4 	bl	8002838 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028f0:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_FLASH_Program+0xa4>)
 80028f2:	6913      	ldr	r3, [r2, #16]
 80028f4:	2101      	movs	r1, #1
 80028f6:	438b      	bics	r3, r1
 80028f8:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_FLASH_Program+0x88>
    for (index = 0U; index < nbiterations; index++)
 80028fe:	3401      	adds	r4, #1
 8002900:	b2e4      	uxtb	r4, r4
 8002902:	454c      	cmp	r4, r9
 8002904:	d208      	bcs.n	8002918 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002906:	0060      	lsls	r0, r4, #1
 8002908:	0123      	lsls	r3, r4, #4
 800290a:	2220      	movs	r2, #32
 800290c:	4252      	negs	r2, r2
 800290e:	189a      	adds	r2, r3, r2
 8002910:	d4df      	bmi.n	80028d2 <HAL_FLASH_Program+0x42>
 8002912:	0039      	movs	r1, r7
 8002914:	40d1      	lsrs	r1, r2
 8002916:	e7e4      	b.n	80028e2 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_FLASH_Program+0x9c>)
 800291a:	2200      	movs	r2, #0
 800291c:	761a      	strb	r2, [r3, #24]
}
 800291e:	bcc0      	pop	{r6, r7}
 8002920:	46b9      	mov	r9, r7
 8002922:	46b0      	mov	r8, r6
 8002924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8002926:	2002      	movs	r0, #2
 8002928:	e7f9      	b.n	800291e <HAL_FLASH_Program+0x8e>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000370 	.word	0x20000370
 8002930:	0000c350 	.word	0x0000c350
 8002934:	40022000 	.word	0x40022000

08002938 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <FLASH_MassErase+0x1c>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <FLASH_MassErase+0x20>)
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	2104      	movs	r1, #4
 8002944:	430a      	orrs	r2, r1
 8002946:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	313c      	adds	r1, #60	; 0x3c
 800294c:	430a      	orrs	r2, r1
 800294e:	611a      	str	r2, [r3, #16]
}
 8002950:	4770      	bx	lr
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000370 	.word	0x20000370
 8002958:	40022000 	.word	0x40022000

0800295c <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <FLASH_OB_GetWRP+0x8>)
 800295e:	6a18      	ldr	r0, [r3, #32]
}
 8002960:	4770      	bx	lr
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40022000 	.word	0x40022000

08002968 <FLASH_OB_GetRDP>:
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t tmp_reg;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <FLASH_OB_GetRDP+0x1c>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2206      	movs	r2, #6

  if (tmp_reg == 0U)
 800296e:	421a      	tst	r2, r3
 8002970:	d003      	beq.n	800297a <FLASH_OB_GetRDP+0x12>
  {
    return OB_RDP_LEVEL_0;
  }
  else if ((tmp_reg & FLASH_OBR_RDPRT2) == FLASH_OBR_RDPRT2)
 8002972:	075b      	lsls	r3, r3, #29
 8002974:	d503      	bpl.n	800297e <FLASH_OB_GetRDP+0x16>
  {
    return OB_RDP_LEVEL_2;
 8002976:	20cc      	movs	r0, #204	; 0xcc
 8002978:	e000      	b.n	800297c <FLASH_OB_GetRDP+0x14>
    return OB_RDP_LEVEL_0;
 800297a:	20aa      	movs	r0, #170	; 0xaa
  }
  else 
  {
    return OB_RDP_LEVEL_1;
  }
}
 800297c:	4770      	bx	lr
    return OB_RDP_LEVEL_1;
 800297e:	20bb      	movs	r0, #187	; 0xbb
 8002980:	e7fc      	b.n	800297c <FLASH_OB_GetRDP+0x14>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40022000 	.word	0x40022000

08002988 <FLASH_OB_RDP_LevelConfig>:
{
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800298c:	4813      	ldr	r0, [pc, #76]	; (80029dc <FLASH_OB_RDP_LevelConfig+0x54>)
 800298e:	f7ff ff53 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002992:	2800      	cmp	r0, #0
 8002994:	d000      	beq.n	8002998 <FLASH_OB_RDP_LevelConfig+0x10>
}
 8002996:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <FLASH_OB_RDP_LevelConfig+0x58>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800299e:	4d11      	ldr	r5, [pc, #68]	; (80029e4 <FLASH_OB_RDP_LevelConfig+0x5c>)
 80029a0:	692b      	ldr	r3, [r5, #16]
 80029a2:	2620      	movs	r6, #32
 80029a4:	4333      	orrs	r3, r6
 80029a6:	612b      	str	r3, [r5, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029a8:	692b      	ldr	r3, [r5, #16]
 80029aa:	3240      	adds	r2, #64	; 0x40
 80029ac:	4313      	orrs	r3, r2
 80029ae:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029b0:	480a      	ldr	r0, [pc, #40]	; (80029dc <FLASH_OB_RDP_LevelConfig+0x54>)
 80029b2:	f7ff ff41 	bl	8002838 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80029b6:	692b      	ldr	r3, [r5, #16]
 80029b8:	43b3      	bics	r3, r6
 80029ba:	612b      	str	r3, [r5, #16]
    if(status == HAL_OK)
 80029bc:	2800      	cmp	r0, #0
 80029be:	d1ea      	bne.n	8002996 <FLASH_OB_RDP_LevelConfig+0xe>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80029c0:	692b      	ldr	r3, [r5, #16]
 80029c2:	3e10      	subs	r6, #16
 80029c4:	4333      	orrs	r3, r6
 80029c6:	612b      	str	r3, [r5, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 80029c8:	b2a4      	uxth	r4, r4
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <FLASH_OB_RDP_LevelConfig+0x60>)
 80029cc:	801c      	strh	r4, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 80029ce:	4803      	ldr	r0, [pc, #12]	; (80029dc <FLASH_OB_RDP_LevelConfig+0x54>)
 80029d0:	f7ff ff32 	bl	8002838 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80029d4:	692b      	ldr	r3, [r5, #16]
 80029d6:	43b3      	bics	r3, r6
 80029d8:	612b      	str	r3, [r5, #16]
 80029da:	e7dc      	b.n	8002996 <FLASH_OB_RDP_LevelConfig+0xe>
 80029dc:	0000c350 	.word	0x0000c350
 80029e0:	20000370 	.word	0x20000370
 80029e4:	40022000 	.word	0x40022000
 80029e8:	1ffff800 	.word	0x1ffff800

080029ec <FLASH_OB_UserConfig>:
{
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <FLASH_OB_UserConfig+0x38>)
 80029f2:	f7ff ff21 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d000      	beq.n	80029fc <FLASH_OB_UserConfig+0x10>
}
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <FLASH_OB_UserConfig+0x3c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002a02:	4d0a      	ldr	r5, [pc, #40]	; (8002a2c <FLASH_OB_UserConfig+0x40>)
 8002a04:	692b      	ldr	r3, [r5, #16]
 8002a06:	2610      	movs	r6, #16
 8002a08:	4333      	orrs	r3, r6
 8002a0a:	612b      	str	r3, [r5, #16]
    OB->USER = (UserConfig | 0x88U);
 8002a0c:	3878      	subs	r0, #120	; 0x78
 8002a0e:	4320      	orrs	r0, r4
 8002a10:	b2c0      	uxtb	r0, r0
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <FLASH_OB_UserConfig+0x44>)
 8002a14:	8058      	strh	r0, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <FLASH_OB_UserConfig+0x38>)
 8002a18:	f7ff ff0e 	bl	8002838 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002a1c:	692b      	ldr	r3, [r5, #16]
 8002a1e:	43b3      	bics	r3, r6
 8002a20:	612b      	str	r3, [r5, #16]
 8002a22:	e7ea      	b.n	80029fa <FLASH_OB_UserConfig+0xe>
 8002a24:	0000c350 	.word	0x0000c350
 8002a28:	20000370 	.word	0x20000370
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	1ffff800 	.word	0x1ffff800

08002a34 <FLASH_OB_ProgramData>:
{
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	0004      	movs	r4, r0
 8002a38:	000d      	movs	r5, r1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <FLASH_OB_ProgramData+0x34>)
 8002a3c:	f7ff fefc 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d000      	beq.n	8002a46 <FLASH_OB_ProgramData+0x12>
}
 8002a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <FLASH_OB_ProgramData+0x38>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002a4c:	4e08      	ldr	r6, [pc, #32]	; (8002a70 <FLASH_OB_ProgramData+0x3c>)
 8002a4e:	6933      	ldr	r3, [r6, #16]
 8002a50:	2710      	movs	r7, #16
 8002a52:	433b      	orrs	r3, r7
 8002a54:	6133      	str	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
 8002a56:	b2ad      	uxth	r5, r5
 8002a58:	8025      	strh	r5, [r4, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a5a:	4803      	ldr	r0, [pc, #12]	; (8002a68 <FLASH_OB_ProgramData+0x34>)
 8002a5c:	f7ff feec 	bl	8002838 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002a60:	6933      	ldr	r3, [r6, #16]
 8002a62:	43bb      	bics	r3, r7
 8002a64:	6133      	str	r3, [r6, #16]
 8002a66:	e7ed      	b.n	8002a44 <FLASH_OB_ProgramData+0x10>
 8002a68:	0000c350 	.word	0x0000c350
 8002a6c:	20000370 	.word	0x20000370
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_FLASHEx_OBErase>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
  rdptmp = FLASH_OB_GetRDP();
 8002a76:	f7ff ff77 	bl	8002968 <FLASH_OB_GetRDP>
 8002a7a:	b2c5      	uxtb	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a7c:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <HAL_FLASHEx_OBErase+0x44>)
 8002a7e:	f7ff fedb 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d000      	beq.n	8002a88 <HAL_FLASHEx_OBErase+0x14>
}
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_FLASHEx_OBErase+0x48>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002a8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ac0 <HAL_FLASHEx_OBErase+0x4c>)
 8002a90:	6923      	ldr	r3, [r4, #16]
 8002a92:	2620      	movs	r6, #32
 8002a94:	4333      	orrs	r3, r6
 8002a96:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a98:	6923      	ldr	r3, [r4, #16]
 8002a9a:	3240      	adds	r2, #64	; 0x40
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_FLASHEx_OBErase+0x44>)
 8002aa2:	f7ff fec9 	bl	8002838 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	43b3      	bics	r3, r6
 8002aaa:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1ea      	bne.n	8002a86 <HAL_FLASHEx_OBErase+0x12>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	f7ff ff69 	bl	8002988 <FLASH_OB_RDP_LevelConfig>
 8002ab6:	e7e6      	b.n	8002a86 <HAL_FLASHEx_OBErase+0x12>
 8002ab8:	0000c350 	.word	0x0000c350
 8002abc:	20000370 	.word	0x20000370
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <FLASH_OB_EnableWRP>:
{
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	0004      	movs	r4, r0
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8002ac8:	f7ff ff48 	bl	800295c <FLASH_OB_GetWRP>
 8002acc:	43a0      	bics	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8002ace:	25ff      	movs	r5, #255	; 0xff
 8002ad0:	0007      	movs	r7, r0
 8002ad2:	402f      	ands	r7, r5
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8002ad4:	0a06      	lsrs	r6, r0, #8
 8002ad6:	402e      	ands	r6, r5
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8002ad8:	0c03      	lsrs	r3, r0, #16
 8002ada:	401d      	ands	r5, r3
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
 8002adc:	0e04      	lsrs	r4, r0, #24
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ade:	4823      	ldr	r0, [pc, #140]	; (8002b6c <FLASH_OB_EnableWRP+0xa8>)
 8002ae0:	f7ff feaa 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d000      	beq.n	8002aea <FLASH_OB_EnableWRP+0x26>
}
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <FLASH_OB_EnableWRP+0xac>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8002af0:	f7ff ffc0 	bl	8002a74 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d1f7      	bne.n	8002ae8 <FLASH_OB_EnableWRP+0x24>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <FLASH_OB_EnableWRP+0xb0>)
 8002afa:	6913      	ldr	r3, [r2, #16]
 8002afc:	2110      	movs	r1, #16
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 8002b02:	2fff      	cmp	r7, #255	; 0xff
 8002b04:	d111      	bne.n	8002b2a <FLASH_OB_EnableWRP+0x66>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d101      	bne.n	8002b0e <FLASH_OB_EnableWRP+0x4a>
 8002b0a:	2eff      	cmp	r6, #255	; 0xff
 8002b0c:	d115      	bne.n	8002b3a <FLASH_OB_EnableWRP+0x76>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d101      	bne.n	8002b16 <FLASH_OB_EnableWRP+0x52>
 8002b12:	2dff      	cmp	r5, #255	; 0xff
 8002b14:	d119      	bne.n	8002b4a <FLASH_OB_EnableWRP+0x86>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d101      	bne.n	8002b1e <FLASH_OB_EnableWRP+0x5a>
 8002b1a:	2cff      	cmp	r4, #255	; 0xff
 8002b1c:	d11d      	bne.n	8002b5a <FLASH_OB_EnableWRP+0x96>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <FLASH_OB_EnableWRP+0xb0>)
 8002b20:	6913      	ldr	r3, [r2, #16]
 8002b22:	2110      	movs	r1, #16
 8002b24:	438b      	bics	r3, r1
 8002b26:	6113      	str	r3, [r2, #16]
 8002b28:	e7de      	b.n	8002ae8 <FLASH_OB_EnableWRP+0x24>
        OB->WRP0 &= WRP0_Data;
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <FLASH_OB_EnableWRP+0xb4>)
 8002b2c:	8913      	ldrh	r3, [r2, #8]
 8002b2e:	401f      	ands	r7, r3
 8002b30:	8117      	strh	r7, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b32:	480e      	ldr	r0, [pc, #56]	; (8002b6c <FLASH_OB_EnableWRP+0xa8>)
 8002b34:	f7ff fe80 	bl	8002838 <FLASH_WaitForLastOperation>
 8002b38:	e7e5      	b.n	8002b06 <FLASH_OB_EnableWRP+0x42>
        OB->WRP1 &= WRP1_Data;
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <FLASH_OB_EnableWRP+0xb4>)
 8002b3c:	8953      	ldrh	r3, [r2, #10]
 8002b3e:	401e      	ands	r6, r3
 8002b40:	8156      	strh	r6, [r2, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b42:	480a      	ldr	r0, [pc, #40]	; (8002b6c <FLASH_OB_EnableWRP+0xa8>)
 8002b44:	f7ff fe78 	bl	8002838 <FLASH_WaitForLastOperation>
 8002b48:	e7e1      	b.n	8002b0e <FLASH_OB_EnableWRP+0x4a>
        OB->WRP2 &= WRP2_Data;
 8002b4a:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <FLASH_OB_EnableWRP+0xb4>)
 8002b4c:	8993      	ldrh	r3, [r2, #12]
 8002b4e:	401d      	ands	r5, r3
 8002b50:	8195      	strh	r5, [r2, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <FLASH_OB_EnableWRP+0xa8>)
 8002b54:	f7ff fe70 	bl	8002838 <FLASH_WaitForLastOperation>
 8002b58:	e7dd      	b.n	8002b16 <FLASH_OB_EnableWRP+0x52>
        OB->WRP3 &= WRP3_Data;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <FLASH_OB_EnableWRP+0xb4>)
 8002b5c:	89d8      	ldrh	r0, [r3, #14]
 8002b5e:	4020      	ands	r0, r4
 8002b60:	81d8      	strh	r0, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <FLASH_OB_EnableWRP+0xa8>)
 8002b64:	f7ff fe68 	bl	8002838 <FLASH_WaitForLastOperation>
 8002b68:	e7d9      	b.n	8002b1e <FLASH_OB_EnableWRP+0x5a>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	0000c350 	.word	0x0000c350
 8002b70:	20000370 	.word	0x20000370
 8002b74:	40022000 	.word	0x40022000
 8002b78:	1ffff800 	.word	0x1ffff800

08002b7c <FLASH_OB_DisableWRP>:
{
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	0004      	movs	r4, r0
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002b80:	f7ff feec 	bl	800295c <FLASH_OB_GetWRP>
 8002b84:	4304      	orrs	r4, r0
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8002b86:	25ff      	movs	r5, #255	; 0xff
 8002b88:	0027      	movs	r7, r4
 8002b8a:	402f      	ands	r7, r5
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8002b8c:	0a26      	lsrs	r6, r4, #8
 8002b8e:	402e      	ands	r6, r5
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8002b90:	0c23      	lsrs	r3, r4, #16
 8002b92:	401d      	ands	r5, r3
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
 8002b94:	0e24      	lsrs	r4, r4, #24
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b96:	4823      	ldr	r0, [pc, #140]	; (8002c24 <FLASH_OB_DisableWRP+0xa8>)
 8002b98:	f7ff fe4e 	bl	8002838 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d000      	beq.n	8002ba2 <FLASH_OB_DisableWRP+0x26>
}
 8002ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <FLASH_OB_DisableWRP+0xac>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8002ba8:	f7ff ff64 	bl	8002a74 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d1f7      	bne.n	8002ba0 <FLASH_OB_DisableWRP+0x24>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <FLASH_OB_DisableWRP+0xb0>)
 8002bb2:	6913      	ldr	r3, [r2, #16]
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 8002bba:	2fff      	cmp	r7, #255	; 0xff
 8002bbc:	d111      	bne.n	8002be2 <FLASH_OB_DisableWRP+0x66>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d101      	bne.n	8002bc6 <FLASH_OB_DisableWRP+0x4a>
 8002bc2:	2eff      	cmp	r6, #255	; 0xff
 8002bc4:	d115      	bne.n	8002bf2 <FLASH_OB_DisableWRP+0x76>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d101      	bne.n	8002bce <FLASH_OB_DisableWRP+0x52>
 8002bca:	2dff      	cmp	r5, #255	; 0xff
 8002bcc:	d119      	bne.n	8002c02 <FLASH_OB_DisableWRP+0x86>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d101      	bne.n	8002bd6 <FLASH_OB_DisableWRP+0x5a>
 8002bd2:	2cff      	cmp	r4, #255	; 0xff
 8002bd4:	d11d      	bne.n	8002c12 <FLASH_OB_DisableWRP+0x96>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <FLASH_OB_DisableWRP+0xb0>)
 8002bd8:	6913      	ldr	r3, [r2, #16]
 8002bda:	2110      	movs	r1, #16
 8002bdc:	438b      	bics	r3, r1
 8002bde:	6113      	str	r3, [r2, #16]
 8002be0:	e7de      	b.n	8002ba0 <FLASH_OB_DisableWRP+0x24>
        OB->WRP0 &= WRP0_Data;
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <FLASH_OB_DisableWRP+0xb4>)
 8002be4:	8913      	ldrh	r3, [r2, #8]
 8002be6:	401f      	ands	r7, r3
 8002be8:	8117      	strh	r7, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bea:	480e      	ldr	r0, [pc, #56]	; (8002c24 <FLASH_OB_DisableWRP+0xa8>)
 8002bec:	f7ff fe24 	bl	8002838 <FLASH_WaitForLastOperation>
 8002bf0:	e7e5      	b.n	8002bbe <FLASH_OB_DisableWRP+0x42>
        OB->WRP1 &= WRP1_Data;
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <FLASH_OB_DisableWRP+0xb4>)
 8002bf4:	8953      	ldrh	r3, [r2, #10]
 8002bf6:	401e      	ands	r6, r3
 8002bf8:	8156      	strh	r6, [r2, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bfa:	480a      	ldr	r0, [pc, #40]	; (8002c24 <FLASH_OB_DisableWRP+0xa8>)
 8002bfc:	f7ff fe1c 	bl	8002838 <FLASH_WaitForLastOperation>
 8002c00:	e7e1      	b.n	8002bc6 <FLASH_OB_DisableWRP+0x4a>
        OB->WRP2 &= WRP2_Data;
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <FLASH_OB_DisableWRP+0xb4>)
 8002c04:	8993      	ldrh	r3, [r2, #12]
 8002c06:	401d      	ands	r5, r3
 8002c08:	8195      	strh	r5, [r2, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0a:	4806      	ldr	r0, [pc, #24]	; (8002c24 <FLASH_OB_DisableWRP+0xa8>)
 8002c0c:	f7ff fe14 	bl	8002838 <FLASH_WaitForLastOperation>
 8002c10:	e7dd      	b.n	8002bce <FLASH_OB_DisableWRP+0x52>
        OB->WRP3 &= WRP3_Data;
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <FLASH_OB_DisableWRP+0xb4>)
 8002c14:	89d8      	ldrh	r0, [r3, #14]
 8002c16:	4020      	ands	r0, r4
 8002c18:	81d8      	strh	r0, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c1a:	4802      	ldr	r0, [pc, #8]	; (8002c24 <FLASH_OB_DisableWRP+0xa8>)
 8002c1c:	f7ff fe0c 	bl	8002838 <FLASH_WaitForLastOperation>
 8002c20:	e7d9      	b.n	8002bd6 <FLASH_OB_DisableWRP+0x5a>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	0000c350 	.word	0x0000c350
 8002c28:	20000370 	.word	0x20000370
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	1ffff800 	.word	0x1ffff800

08002c34 <HAL_FLASHEx_OBProgram>:
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002c3a:	7e1b      	ldrb	r3, [r3, #24]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d03f      	beq.n	8002cc0 <HAL_FLASHEx_OBProgram+0x8c>
 8002c40:	2301      	movs	r3, #1
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002c44:	7613      	strb	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002c46:	6802      	ldr	r2, [r0, #0]
 8002c48:	4213      	tst	r3, r2
 8002c4a:	d00f      	beq.n	8002c6c <HAL_FLASHEx_OBProgram+0x38>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002c4c:	6843      	ldr	r3, [r0, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d008      	beq.n	8002c64 <HAL_FLASHEx_OBProgram+0x30>
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8002c52:	6880      	ldr	r0, [r0, #8]
 8002c54:	f7ff ff92 	bl	8002b7c <FLASH_OB_DisableWRP>
    if (status != HAL_OK)
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_FLASHEx_OBProgram+0x3a>
      __HAL_UNLOCK(&pFlash);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	761a      	strb	r2, [r3, #24]
      return status;
 8002c62:	e010      	b.n	8002c86 <HAL_FLASHEx_OBProgram+0x52>
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8002c64:	6880      	ldr	r0, [r0, #8]
 8002c66:	f7ff ff2d 	bl	8002ac4 <FLASH_OB_EnableWRP>
 8002c6a:	e7f5      	b.n	8002c58 <HAL_FLASHEx_OBProgram+0x24>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	079b      	lsls	r3, r3, #30
 8002c72:	d409      	bmi.n	8002c88 <HAL_FLASHEx_OBProgram+0x54>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	075b      	lsls	r3, r3, #29
 8002c78:	d40f      	bmi.n	8002c9a <HAL_FLASHEx_OBProgram+0x66>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	d415      	bmi.n	8002cac <HAL_FLASHEx_OBProgram+0x78>
  __HAL_UNLOCK(&pFlash);
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	761a      	strb	r2, [r3, #24]
}
 8002c86:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002c88:	7b20      	ldrb	r0, [r4, #12]
 8002c8a:	f7ff fe7d 	bl	8002988 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_FLASHEx_OBProgram+0x40>
      __HAL_UNLOCK(&pFlash);
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	761a      	strb	r2, [r3, #24]
      return status;
 8002c98:	e7f5      	b.n	8002c86 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8002c9a:	7b60      	ldrb	r0, [r4, #13]
 8002c9c:	f7ff fea6 	bl	80029ec <FLASH_OB_UserConfig>
    if (status != HAL_OK)
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d0ea      	beq.n	8002c7a <HAL_FLASHEx_OBProgram+0x46>
      __HAL_UNLOCK(&pFlash);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	761a      	strb	r2, [r3, #24]
      return status;
 8002caa:	e7ec      	b.n	8002c86 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8002cac:	7d21      	ldrb	r1, [r4, #20]
 8002cae:	6920      	ldr	r0, [r4, #16]
 8002cb0:	f7ff fec0 	bl	8002a34 <FLASH_OB_ProgramData>
    if (status != HAL_OK)
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0e3      	beq.n	8002c80 <HAL_FLASHEx_OBProgram+0x4c>
      __HAL_UNLOCK(&pFlash);
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <HAL_FLASHEx_OBProgram+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	761a      	strb	r2, [r3, #24]
      return status;
 8002cbe:	e7e2      	b.n	8002c86 <HAL_FLASHEx_OBProgram+0x52>
  __HAL_LOCK(&pFlash);
 8002cc0:	2002      	movs	r0, #2
 8002cc2:	e7e0      	b.n	8002c86 <HAL_FLASHEx_OBProgram+0x52>
 8002cc4:	20000370 	.word	0x20000370

08002cc8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <FLASH_PageErase+0x1c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <FLASH_PageErase+0x20>)
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002cd8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	313e      	adds	r1, #62	; 0x3e
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000370 	.word	0x20000370
 8002ce8:	40022000 	.word	0x40022000

08002cec <HAL_FLASHEx_Erase>:
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0005      	movs	r5, r0
 8002cf0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_FLASHEx_Erase+0x98>)
 8002cf4:	7e1b      	ldrb	r3, [r3, #24]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d041      	beq.n	8002d7e <HAL_FLASHEx_Erase+0x92>
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_FLASHEx_Erase+0x98>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d022      	beq.n	8002d4c <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d06:	4820      	ldr	r0, [pc, #128]	; (8002d88 <HAL_FLASHEx_Erase+0x9c>)
 8002d08:	f7ff fd96 	bl	8002838 <FLASH_WaitForLastOperation>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d131      	bne.n	8002d74 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8002d10:	2301      	movs	r3, #1
 8002d12:	425b      	negs	r3, r3
 8002d14:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002d16:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d18:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002d1a:	68ab      	ldr	r3, [r5, #8]
 8002d1c:	02db      	lsls	r3, r3, #11
 8002d1e:	686a      	ldr	r2, [r5, #4]
 8002d20:	4694      	mov	ip, r2
 8002d22:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8002d24:	42a3      	cmp	r3, r4
 8002d26:	d926      	bls.n	8002d76 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8002d28:	0020      	movs	r0, r4
 8002d2a:	f7ff ffcd 	bl	8002cc8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d2e:	4816      	ldr	r0, [pc, #88]	; (8002d88 <HAL_FLASHEx_Erase+0x9c>)
 8002d30:	f7ff fd82 	bl	8002838 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_FLASHEx_Erase+0xa0>)
 8002d36:	6913      	ldr	r3, [r2, #16]
 8002d38:	2102      	movs	r1, #2
 8002d3a:	438b      	bics	r3, r1
 8002d3c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	469c      	mov	ip, r3
 8002d48:	4464      	add	r4, ip
 8002d4a:	e7e6      	b.n	8002d1a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d4c:	480e      	ldr	r0, [pc, #56]	; (8002d88 <HAL_FLASHEx_Erase+0x9c>)
 8002d4e:	f7ff fd73 	bl	8002838 <FLASH_WaitForLastOperation>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d56:	2001      	movs	r0, #1
 8002d58:	e00d      	b.n	8002d76 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8002d5a:	f7ff fded 	bl	8002938 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d5e:	480a      	ldr	r0, [pc, #40]	; (8002d88 <HAL_FLASHEx_Erase+0x9c>)
 8002d60:	f7ff fd6a 	bl	8002838 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_FLASHEx_Erase+0xa0>)
 8002d66:	6913      	ldr	r3, [r2, #16]
 8002d68:	2104      	movs	r1, #4
 8002d6a:	438b      	bics	r3, r1
 8002d6c:	6113      	str	r3, [r2, #16]
 8002d6e:	e002      	b.n	8002d76 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8002d70:	6034      	str	r4, [r6, #0]
            break;
 8002d72:	e000      	b.n	8002d76 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d74:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002d76:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_FLASHEx_Erase+0x98>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	e7fc      	b.n	8002d7c <HAL_FLASHEx_Erase+0x90>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000370 	.word	0x20000370
 8002d88:	0000c350 	.word	0x0000c350
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002d94:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d96:	e057      	b.n	8002e48 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d98:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d9a:	005f      	lsls	r7, r3, #1
 8002d9c:	2603      	movs	r6, #3
 8002d9e:	40be      	lsls	r6, r7
 8002da0:	43b4      	bics	r4, r6
 8002da2:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da4:	68cc      	ldr	r4, [r1, #12]
 8002da6:	40bc      	lsls	r4, r7
 8002da8:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002daa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dae:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	684a      	ldr	r2, [r1, #4]
 8002db2:	0916      	lsrs	r6, r2, #4
 8002db4:	2201      	movs	r2, #1
 8002db6:	4032      	ands	r2, r6
 8002db8:	409a      	lsls	r2, r3
 8002dba:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002dbc:	6042      	str	r2, [r0, #4]
 8002dbe:	e053      	b.n	8002e68 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc0:	08dc      	lsrs	r4, r3, #3
 8002dc2:	3408      	adds	r4, #8
 8002dc4:	00a4      	lsls	r4, r4, #2
 8002dc6:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc8:	3205      	adds	r2, #5
 8002dca:	401a      	ands	r2, r3
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	270f      	movs	r7, #15
 8002dd0:	4097      	lsls	r7, r2
 8002dd2:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd4:	690f      	ldr	r7, [r1, #16]
 8002dd6:	4097      	lsls	r7, r2
 8002dd8:	003a      	movs	r2, r7
 8002dda:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8002ddc:	5022      	str	r2, [r4, r0]
 8002dde:	e057      	b.n	8002e90 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de0:	2604      	movs	r6, #4
 8002de2:	e000      	b.n	8002de6 <HAL_GPIO_Init+0x56>
 8002de4:	2600      	movs	r6, #0
 8002de6:	40a6      	lsls	r6, r4
 8002de8:	0034      	movs	r4, r6
 8002dea:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dec:	3202      	adds	r2, #2
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4e47      	ldr	r6, [pc, #284]	; (8002f10 <HAL_GPIO_Init+0x180>)
 8002df2:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df4:	4a47      	ldr	r2, [pc, #284]	; (8002f14 <HAL_GPIO_Init+0x184>)
 8002df6:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8002df8:	43ea      	mvns	r2, r5
 8002dfa:	0026      	movs	r6, r4
 8002dfc:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfe:	684f      	ldr	r7, [r1, #4]
 8002e00:	02ff      	lsls	r7, r7, #11
 8002e02:	d501      	bpl.n	8002e08 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002e04:	432c      	orrs	r4, r5
 8002e06:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8002e08:	4c42      	ldr	r4, [pc, #264]	; (8002f14 <HAL_GPIO_Init+0x184>)
 8002e0a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002e0c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8002e0e:	0026      	movs	r6, r4
 8002e10:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e12:	684f      	ldr	r7, [r1, #4]
 8002e14:	02bf      	lsls	r7, r7, #10
 8002e16:	d501      	bpl.n	8002e1c <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8002e18:	432c      	orrs	r4, r5
 8002e1a:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8002e1c:	4c3d      	ldr	r4, [pc, #244]	; (8002f14 <HAL_GPIO_Init+0x184>)
 8002e1e:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002e20:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8002e22:	0026      	movs	r6, r4
 8002e24:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e26:	684f      	ldr	r7, [r1, #4]
 8002e28:	03bf      	lsls	r7, r7, #14
 8002e2a:	d501      	bpl.n	8002e30 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8002e2c:	432c      	orrs	r4, r5
 8002e2e:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8002e30:	4c38      	ldr	r4, [pc, #224]	; (8002f14 <HAL_GPIO_Init+0x184>)
 8002e32:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8002e34:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 8002e36:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e38:	684e      	ldr	r6, [r1, #4]
 8002e3a:	03f6      	lsls	r6, r6, #15
 8002e3c:	d501      	bpl.n	8002e42 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8002e3e:	002a      	movs	r2, r5
 8002e40:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 8002e42:	4c34      	ldr	r4, [pc, #208]	; (8002f14 <HAL_GPIO_Init+0x184>)
 8002e44:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8002e46:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e48:	680c      	ldr	r4, [r1, #0]
 8002e4a:	0022      	movs	r2, r4
 8002e4c:	40da      	lsrs	r2, r3
 8002e4e:	d05c      	beq.n	8002f0a <HAL_GPIO_Init+0x17a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0025      	movs	r5, r4
 8002e56:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8002e58:	4214      	tst	r4, r2
 8002e5a:	d0f4      	beq.n	8002e46 <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e5c:	2403      	movs	r4, #3
 8002e5e:	684e      	ldr	r6, [r1, #4]
 8002e60:	4034      	ands	r4, r6
 8002e62:	3c01      	subs	r4, #1
 8002e64:	2c01      	cmp	r4, #1
 8002e66:	d997      	bls.n	8002d98 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	2203      	movs	r2, #3
 8002e6a:	684c      	ldr	r4, [r1, #4]
 8002e6c:	4022      	ands	r2, r4
 8002e6e:	2a03      	cmp	r2, #3
 8002e70:	d009      	beq.n	8002e86 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8002e72:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e74:	005e      	lsls	r6, r3, #1
 8002e76:	2403      	movs	r4, #3
 8002e78:	40b4      	lsls	r4, r6
 8002e7a:	43a2      	bics	r2, r4
 8002e7c:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7e:	688a      	ldr	r2, [r1, #8]
 8002e80:	40b2      	lsls	r2, r6
 8002e82:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002e84:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e86:	2203      	movs	r2, #3
 8002e88:	684c      	ldr	r4, [r1, #4]
 8002e8a:	4022      	ands	r2, r4
 8002e8c:	2a02      	cmp	r2, #2
 8002e8e:	d097      	beq.n	8002dc0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8002e90:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e92:	005e      	lsls	r6, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	0017      	movs	r7, r2
 8002e98:	40b7      	lsls	r7, r6
 8002e9a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9c:	684f      	ldr	r7, [r1, #4]
 8002e9e:	403a      	ands	r2, r7
 8002ea0:	40b2      	lsls	r2, r6
 8002ea2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002ea4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea6:	22c0      	movs	r2, #192	; 0xc0
 8002ea8:	0292      	lsls	r2, r2, #10
 8002eaa:	684c      	ldr	r4, [r1, #4]
 8002eac:	4214      	tst	r4, r2
 8002eae:	d0ca      	beq.n	8002e46 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	4c19      	ldr	r4, [pc, #100]	; (8002f18 <HAL_GPIO_Init+0x188>)
 8002eb2:	69a6      	ldr	r6, [r4, #24]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4316      	orrs	r6, r2
 8002eb8:	61a6      	str	r6, [r4, #24]
 8002eba:	69a4      	ldr	r4, [r4, #24]
 8002ebc:	4022      	ands	r2, r4
 8002ebe:	9201      	str	r2, [sp, #4]
 8002ec0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec2:	089a      	lsrs	r2, r3, #2
 8002ec4:	1c94      	adds	r4, r2, #2
 8002ec6:	00a4      	lsls	r4, r4, #2
 8002ec8:	4e11      	ldr	r6, [pc, #68]	; (8002f10 <HAL_GPIO_Init+0x180>)
 8002eca:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ecc:	2603      	movs	r6, #3
 8002ece:	401e      	ands	r6, r3
 8002ed0:	00b4      	lsls	r4, r6, #2
 8002ed2:	260f      	movs	r6, #15
 8002ed4:	40a6      	lsls	r6, r4
 8002ed6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed8:	2690      	movs	r6, #144	; 0x90
 8002eda:	05f6      	lsls	r6, r6, #23
 8002edc:	42b0      	cmp	r0, r6
 8002ede:	d081      	beq.n	8002de4 <HAL_GPIO_Init+0x54>
 8002ee0:	4e0e      	ldr	r6, [pc, #56]	; (8002f1c <HAL_GPIO_Init+0x18c>)
 8002ee2:	42b0      	cmp	r0, r6
 8002ee4:	d00b      	beq.n	8002efe <HAL_GPIO_Init+0x16e>
 8002ee6:	4e0e      	ldr	r6, [pc, #56]	; (8002f20 <HAL_GPIO_Init+0x190>)
 8002ee8:	42b0      	cmp	r0, r6
 8002eea:	d00a      	beq.n	8002f02 <HAL_GPIO_Init+0x172>
 8002eec:	4e0d      	ldr	r6, [pc, #52]	; (8002f24 <HAL_GPIO_Init+0x194>)
 8002eee:	42b0      	cmp	r0, r6
 8002ef0:	d009      	beq.n	8002f06 <HAL_GPIO_Init+0x176>
 8002ef2:	4e0d      	ldr	r6, [pc, #52]	; (8002f28 <HAL_GPIO_Init+0x198>)
 8002ef4:	42b0      	cmp	r0, r6
 8002ef6:	d100      	bne.n	8002efa <HAL_GPIO_Init+0x16a>
 8002ef8:	e772      	b.n	8002de0 <HAL_GPIO_Init+0x50>
 8002efa:	2605      	movs	r6, #5
 8002efc:	e773      	b.n	8002de6 <HAL_GPIO_Init+0x56>
 8002efe:	2601      	movs	r6, #1
 8002f00:	e771      	b.n	8002de6 <HAL_GPIO_Init+0x56>
 8002f02:	2602      	movs	r6, #2
 8002f04:	e76f      	b.n	8002de6 <HAL_GPIO_Init+0x56>
 8002f06:	2603      	movs	r6, #3
 8002f08:	e76d      	b.n	8002de6 <HAL_GPIO_Init+0x56>
  } 
}
 8002f0a:	b003      	add	sp, #12
 8002f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010400 	.word	0x40010400
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	48000400 	.word	0x48000400
 8002f20:	48000800 	.word	0x48000800
 8002f24:	48000c00 	.word	0x48000c00
 8002f28:	48001000 	.word	0x48001000

08002f2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f30:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f32:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f34:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002f36:	e7fc      	b.n	8002f32 <HAL_GPIO_WritePin+0x6>

08002f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	d059      	beq.n	8002ff2 <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	2341      	movs	r3, #65	; 0x41
 8002f40:	5cc3      	ldrb	r3, [r0, r3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d043      	beq.n	8002fce <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	2341      	movs	r3, #65	; 0x41
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	438b      	bics	r3, r1
 8002f54:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_I2C_Init+0xc0>)
 8002f5a:	6861      	ldr	r1, [r4, #4]
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6893      	ldr	r3, [r2, #8]
 8002f64:	4925      	ldr	r1, [pc, #148]	; (8002ffc <HAL_I2C_Init+0xc4>)
 8002f66:	400b      	ands	r3, r1
 8002f68:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d034      	beq.n	8002fda <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	2384      	movs	r3, #132	; 0x84
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68a1      	ldr	r1, [r4, #8]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7c:	68e3      	ldr	r3, [r4, #12]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d032      	beq.n	8002fe8 <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	6851      	ldr	r1, [r2, #4]
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_I2C_Init+0xc8>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	68d3      	ldr	r3, [r2, #12]
 8002f90:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_I2C_Init+0xc4>)
 8002f92:	400b      	ands	r3, r1
 8002f94:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	6962      	ldr	r2, [r4, #20]
 8002f9a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f9c:	69a2      	ldr	r2, [r4, #24]
 8002f9e:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa0:	6821      	ldr	r1, [r4, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	69e3      	ldr	r3, [r4, #28]
 8002faa:	6a21      	ldr	r1, [r4, #32]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	6822      	ldr	r2, [r4, #0]
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	2241      	movs	r2, #65	; 0x41
 8002fc0:	311f      	adds	r1, #31
 8002fc2:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	3201      	adds	r2, #1
 8002fc8:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8002fca:	2000      	movs	r0, #0
}
 8002fcc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	3340      	adds	r3, #64	; 0x40
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002fd4:	f7fe fec0 	bl	8001d58 <HAL_I2C_MspInit>
 8002fd8:	e7b5      	b.n	8002f46 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	68a1      	ldr	r1, [r4, #8]
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6093      	str	r3, [r2, #8]
 8002fe6:	e7c9      	b.n	8002f7c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	e7c7      	b.n	8002f82 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	e7ea      	b.n	8002fcc <HAL_I2C_Init+0x94>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	f0ffffff 	.word	0xf0ffffff
 8002ffc:	ffff7fff 	.word	0xffff7fff
 8003000:	02008000 	.word	0x02008000

08003004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	2341      	movs	r3, #65	; 0x41
 8003008:	5cc3      	ldrb	r3, [r0, r3]
 800300a:	2b20      	cmp	r3, #32
 800300c:	d120      	bne.n	8003050 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	3320      	adds	r3, #32
 8003010:	5cc3      	ldrb	r3, [r0, r3]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d01e      	beq.n	8003054 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003016:	2440      	movs	r4, #64	; 0x40
 8003018:	2201      	movs	r2, #1
 800301a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	2541      	movs	r5, #65	; 0x41
 800301e:	2324      	movs	r3, #36	; 0x24
 8003020:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003022:	6806      	ldr	r6, [r0, #0]
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	4393      	bics	r3, r2
 8003028:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800302a:	6806      	ldr	r6, [r0, #0]
 800302c:	6833      	ldr	r3, [r6, #0]
 800302e:	4f0a      	ldr	r7, [pc, #40]	; (8003058 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003030:	403b      	ands	r3, r7
 8003032:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003034:	6806      	ldr	r6, [r0, #0]
 8003036:	6833      	ldr	r3, [r6, #0]
 8003038:	4319      	orrs	r1, r3
 800303a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303c:	6801      	ldr	r1, [r0, #0]
 800303e:	680b      	ldr	r3, [r1, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	2320      	movs	r3, #32
 8003046:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	2300      	movs	r3, #0
 800304a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800304c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003050:	2002      	movs	r0, #2
 8003052:	e7fc      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003054:	2002      	movs	r0, #2
 8003056:	e7fa      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8003058:	ffffefff 	.word	0xffffefff

0800305c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800305c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	2341      	movs	r3, #65	; 0x41
 8003060:	5cc3      	ldrb	r3, [r0, r3]
 8003062:	2b20      	cmp	r3, #32
 8003064:	d11e      	bne.n	80030a4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	3320      	adds	r3, #32
 8003068:	5cc3      	ldrb	r3, [r0, r3]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d01c      	beq.n	80030a8 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800306e:	2440      	movs	r4, #64	; 0x40
 8003070:	2201      	movs	r2, #1
 8003072:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	2541      	movs	r5, #65	; 0x41
 8003076:	2324      	movs	r3, #36	; 0x24
 8003078:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307a:	6806      	ldr	r6, [r0, #0]
 800307c:	6833      	ldr	r3, [r6, #0]
 800307e:	4393      	bics	r3, r2
 8003080:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003082:	6806      	ldr	r6, [r0, #0]
 8003084:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003086:	4f09      	ldr	r7, [pc, #36]	; (80030ac <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003088:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800308a:	0209      	lsls	r1, r1, #8
 800308c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800308e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003090:	6801      	ldr	r1, [r0, #0]
 8003092:	680b      	ldr	r3, [r1, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	2320      	movs	r3, #32
 800309a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	2300      	movs	r3, #0
 800309e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80030a0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80030a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80030a4:	2002      	movs	r0, #2
 80030a6:	e7fc      	b.n	80030a2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80030a8:	2002      	movs	r0, #2
 80030aa:	e7fa      	b.n	80030a2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80030ac:	fffff0ff 	.word	0xfffff0ff

080030b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030b4:	d028      	beq.n	8003108 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_IWDG_Init+0x5c>)
 80030ba:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80030bc:	6803      	ldr	r3, [r0, #0]
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_IWDG_Init+0x60>)
 80030c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	6842      	ldr	r2, [r0, #4]
 80030c6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	6882      	ldr	r2, [r0, #8]
 80030cc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80030ce:	f7ff f821 	bl	8002114 <HAL_GetTick>
 80030d2:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	0752      	lsls	r2, r2, #29
 80030da:	d00a      	beq.n	80030f2 <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80030dc:	f7ff f81a 	bl	8002114 <HAL_GetTick>
 80030e0:	1b40      	subs	r0, r0, r5
 80030e2:	2827      	cmp	r0, #39	; 0x27
 80030e4:	d9f6      	bls.n	80030d4 <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	075b      	lsls	r3, r3, #29
 80030ec:	d0f2      	beq.n	80030d4 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 80030ee:	2003      	movs	r0, #3
 80030f0:	e00b      	b.n	800310a <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80030f2:	6919      	ldr	r1, [r3, #16]
 80030f4:	68e2      	ldr	r2, [r4, #12]
 80030f6:	4291      	cmp	r1, r2
 80030f8:	d002      	beq.n	8003100 <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80030fa:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 80030fc:	2000      	movs	r0, #0
 80030fe:	e004      	b.n	800310a <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_IWDG_Init+0x64>)
 8003102:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003104:	2000      	movs	r0, #0
 8003106:	e000      	b.n	800310a <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8003108:	2001      	movs	r0, #1
}
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	0000cccc 	.word	0x0000cccc
 8003110:	00005555 	.word	0x00005555
 8003114:	0000aaaa 	.word	0x0000aaaa

08003118 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003118:	6803      	ldr	r3, [r0, #0]
 800311a:	4a02      	ldr	r2, [pc, #8]	; (8003124 <HAL_IWDG_Refresh+0xc>)
 800311c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800311e:	2000      	movs	r0, #0
 8003120:	4770      	bx	lr
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	0000aaaa 	.word	0x0000aaaa

08003128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800312e:	d100      	bne.n	8003132 <HAL_RCC_OscConfig+0xa>
 8003130:	e27f      	b.n	8003632 <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d52b      	bpl.n	8003190 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003138:	4bb3      	ldr	r3, [pc, #716]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	230c      	movs	r3, #12
 800313e:	4013      	ands	r3, r2
 8003140:	2b04      	cmp	r3, #4
 8003142:	d01d      	beq.n	8003180 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003144:	4bb0      	ldr	r3, [pc, #704]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	230c      	movs	r3, #12
 800314a:	4013      	ands	r3, r2
 800314c:	2b08      	cmp	r3, #8
 800314e:	d00e      	beq.n	800316e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d041      	beq.n	80031da <HAL_RCC_OscConfig+0xb2>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d156      	bne.n	8003208 <HAL_RCC_OscConfig+0xe0>
 800315a:	4bab      	ldr	r3, [pc, #684]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	49ab      	ldr	r1, [pc, #684]	; (800340c <HAL_RCC_OscConfig+0x2e4>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	49aa      	ldr	r1, [pc, #680]	; (8003410 <HAL_RCC_OscConfig+0x2e8>)
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e03b      	b.n	80031e6 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800316e:	4ba6      	ldr	r3, [pc, #664]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	22c0      	movs	r2, #192	; 0xc0
 8003174:	0252      	lsls	r2, r2, #9
 8003176:	4013      	ands	r3, r2
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	0252      	lsls	r2, r2, #9
 800317c:	4293      	cmp	r3, r2
 800317e:	d1e7      	bne.n	8003150 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4ba1      	ldr	r3, [pc, #644]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	039b      	lsls	r3, r3, #14
 8003186:	d503      	bpl.n	8003190 <HAL_RCC_OscConfig+0x68>
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <HAL_RCC_OscConfig+0x68>
 800318e:	e253      	b.n	8003638 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	079b      	lsls	r3, r3, #30
 8003194:	d577      	bpl.n	8003286 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003196:	4b9c      	ldr	r3, [pc, #624]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	220c      	movs	r2, #12
 800319c:	421a      	tst	r2, r3
 800319e:	d062      	beq.n	8003266 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	230c      	movs	r3, #12
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d053      	beq.n	8003254 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ac:	68e3      	ldr	r3, [r4, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d100      	bne.n	80031b4 <HAL_RCC_OscConfig+0x8c>
 80031b2:	e08a      	b.n	80032ca <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4a94      	ldr	r2, [pc, #592]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe ffa9 	bl	8002114 <HAL_GetTick>
 80031c2:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	4b90      	ldr	r3, [pc, #576]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	079b      	lsls	r3, r3, #30
 80031ca:	d475      	bmi.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe ffa2 	bl	8002114 <HAL_GetTick>
 80031d0:	1b40      	subs	r0, r0, r5
 80031d2:	2802      	cmp	r0, #2
 80031d4:	d9f6      	bls.n	80031c4 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 80031d6:	2003      	movs	r0, #3
 80031d8:	e22c      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80031dc:	6811      	ldr	r1, [r2, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	430b      	orrs	r3, r1
 80031e4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d025      	beq.n	8003238 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80031ec:	f7fe ff92 	bl	8002114 <HAL_GetTick>
 80031f0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b85      	ldr	r3, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	039b      	lsls	r3, r3, #14
 80031f8:	d4ca      	bmi.n	8003190 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fa:	f7fe ff8b 	bl	8002114 <HAL_GetTick>
 80031fe:	1b40      	subs	r0, r0, r5
 8003200:	2864      	cmp	r0, #100	; 0x64
 8003202:	d9f6      	bls.n	80031f2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003204:	2003      	movs	r0, #3
 8003206:	e215      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	2b05      	cmp	r3, #5
 800320a:	d009      	beq.n	8003220 <HAL_RCC_OscConfig+0xf8>
 800320c:	4b7e      	ldr	r3, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	497e      	ldr	r1, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x2e4>)
 8003212:	400a      	ands	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	497d      	ldr	r1, [pc, #500]	; (8003410 <HAL_RCC_OscConfig+0x2e8>)
 800321a:	400a      	ands	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e7e2      	b.n	80031e6 <HAL_RCC_OscConfig+0xbe>
 8003220:	4b79      	ldr	r3, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	02d2      	lsls	r2, r2, #11
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	0252      	lsls	r2, r2, #9
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e7d6      	b.n	80031e6 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8003238:	f7fe ff6c 	bl	8002114 <HAL_GetTick>
 800323c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b72      	ldr	r3, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	039b      	lsls	r3, r3, #14
 8003244:	d5a4      	bpl.n	8003190 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003246:	f7fe ff65 	bl	8002114 <HAL_GetTick>
 800324a:	1b40      	subs	r0, r0, r5
 800324c:	2864      	cmp	r0, #100	; 0x64
 800324e:	d9f6      	bls.n	800323e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8003250:	2003      	movs	r0, #3
 8003252:	e1ef      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	22c0      	movs	r2, #192	; 0xc0
 800325a:	0252      	lsls	r2, r2, #9
 800325c:	4013      	ands	r3, r2
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	0212      	lsls	r2, r2, #8
 8003262:	4293      	cmp	r3, r2
 8003264:	d1a2      	bne.n	80031ac <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	079b      	lsls	r3, r3, #30
 800326c:	d503      	bpl.n	8003276 <HAL_RCC_OscConfig+0x14e>
 800326e:	68e3      	ldr	r3, [r4, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d000      	beq.n	8003276 <HAL_RCC_OscConfig+0x14e>
 8003274:	e1e2      	b.n	800363c <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4964      	ldr	r1, [pc, #400]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003278:	680b      	ldr	r3, [r1, #0]
 800327a:	22f8      	movs	r2, #248	; 0xf8
 800327c:	4393      	bics	r3, r2
 800327e:	6922      	ldr	r2, [r4, #16]
 8003280:	00d2      	lsls	r2, r2, #3
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	d544      	bpl.n	8003316 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328c:	69e3      	ldr	r3, [r4, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d02e      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003294:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003296:	2101      	movs	r1, #1
 8003298:	430b      	orrs	r3, r1
 800329a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe ff3a 	bl	8002114 <HAL_GetTick>
 80032a0:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	079b      	lsls	r3, r3, #30
 80032a8:	d435      	bmi.n	8003316 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe ff33 	bl	8002114 <HAL_GetTick>
 80032ae:	1b40      	subs	r0, r0, r5
 80032b0:	2802      	cmp	r0, #2
 80032b2:	d9f6      	bls.n	80032a2 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80032b4:	2003      	movs	r0, #3
 80032b6:	e1bd      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4953      	ldr	r1, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80032ba:	680b      	ldr	r3, [r1, #0]
 80032bc:	22f8      	movs	r2, #248	; 0xf8
 80032be:	4393      	bics	r3, r2
 80032c0:	6922      	ldr	r2, [r4, #16]
 80032c2:	00d2      	lsls	r2, r2, #3
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	e7dd      	b.n	8003286 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 80032ca:	4a4f      	ldr	r2, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438b      	bics	r3, r1
 80032d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032d4:	f7fe ff1e 	bl	8002114 <HAL_GetTick>
 80032d8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	079b      	lsls	r3, r3, #30
 80032e0:	d5d1      	bpl.n	8003286 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe ff17 	bl	8002114 <HAL_GetTick>
 80032e6:	1b40      	subs	r0, r0, r5
 80032e8:	2802      	cmp	r0, #2
 80032ea:	d9f6      	bls.n	80032da <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80032ec:	2003      	movs	r0, #3
 80032ee:	e1a1      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4a45      	ldr	r2, [pc, #276]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80032f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80032f4:	2101      	movs	r1, #1
 80032f6:	438b      	bics	r3, r1
 80032f8:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe ff0b 	bl	8002114 <HAL_GetTick>
 80032fe:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	079b      	lsls	r3, r3, #30
 8003306:	d506      	bpl.n	8003316 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003308:	f7fe ff04 	bl	8002114 <HAL_GetTick>
 800330c:	1b40      	subs	r0, r0, r5
 800330e:	2802      	cmp	r0, #2
 8003310:	d9f6      	bls.n	8003300 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8003312:	2003      	movs	r0, #3
 8003314:	e18e      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	075b      	lsls	r3, r3, #29
 800331a:	d400      	bmi.n	800331e <HAL_RCC_OscConfig+0x1f6>
 800331c:	e080      	b.n	8003420 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	d41d      	bmi.n	8003362 <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4a38      	ldr	r2, [pc, #224]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003328:	69d1      	ldr	r1, [r2, #28]
 800332a:	2080      	movs	r0, #128	; 0x80
 800332c:	0540      	lsls	r0, r0, #21
 800332e:	4301      	orrs	r1, r0
 8003330:	61d1      	str	r1, [r2, #28]
 8003332:	69d3      	ldr	r3, [r2, #28]
 8003334:	4003      	ands	r3, r0
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800333a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <HAL_RCC_OscConfig+0x2ec>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	d510      	bpl.n	8003366 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	68a3      	ldr	r3, [r4, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d021      	beq.n	800338e <HAL_RCC_OscConfig+0x266>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d136      	bne.n	80033bc <HAL_RCC_OscConfig+0x294>
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	2101      	movs	r1, #1
 8003354:	438a      	bics	r2, r1
 8003356:	621a      	str	r2, [r3, #32]
 8003358:	6a1a      	ldr	r2, [r3, #32]
 800335a:	3103      	adds	r1, #3
 800335c:	438a      	bics	r2, r1
 800335e:	621a      	str	r2, [r3, #32]
 8003360:	e01a      	b.n	8003398 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2500      	movs	r5, #0
 8003364:	e7ea      	b.n	800333c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <HAL_RCC_OscConfig+0x2ec>)
 8003368:	6811      	ldr	r1, [r2, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	430b      	orrs	r3, r1
 8003370:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003372:	f7fe fecf 	bl	8002114 <HAL_GetTick>
 8003376:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x2ec>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	d4e1      	bmi.n	8003344 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fe fec8 	bl	8002114 <HAL_GetTick>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	2864      	cmp	r0, #100	; 0x64
 8003388:	d9f6      	bls.n	8003378 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800338a:	2003      	movs	r0, #3
 800338c:	e152      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 8003390:	6a13      	ldr	r3, [r2, #32]
 8003392:	2101      	movs	r1, #1
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003398:	68a3      	ldr	r3, [r4, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe feb9 	bl	8002114 <HAL_GetTick>
 80033a2:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	079b      	lsls	r3, r3, #30
 80033aa:	d437      	bmi.n	800341c <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe feb2 	bl	8002114 <HAL_GetTick>
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_OscConfig+0x2f0>)
 80033b4:	4298      	cmp	r0, r3
 80033b6:	d9f5      	bls.n	80033a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033b8:	2003      	movs	r0, #3
 80033ba:	e13b      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2ac>
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	2101      	movs	r1, #1
 80033c6:	438a      	bics	r2, r1
 80033c8:	621a      	str	r2, [r3, #32]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	3103      	adds	r1, #3
 80033ce:	438a      	bics	r2, r1
 80033d0:	621a      	str	r2, [r3, #32]
 80033d2:	e7e1      	b.n	8003398 <HAL_RCC_OscConfig+0x270>
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	2104      	movs	r1, #4
 80033da:	430a      	orrs	r2, r1
 80033dc:	621a      	str	r2, [r3, #32]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	3903      	subs	r1, #3
 80033e2:	430a      	orrs	r2, r1
 80033e4:	621a      	str	r2, [r3, #32]
 80033e6:	e7d7      	b.n	8003398 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fe94 	bl	8002114 <HAL_GetTick>
 80033ec:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x2e0>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	079b      	lsls	r3, r3, #30
 80033f4:	d512      	bpl.n	800341c <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fe fe8d 	bl	8002114 <HAL_GetTick>
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x2f0>)
 80033fe:	4298      	cmp	r0, r3
 8003400:	d9f5      	bls.n	80033ee <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003402:	2003      	movs	r0, #3
 8003404:	e116      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40021000 	.word	0x40021000
 800340c:	fffeffff 	.word	0xfffeffff
 8003410:	fffbffff 	.word	0xfffbffff
 8003414:	40007000 	.word	0x40007000
 8003418:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800341c:	2d01      	cmp	r5, #1
 800341e:	d039      	beq.n	8003494 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	06db      	lsls	r3, r3, #27
 8003424:	d510      	bpl.n	8003448 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003426:	6963      	ldr	r3, [r4, #20]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d039      	beq.n	80034a0 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800342c:	3305      	adds	r3, #5
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003430:	4a89      	ldr	r2, [pc, #548]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003432:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003434:	2104      	movs	r1, #4
 8003436:	438b      	bics	r3, r1
 8003438:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800343a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800343c:	31f4      	adds	r1, #244	; 0xf4
 800343e:	438b      	bics	r3, r1
 8003440:	69a1      	ldr	r1, [r4, #24]
 8003442:	00c9      	lsls	r1, r1, #3
 8003444:	430b      	orrs	r3, r1
 8003446:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	d56e      	bpl.n	800352c <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800344e:	4b82      	ldr	r3, [pc, #520]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	230c      	movs	r3, #12
 8003454:	4013      	ands	r3, r2
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d060      	beq.n	800351c <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800345a:	4b7f      	ldr	r3, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	230c      	movs	r3, #12
 8003460:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003462:	2b08      	cmp	r3, #8
 8003464:	d053      	beq.n	800350e <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003466:	6a23      	ldr	r3, [r4, #32]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d07e      	beq.n	800356a <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800346c:	4a7a      	ldr	r2, [pc, #488]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 800346e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	025b      	lsls	r3, r3, #9
 8003474:	430b      	orrs	r3, r1
 8003476:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fe4c 	bl	8002114 <HAL_GetTick>
 800347c:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800347e:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	039b      	lsls	r3, r3, #14
 8003484:	d452      	bmi.n	800352c <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003486:	f7fe fe45 	bl	8002114 <HAL_GetTick>
 800348a:	1b40      	subs	r0, r0, r5
 800348c:	2802      	cmp	r0, #2
 800348e:	d9f6      	bls.n	800347e <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 8003490:	2003      	movs	r0, #3
 8003492:	e0cf      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003496:	69d3      	ldr	r3, [r2, #28]
 8003498:	4970      	ldr	r1, [pc, #448]	; (800365c <HAL_RCC_OscConfig+0x534>)
 800349a:	400b      	ands	r3, r1
 800349c:	61d3      	str	r3, [r2, #28]
 800349e:	e7bf      	b.n	8003420 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 80034a0:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	2104      	movs	r1, #4
 80034a6:	430a      	orrs	r2, r1
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80034aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ac:	3903      	subs	r1, #3
 80034ae:	430a      	orrs	r2, r1
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80034b2:	f7fe fe2f 	bl	8002114 <HAL_GetTick>
 80034b6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034b8:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	079b      	lsls	r3, r3, #30
 80034be:	d406      	bmi.n	80034ce <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034c0:	f7fe fe28 	bl	8002114 <HAL_GetTick>
 80034c4:	1b40      	subs	r0, r0, r5
 80034c6:	2802      	cmp	r0, #2
 80034c8:	d9f6      	bls.n	80034b8 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 80034ca:	2003      	movs	r0, #3
 80034cc:	e0b2      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034ce:	4962      	ldr	r1, [pc, #392]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80034d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80034d2:	22f8      	movs	r2, #248	; 0xf8
 80034d4:	4393      	bics	r3, r2
 80034d6:	69a2      	ldr	r2, [r4, #24]
 80034d8:	00d2      	lsls	r2, r2, #3
 80034da:	4313      	orrs	r3, r2
 80034dc:	634b      	str	r3, [r1, #52]	; 0x34
 80034de:	e7b3      	b.n	8003448 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 80034e0:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80034e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e4:	2104      	movs	r1, #4
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80034ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ec:	3903      	subs	r1, #3
 80034ee:	438a      	bics	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80034f2:	f7fe fe0f 	bl	8002114 <HAL_GetTick>
 80034f6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80034f8:	4b57      	ldr	r3, [pc, #348]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	079b      	lsls	r3, r3, #30
 80034fe:	d5a3      	bpl.n	8003448 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003500:	f7fe fe08 	bl	8002114 <HAL_GetTick>
 8003504:	1b40      	subs	r0, r0, r5
 8003506:	2802      	cmp	r0, #2
 8003508:	d9f6      	bls.n	80034f8 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 800350a:	2003      	movs	r0, #3
 800350c:	e092      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800350e:	4b52      	ldr	r3, [pc, #328]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	22c0      	movs	r2, #192	; 0xc0
 8003514:	0252      	lsls	r2, r2, #9
 8003516:	4013      	ands	r3, r2
 8003518:	4293      	cmp	r3, r2
 800351a:	d1a4      	bne.n	8003466 <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800351c:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	039b      	lsls	r3, r3, #14
 8003522:	d503      	bpl.n	800352c <HAL_RCC_OscConfig+0x404>
 8003524:	6a23      	ldr	r3, [r4, #32]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d000      	beq.n	800352c <HAL_RCC_OscConfig+0x404>
 800352a:	e089      	b.n	8003640 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_RCC_OscConfig+0x40c>
 8003532:	e087      	b.n	8003644 <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003534:	4a48      	ldr	r2, [pc, #288]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003536:	6851      	ldr	r1, [r2, #4]
 8003538:	220c      	movs	r2, #12
 800353a:	400a      	ands	r2, r1
 800353c:	2a08      	cmp	r2, #8
 800353e:	d060      	beq.n	8003602 <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003540:	2b02      	cmp	r3, #2
 8003542:	d025      	beq.n	8003590 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	4a44      	ldr	r2, [pc, #272]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	4945      	ldr	r1, [pc, #276]	; (8003660 <HAL_RCC_OscConfig+0x538>)
 800354a:	400b      	ands	r3, r1
 800354c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fde1 	bl	8002114 <HAL_GetTick>
 8003552:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003554:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	d550      	bpl.n	80035fe <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe fdda 	bl	8002114 <HAL_GetTick>
 8003560:	1b00      	subs	r0, r0, r4
 8003562:	2802      	cmp	r0, #2
 8003564:	d9f6      	bls.n	8003554 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003566:	2003      	movs	r0, #3
 8003568:	e064      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 800356a:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 800356c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800356e:	493d      	ldr	r1, [pc, #244]	; (8003664 <HAL_RCC_OscConfig+0x53c>)
 8003570:	400b      	ands	r3, r1
 8003572:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8003574:	f7fe fdce 	bl	8002114 <HAL_GetTick>
 8003578:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	039b      	lsls	r3, r3, #14
 8003580:	d5d4      	bpl.n	800352c <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003582:	f7fe fdc7 	bl	8002114 <HAL_GetTick>
 8003586:	1b40      	subs	r0, r0, r5
 8003588:	2802      	cmp	r0, #2
 800358a:	d9f6      	bls.n	800357a <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
 800358e:	e051      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 8003590:	4a31      	ldr	r2, [pc, #196]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	4932      	ldr	r1, [pc, #200]	; (8003660 <HAL_RCC_OscConfig+0x538>)
 8003596:	400b      	ands	r3, r1
 8003598:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800359a:	f7fe fdbb 	bl	8002114 <HAL_GetTick>
 800359e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	d506      	bpl.n	80035b6 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fdb4 	bl	8002114 <HAL_GetTick>
 80035ac:	1b40      	subs	r0, r0, r5
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d9f6      	bls.n	80035a0 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 80035b2:	2003      	movs	r0, #3
 80035b4:	e03e      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	210f      	movs	r1, #15
 80035bc:	438a      	bics	r2, r1
 80035be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035c0:	430a      	orrs	r2, r1
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4928      	ldr	r1, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x540>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80035ce:	4301      	orrs	r1, r0
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0452      	lsls	r2, r2, #17
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035de:	f7fe fd99 	bl	8002114 <HAL_GetTick>
 80035e2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	d406      	bmi.n	80035fa <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fd92 	bl	8002114 <HAL_GetTick>
 80035f0:	1b00      	subs	r0, r0, r4
 80035f2:	2802      	cmp	r0, #2
 80035f4:	d9f6      	bls.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 80035f6:	2003      	movs	r0, #3
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2000      	movs	r0, #0
 80035fc:	e01a      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
 80035fe:	2000      	movs	r0, #0
 8003600:	e018      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003602:	2b01      	cmp	r3, #1
 8003604:	d020      	beq.n	8003648 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_RCC_OscConfig+0x530>)
 8003608:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 800360a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	4013      	ands	r3, r2
 8003612:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003614:	4283      	cmp	r3, r0
 8003616:	d119      	bne.n	800364c <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003618:	230f      	movs	r3, #15
 800361a:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800361e:	428b      	cmp	r3, r1
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003622:	23f0      	movs	r3, #240	; 0xf0
 8003624:	039b      	lsls	r3, r3, #14
 8003626:	401a      	ands	r2, r3
 8003628:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 800362e:	2000      	movs	r0, #0
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 8003632:	2001      	movs	r0, #1
}
 8003634:	b002      	add	sp, #8
 8003636:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
 800363a:	e7fb      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
 800363e:	e7f9      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e7f7      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 8003644:	2000      	movs	r0, #0
 8003646:	e7f5      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e7f3      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 800364c:	2001      	movs	r0, #1
 800364e:	e7f1      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
 8003650:	2001      	movs	r0, #1
 8003652:	e7ef      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
 8003654:	2001      	movs	r0, #1
 8003656:	e7ed      	b.n	8003634 <HAL_RCC_OscConfig+0x50c>
 8003658:	40021000 	.word	0x40021000
 800365c:	efffffff 	.word	0xefffffff
 8003660:	feffffff 	.word	0xfeffffff
 8003664:	fffeffff 	.word	0xfffeffff
 8003668:	ffc27fff 	.word	0xffc27fff

0800366c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003670:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003672:	230c      	movs	r3, #12
 8003674:	4013      	ands	r3, r2
 8003676:	2b08      	cmp	r3, #8
 8003678:	d007      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x1e>
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d029      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x66>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d001      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x1a>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003682:	4816      	ldr	r0, [pc, #88]	; (80036dc <HAL_RCC_GetSysClockFreq+0x70>)
      break;
    }
  }
  return sysclockfreq;
}
 8003684:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8003686:	4816      	ldr	r0, [pc, #88]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x74>)
 8003688:	e7fc      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x18>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800368a:	0c91      	lsrs	r1, r2, #18
 800368c:	230f      	movs	r3, #15
 800368e:	4019      	ands	r1, r3
 8003690:	4814      	ldr	r0, [pc, #80]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003692:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003694:	4910      	ldr	r1, [pc, #64]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003696:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003698:	400b      	ands	r3, r1
 800369a:	4913      	ldr	r1, [pc, #76]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x7c>)
 800369c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800369e:	23c0      	movs	r3, #192	; 0xc0
 80036a0:	025b      	lsls	r3, r3, #9
 80036a2:	401a      	ands	r2, r3
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	025b      	lsls	r3, r3, #9
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d008      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x52>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80036ac:	23c0      	movs	r3, #192	; 0xc0
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d009      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <HAL_RCC_GetSysClockFreq+0x70>)
 80036b6:	f7fd fd31 	bl	800111c <__udivsi3>
 80036ba:	4360      	muls	r0, r4
 80036bc:	e7e2      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x18>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036be:	4808      	ldr	r0, [pc, #32]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80036c0:	f7fd fd2c 	bl	800111c <__udivsi3>
 80036c4:	4360      	muls	r0, r4
 80036c6:	e7dd      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x18>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036c8:	4808      	ldr	r0, [pc, #32]	; (80036ec <HAL_RCC_GetSysClockFreq+0x80>)
 80036ca:	f7fd fd27 	bl	800111c <__udivsi3>
 80036ce:	4360      	muls	r0, r4
 80036d0:	e7d8      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSI48_VALUE;
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <HAL_RCC_GetSysClockFreq+0x80>)
 80036d4:	e7d6      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x18>
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	00b71b00 	.word	0x00b71b00
 80036e4:	080056f8 	.word	0x080056f8
 80036e8:	08005708 	.word	0x08005708
 80036ec:	02dc6c00 	.word	0x02dc6c00

080036f0 <HAL_RCC_ClockConfig>:
{
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	0004      	movs	r4, r0
 80036f4:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d100      	bne.n	80036fc <HAL_RCC_ClockConfig+0xc>
 80036fa:	e086      	b.n	800380a <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_ClockConfig+0x12c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2301      	movs	r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	428b      	cmp	r3, r1
 8003706:	d20a      	bcs.n	800371e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <HAL_RCC_ClockConfig+0x12c>)
 800370a:	680b      	ldr	r3, [r1, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	4393      	bics	r3, r2
 8003710:	432b      	orrs	r3, r5
 8003712:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	401a      	ands	r2, r3
 8003718:	42aa      	cmp	r2, r5
 800371a:	d000      	beq.n	800371e <HAL_RCC_ClockConfig+0x2e>
 800371c:	e077      	b.n	800380e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079a      	lsls	r2, r3, #30
 8003722:	d50e      	bpl.n	8003742 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	075b      	lsls	r3, r3, #29
 8003726:	d505      	bpl.n	8003734 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003728:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 800372a:	6851      	ldr	r1, [r2, #4]
 800372c:	23e0      	movs	r3, #224	; 0xe0
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	430b      	orrs	r3, r1
 8003732:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 8003736:	6853      	ldr	r3, [r2, #4]
 8003738:	21f0      	movs	r1, #240	; 0xf0
 800373a:	438b      	bics	r3, r1
 800373c:	68a1      	ldr	r1, [r4, #8]
 800373e:	430b      	orrs	r3, r1
 8003740:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07db      	lsls	r3, r3, #31
 8003746:	d535      	bpl.n	80037b4 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	2b02      	cmp	r3, #2
 8003750:	d024      	beq.n	800379c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003752:	2b03      	cmp	r3, #3
 8003754:	d028      	beq.n	80037a8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	0792      	lsls	r2, r2, #30
 800375c:	d405      	bmi.n	800376a <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
 8003760:	e052      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	0392      	lsls	r2, r2, #14
 8003768:	d553      	bpl.n	8003812 <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	492d      	ldr	r1, [pc, #180]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 800376c:	684a      	ldr	r2, [r1, #4]
 800376e:	2003      	movs	r0, #3
 8003770:	4382      	bics	r2, r0
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003776:	f7fe fccd 	bl	8002114 <HAL_GetTick>
 800377a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	220c      	movs	r2, #12
 8003782:	401a      	ands	r2, r3
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fcc2 	bl	8002114 <HAL_GetTick>
 8003790:	1b80      	subs	r0, r0, r6
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_ClockConfig+0x134>)
 8003794:	4298      	cmp	r0, r3
 8003796:	d9f1      	bls.n	800377c <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8003798:	2003      	movs	r0, #3
 800379a:	e035      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	0192      	lsls	r2, r2, #6
 80037a2:	d4e2      	bmi.n	800376a <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
 80037a6:	e02f      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 80037aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ac:	0392      	lsls	r2, r2, #14
 80037ae:	d4dc      	bmi.n	800376a <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	e029      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_ClockConfig+0x12c>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2301      	movs	r3, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	42ab      	cmp	r3, r5
 80037be:	d909      	bls.n	80037d4 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c0:	4916      	ldr	r1, [pc, #88]	; (800381c <HAL_RCC_ClockConfig+0x12c>)
 80037c2:	680b      	ldr	r3, [r1, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4393      	bics	r3, r2
 80037c8:	432b      	orrs	r3, r5
 80037ca:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	401a      	ands	r2, r3
 80037d0:	42aa      	cmp	r2, r5
 80037d2:	d120      	bne.n	8003816 <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	075b      	lsls	r3, r3, #29
 80037d8:	d506      	bpl.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 80037dc:	6853      	ldr	r3, [r2, #4]
 80037de:	4912      	ldr	r1, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x138>)
 80037e0:	400b      	ands	r3, r1
 80037e2:	68e1      	ldr	r1, [r4, #12]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037e8:	f7ff ff40 	bl	800366c <HAL_RCC_GetSysClockFreq>
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_ClockConfig+0x130>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	0912      	lsrs	r2, r2, #4
 80037f2:	230f      	movs	r3, #15
 80037f4:	4013      	ands	r3, r2
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_RCC_ClockConfig+0x13c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	40d8      	lsrs	r0, r3
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_ClockConfig+0x140>)
 80037fe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003800:	2003      	movs	r0, #3
 8003802:	f7fe fc43 	bl	800208c <HAL_InitTick>
  return HAL_OK;
 8003806:	2000      	movs	r0, #0
}
 8003808:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
 800380c:	e7fc      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 800380e:	2001      	movs	r0, #1
 8003810:	e7fa      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8003812:	2001      	movs	r0, #1
 8003814:	e7f8      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
 8003818:	e7f6      	b.n	8003808 <HAL_RCC_ClockConfig+0x118>
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	40022000 	.word	0x40022000
 8003820:	40021000 	.word	0x40021000
 8003824:	00001388 	.word	0x00001388
 8003828:	fffff8ff 	.word	0xfffff8ff
 800382c:	080056e0 	.word	0x080056e0
 8003830:	200000c4 	.word	0x200000c4

08003834 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <HAL_RCC_GetHCLKFreq+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
}
 8003838:	4770      	bx	lr
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	200000c4 	.word	0x200000c4

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003842:	f7ff fff7 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	0a12      	lsrs	r2, r2, #8
 800384c:	2307      	movs	r3, #7
 800384e:	4013      	ands	r3, r2
 8003850:	4a02      	ldr	r2, [pc, #8]	; (800385c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003852:	5cd3      	ldrb	r3, [r2, r3]
 8003854:	40d8      	lsrs	r0, r3
}    
 8003856:	bd10      	pop	{r4, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	080056f0 	.word	0x080056f0

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003866:	6803      	ldr	r3, [r0, #0]
 8003868:	03db      	lsls	r3, r3, #15
 800386a:	d537      	bpl.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386c:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	d467      	bmi.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4a4a      	ldr	r2, [pc, #296]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003876:	69d1      	ldr	r1, [r2, #28]
 8003878:	2080      	movs	r0, #128	; 0x80
 800387a:	0540      	lsls	r0, r0, #21
 800387c:	4301      	orrs	r1, r0
 800387e:	61d1      	str	r1, [r2, #28]
 8003880:	69d3      	ldr	r3, [r2, #28]
 8003882:	4003      	ands	r3, r0
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003888:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	05db      	lsls	r3, r3, #23
 8003890:	d55a      	bpl.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003892:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	23c0      	movs	r3, #192	; 0xc0
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	0011      	movs	r1, r2
 800389c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800389e:	421a      	tst	r2, r3
 80038a0:	d013      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	4013      	ands	r3, r2
 80038a6:	428b      	cmp	r3, r1
 80038a8:	d00f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038aa:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038ac:	6a18      	ldr	r0, [r3, #32]
 80038ae:	4a3e      	ldr	r2, [pc, #248]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80038b0:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b2:	6a1e      	ldr	r6, [r3, #32]
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	0249      	lsls	r1, r1, #9
 80038b8:	4331      	orrs	r1, r6
 80038ba:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038bc:	6a19      	ldr	r1, [r3, #32]
 80038be:	4e3b      	ldr	r6, [pc, #236]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c0:	4031      	ands	r1, r6
 80038c2:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c6:	07c3      	lsls	r3, r0, #31
 80038c8:	d452      	bmi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ca:	4a35      	ldr	r2, [pc, #212]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038cc:	6a13      	ldr	r3, [r2, #32]
 80038ce:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80038d0:	400b      	ands	r3, r1
 80038d2:	6861      	ldr	r1, [r4, #4]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038d8:	2d01      	cmp	r5, #1
 80038da:	d058      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07db      	lsls	r3, r3, #31
 80038e0:	d506      	bpl.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e2:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80038e6:	2103      	movs	r1, #3
 80038e8:	438b      	bics	r3, r1
 80038ea:	68a1      	ldr	r1, [r4, #8]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	079b      	lsls	r3, r3, #30
 80038f4:	d506      	bpl.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80038fa:	492d      	ldr	r1, [pc, #180]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038fc:	400b      	ands	r3, r1
 80038fe:	68e1      	ldr	r1, [r4, #12]
 8003900:	430b      	orrs	r3, r1
 8003902:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	069b      	lsls	r3, r3, #26
 8003908:	d506      	bpl.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800390c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800390e:	2110      	movs	r1, #16
 8003910:	438b      	bics	r3, r1
 8003912:	6921      	ldr	r1, [r4, #16]
 8003914:	430b      	orrs	r3, r1
 8003916:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	039b      	lsls	r3, r3, #14
 800391c:	d506      	bpl.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391e:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003920:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	438b      	bics	r3, r1
 8003926:	69a1      	ldr	r1, [r4, #24]
 8003928:	430b      	orrs	r3, r1
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	055b      	lsls	r3, r3, #21
 8003930:	d532      	bpl.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003932:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003936:	2140      	movs	r1, #64	; 0x40
 8003938:	438b      	bics	r3, r1
 800393a:	6961      	ldr	r1, [r4, #20]
 800393c:	430b      	orrs	r3, r1
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003940:	2000      	movs	r0, #0
 8003942:	e02a      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 8003944:	2500      	movs	r5, #0
 8003946:	e7a0      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800394a:	6811      	ldr	r1, [r2, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	430b      	orrs	r3, r1
 8003952:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003954:	f7fe fbde 	bl	8002114 <HAL_GetTick>
 8003958:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	05db      	lsls	r3, r3, #23
 8003960:	d497      	bmi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fe fbd7 	bl	8002114 <HAL_GetTick>
 8003966:	1b80      	subs	r0, r0, r6
 8003968:	2864      	cmp	r0, #100	; 0x64
 800396a:	d9f6      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 800396c:	2003      	movs	r0, #3
 800396e:	e014      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8003970:	f7fe fbd0 	bl	8002114 <HAL_GetTick>
 8003974:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d4a5      	bmi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe fbc9 	bl	8002114 <HAL_GetTick>
 8003982:	1b80      	subs	r0, r0, r6
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003986:	4298      	cmp	r0, r3
 8003988:	d9f5      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 800398a:	2003      	movs	r0, #3
 800398c:	e005      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800398e:	69d3      	ldr	r3, [r2, #28]
 8003990:	4909      	ldr	r1, [pc, #36]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003992:	400b      	ands	r3, r1
 8003994:	61d3      	str	r3, [r2, #28]
 8003996:	e7a1      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8003998:	2000      	movs	r0, #0
}
 800399a:	b002      	add	sp, #8
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
 80039a8:	fffffcff 	.word	0xfffffcff
 80039ac:	fffeffff 	.word	0xfffeffff
 80039b0:	fffcffff 	.word	0xfffcffff
 80039b4:	00001388 	.word	0x00001388
 80039b8:	efffffff 	.word	0xefffffff

080039bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039be:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	2201      	movs	r2, #1
 80039c4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	680b      	ldr	r3, [r1, #0]
 80039cc:	4c12      	ldr	r4, [pc, #72]	; (8003a18 <UART_EndRxTransfer+0x5c>)
 80039ce:	4023      	ands	r3, r4
 80039d0:	600b      	str	r3, [r1, #0]
 80039d2:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	6801      	ldr	r1, [r0, #0]
 80039e0:	688b      	ldr	r3, [r1, #8]
 80039e2:	4393      	bics	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
 80039e6:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d006      	beq.n	80039fe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	2220      	movs	r2, #32
 80039f4:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	2300      	movs	r3, #0
 80039f8:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039fa:	6683      	str	r3, [r0, #104]	; 0x68
}
 80039fc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a06:	6802      	ldr	r2, [r0, #0]
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	3432      	adds	r4, #50	; 0x32
 8003a0c:	34ff      	adds	r4, #255	; 0xff
 8003a0e:	43a3      	bics	r3, r4
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	f381 8810 	msr	PRIMASK, r1
}
 8003a16:	e7eb      	b.n	80039f0 <UART_EndRxTransfer+0x34>
 8003a18:	fffffedf 	.word	0xfffffedf

08003a1c <UART_SetConfig>:
{
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a20:	6883      	ldr	r3, [r0, #8]
 8003a22:	6902      	ldr	r2, [r0, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	6942      	ldr	r2, [r0, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	69c2      	ldr	r2, [r0, #28]
 8003a2c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2e:	6801      	ldr	r1, [r0, #0]
 8003a30:	680a      	ldr	r2, [r1, #0]
 8003a32:	4864      	ldr	r0, [pc, #400]	; (8003bc4 <UART_SetConfig+0x1a8>)
 8003a34:	4002      	ands	r2, r0
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	6853      	ldr	r3, [r2, #4]
 8003a3e:	4962      	ldr	r1, [pc, #392]	; (8003bc8 <UART_SetConfig+0x1ac>)
 8003a40:	400b      	ands	r3, r1
 8003a42:	68e1      	ldr	r1, [r4, #12]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003a48:	6a22      	ldr	r2, [r4, #32]
 8003a4a:	69a3      	ldr	r3, [r4, #24]
 8003a4c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	688b      	ldr	r3, [r1, #8]
 8003a52:	485e      	ldr	r0, [pc, #376]	; (8003bcc <UART_SetConfig+0x1b0>)
 8003a54:	4003      	ands	r3, r0
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <UART_SetConfig+0x1b4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00a      	beq.n	8003a78 <UART_SetConfig+0x5c>
 8003a62:	4a5c      	ldr	r2, [pc, #368]	; (8003bd4 <UART_SetConfig+0x1b8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d038      	beq.n	8003ada <UART_SetConfig+0xbe>
 8003a68:	4a5b      	ldr	r2, [pc, #364]	; (8003bd8 <UART_SetConfig+0x1bc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d05f      	beq.n	8003b2e <UART_SetConfig+0x112>
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <UART_SetConfig+0x1c0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04a      	beq.n	8003b0a <UART_SetConfig+0xee>
 8003a74:	2310      	movs	r3, #16
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x74>
 8003a78:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <UART_SetConfig+0x1c4>)
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d044      	beq.n	8003b0e <UART_SetConfig+0xf2>
 8003a84:	d825      	bhi.n	8003ad2 <UART_SetConfig+0xb6>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d043      	beq.n	8003b12 <UART_SetConfig+0xf6>
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d143      	bne.n	8003b16 <UART_SetConfig+0xfa>
 8003a8e:	3303      	adds	r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a90:	69e0      	ldr	r0, [r4, #28]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	0212      	lsls	r2, r2, #8
 8003a96:	4290      	cmp	r0, r2
 8003a98:	d04b      	beq.n	8003b32 <UART_SetConfig+0x116>
    switch (clocksource)
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d100      	bne.n	8003aa0 <UART_SetConfig+0x84>
 8003a9e:	e089      	b.n	8003bb4 <UART_SetConfig+0x198>
 8003aa0:	d877      	bhi.n	8003b92 <UART_SetConfig+0x176>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <UART_SetConfig+0x8c>
 8003aa6:	e07e      	b.n	8003ba6 <UART_SetConfig+0x18a>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d170      	bne.n	8003b8e <UART_SetConfig+0x172>
 8003aac:	484d      	ldr	r0, [pc, #308]	; (8003be4 <UART_SetConfig+0x1c8>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	1818      	adds	r0, r3, r0
 8003ab4:	6861      	ldr	r1, [r4, #4]
 8003ab6:	f7fd fb31 	bl	800111c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aba:	0002      	movs	r2, r0
 8003abc:	3a10      	subs	r2, #16
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <UART_SetConfig+0x1cc>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d900      	bls.n	8003ac6 <UART_SetConfig+0xaa>
 8003ac4:	e07b      	b.n	8003bbe <UART_SetConfig+0x1a2>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0400      	lsls	r0, r0, #16
 8003aca:	0c00      	lsrs	r0, r0, #16
 8003acc:	60d8      	str	r0, [r3, #12]
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e065      	b.n	8003b9e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d121      	bne.n	8003b1a <UART_SetConfig+0xfe>
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	e7da      	b.n	8003a90 <UART_SetConfig+0x74>
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <UART_SetConfig+0x1c4>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	22c0      	movs	r2, #192	; 0xc0
 8003ae0:	0292      	lsls	r2, r2, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0292      	lsls	r2, r2, #10
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <UART_SetConfig+0x102>
 8003aec:	d807      	bhi.n	8003afe <UART_SetConfig+0xe2>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <UART_SetConfig+0x106>
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	0252      	lsls	r2, r2, #9
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d115      	bne.n	8003b26 <UART_SetConfig+0x10a>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e7c8      	b.n	8003a90 <UART_SetConfig+0x74>
 8003afe:	22c0      	movs	r2, #192	; 0xc0
 8003b00:	0292      	lsls	r2, r2, #10
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d111      	bne.n	8003b2a <UART_SetConfig+0x10e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e7c2      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e7c0      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	e7be      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b12:	2300      	movs	r3, #0
 8003b14:	e7bc      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b16:	2310      	movs	r3, #16
 8003b18:	e7ba      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	e7b8      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	e7b6      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b22:	2300      	movs	r3, #0
 8003b24:	e7b4      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b26:	2310      	movs	r3, #16
 8003b28:	e7b2      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	e7b0      	b.n	8003a90 <UART_SetConfig+0x74>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e7ae      	b.n	8003a90 <UART_SetConfig+0x74>
    switch (clocksource)
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d028      	beq.n	8003b88 <UART_SetConfig+0x16c>
 8003b36:	d81d      	bhi.n	8003b74 <UART_SetConfig+0x158>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01f      	beq.n	8003b7c <UART_SetConfig+0x160>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d117      	bne.n	8003b70 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4828      	ldr	r0, [pc, #160]	; (8003be4 <UART_SetConfig+0x1c8>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b42:	0040      	lsls	r0, r0, #1
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	18c0      	adds	r0, r0, r3
 8003b4a:	6861      	ldr	r1, [r4, #4]
 8003b4c:	f7fd fae6 	bl	800111c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b50:	0002      	movs	r2, r0
 8003b52:	3a10      	subs	r2, #16
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <UART_SetConfig+0x1cc>)
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d82f      	bhi.n	8003bba <UART_SetConfig+0x19e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b5a:	b282      	uxth	r2, r0
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b60:	0840      	lsrs	r0, r0, #1
 8003b62:	3b08      	subs	r3, #8
 8003b64:	4018      	ands	r0, r3
 8003b66:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	60d8      	str	r0, [r3, #12]
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e016      	b.n	8003b9e <UART_SetConfig+0x182>
    switch (clocksource)
 8003b70:	2001      	movs	r0, #1
 8003b72:	e014      	b.n	8003b9e <UART_SetConfig+0x182>
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d0e4      	beq.n	8003b42 <UART_SetConfig+0x126>
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e010      	b.n	8003b9e <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7ff fe60 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d1de      	bne.n	8003b42 <UART_SetConfig+0x126>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e00a      	b.n	8003b9e <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b88:	f7ff fd70 	bl	800366c <HAL_RCC_GetSysClockFreq>
        break;
 8003b8c:	e7f8      	b.n	8003b80 <UART_SetConfig+0x164>
    switch (clocksource)
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e005      	b.n	8003b9e <UART_SetConfig+0x182>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d102      	bne.n	8003b9c <UART_SetConfig+0x180>
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	2080      	movs	r0, #128	; 0x80
 8003b98:	0200      	lsls	r0, r0, #8
 8003b9a:	e788      	b.n	8003aae <UART_SetConfig+0x92>
    switch (clocksource)
 8003b9c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003ba2:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003ba4:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba6:	f7ff fe4b 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d000      	beq.n	8003bb0 <UART_SetConfig+0x194>
 8003bae:	e77e      	b.n	8003aae <UART_SetConfig+0x92>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e7f4      	b.n	8003b9e <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb4:	f7ff fd5a 	bl	800366c <HAL_RCC_GetSysClockFreq>
        break;
 8003bb8:	e7f7      	b.n	8003baa <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003bba:	2001      	movs	r0, #1
 8003bbc:	e7ef      	b.n	8003b9e <UART_SetConfig+0x182>
        ret = HAL_ERROR;
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	e7ed      	b.n	8003b9e <UART_SetConfig+0x182>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	efff69f3 	.word	0xefff69f3
 8003bc8:	ffffcfff 	.word	0xffffcfff
 8003bcc:	fffff4ff 	.word	0xfffff4ff
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	40004c00 	.word	0x40004c00
 8003be0:	40021000 	.word	0x40021000
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	0000ffef 	.word	0x0000ffef

08003bec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003bee:	07db      	lsls	r3, r3, #31
 8003bf0:	d506      	bpl.n	8003c00 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf2:	6802      	ldr	r2, [r0, #0]
 8003bf4:	6853      	ldr	r3, [r2, #4]
 8003bf6:	492c      	ldr	r1, [pc, #176]	; (8003ca8 <UART_AdvFeatureConfig+0xbc>)
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c02:	079b      	lsls	r3, r3, #30
 8003c04:	d506      	bpl.n	8003c14 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c06:	6802      	ldr	r2, [r0, #0]
 8003c08:	6853      	ldr	r3, [r2, #4]
 8003c0a:	4928      	ldr	r1, [pc, #160]	; (8003cac <UART_AdvFeatureConfig+0xc0>)
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c16:	075b      	lsls	r3, r3, #29
 8003c18:	d506      	bpl.n	8003c28 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1a:	6802      	ldr	r2, [r0, #0]
 8003c1c:	6853      	ldr	r3, [r2, #4]
 8003c1e:	4924      	ldr	r1, [pc, #144]	; (8003cb0 <UART_AdvFeatureConfig+0xc4>)
 8003c20:	400b      	ands	r3, r1
 8003c22:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c2a:	071b      	lsls	r3, r3, #28
 8003c2c:	d506      	bpl.n	8003c3c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c2e:	6802      	ldr	r2, [r0, #0]
 8003c30:	6853      	ldr	r3, [r2, #4]
 8003c32:	4920      	ldr	r1, [pc, #128]	; (8003cb4 <UART_AdvFeatureConfig+0xc8>)
 8003c34:	400b      	ands	r3, r1
 8003c36:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c3e:	06db      	lsls	r3, r3, #27
 8003c40:	d506      	bpl.n	8003c50 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c42:	6802      	ldr	r2, [r0, #0]
 8003c44:	6893      	ldr	r3, [r2, #8]
 8003c46:	491c      	ldr	r1, [pc, #112]	; (8003cb8 <UART_AdvFeatureConfig+0xcc>)
 8003c48:	400b      	ands	r3, r1
 8003c4a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c52:	069b      	lsls	r3, r3, #26
 8003c54:	d506      	bpl.n	8003c64 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c56:	6802      	ldr	r2, [r0, #0]
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	4918      	ldr	r1, [pc, #96]	; (8003cbc <UART_AdvFeatureConfig+0xd0>)
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c66:	065b      	lsls	r3, r3, #25
 8003c68:	d50b      	bpl.n	8003c82 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c6a:	6802      	ldr	r2, [r0, #0]
 8003c6c:	6853      	ldr	r3, [r2, #4]
 8003c6e:	4914      	ldr	r1, [pc, #80]	; (8003cc0 <UART_AdvFeatureConfig+0xd4>)
 8003c70:	400b      	ands	r3, r1
 8003c72:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	035b      	lsls	r3, r3, #13
 8003c7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	d506      	bpl.n	8003c96 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c88:	6802      	ldr	r2, [r0, #0]
 8003c8a:	6853      	ldr	r3, [r2, #4]
 8003c8c:	490d      	ldr	r1, [pc, #52]	; (8003cc4 <UART_AdvFeatureConfig+0xd8>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]
}
 8003c96:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c98:	6802      	ldr	r2, [r0, #0]
 8003c9a:	6853      	ldr	r3, [r2, #4]
 8003c9c:	490a      	ldr	r1, [pc, #40]	; (8003cc8 <UART_AdvFeatureConfig+0xdc>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6053      	str	r3, [r2, #4]
 8003ca6:	e7ec      	b.n	8003c82 <UART_AdvFeatureConfig+0x96>
 8003ca8:	fffdffff 	.word	0xfffdffff
 8003cac:	fffeffff 	.word	0xfffeffff
 8003cb0:	fffbffff 	.word	0xfffbffff
 8003cb4:	ffff7fff 	.word	0xffff7fff
 8003cb8:	ffffefff 	.word	0xffffefff
 8003cbc:	ffffdfff 	.word	0xffffdfff
 8003cc0:	ffefffff 	.word	0xffefffff
 8003cc4:	fff7ffff 	.word	0xfff7ffff
 8003cc8:	ff9fffff 	.word	0xff9fffff

08003ccc <UART_WaitOnFlagUntilTimeout>:
{
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	46ce      	mov	lr, r9
 8003cd0:	4647      	mov	r7, r8
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	0006      	movs	r6, r0
 8003cd6:	000d      	movs	r5, r1
 8003cd8:	0017      	movs	r7, r2
 8003cda:	4699      	mov	r9, r3
 8003cdc:	9b08      	ldr	r3, [sp, #32]
 8003cde:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	69dc      	ldr	r4, [r3, #28]
 8003ce4:	402c      	ands	r4, r5
 8003ce6:	1b64      	subs	r4, r4, r5
 8003ce8:	4263      	negs	r3, r4
 8003cea:	415c      	adcs	r4, r3
 8003cec:	42bc      	cmp	r4, r7
 8003cee:	d12f      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	d0f4      	beq.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fe fa0d 	bl	8002114 <HAL_GetTick>
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1ac0      	subs	r0, r0, r3
 8003cfe:	4540      	cmp	r0, r8
 8003d00:	d82b      	bhi.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8e>
 8003d02:	4643      	mov	r3, r8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d02a      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d08:	6833      	ldr	r3, [r6, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	0752      	lsls	r2, r2, #29
 8003d0e:	d5e7      	bpl.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	0712      	lsls	r2, r2, #28
 8003d14:	d410      	bmi.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	0512      	lsls	r2, r2, #20
 8003d1a:	d5e1      	bpl.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003d22:	0030      	movs	r0, r6
 8003d24:	f7ff fe4a 	bl	80039bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d28:	2384      	movs	r3, #132	; 0x84
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8003d2e:	3b0c      	subs	r3, #12
 8003d30:	2200      	movs	r2, #0
 8003d32:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8003d34:	2003      	movs	r0, #3
 8003d36:	e00c      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x86>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d38:	2408      	movs	r4, #8
 8003d3a:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8003d3c:	0030      	movs	r0, r6
 8003d3e:	f7ff fe3d 	bl	80039bc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d42:	2384      	movs	r3, #132	; 0x84
 8003d44:	50f4      	str	r4, [r6, r3]
           __HAL_UNLOCK(huart);
 8003d46:	3b0c      	subs	r3, #12
 8003d48:	2200      	movs	r2, #0
 8003d4a:	54f2      	strb	r2, [r6, r3]
           return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	e000      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x86>
  return HAL_OK;
 8003d50:	2000      	movs	r0, #0
}
 8003d52:	bcc0      	pop	{r6, r7}
 8003d54:	46b9      	mov	r9, r7
 8003d56:	46b0      	mov	r8, r6
 8003d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	e7f9      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x86>
 8003d5e:	2003      	movs	r0, #3
 8003d60:	e7f7      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x86>

08003d62 <HAL_UART_Transmit>:
{
 8003d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d64:	46c6      	mov	lr, r8
 8003d66:	b500      	push	{lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	0004      	movs	r4, r0
 8003d6c:	000d      	movs	r5, r1
 8003d6e:	4690      	mov	r8, r2
 8003d70:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003d72:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d162      	bne.n	8003e3e <HAL_UART_Transmit+0xdc>
    if ((pData == NULL) || (Size == 0U))
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d065      	beq.n	8003e48 <HAL_UART_Transmit+0xe6>
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	d065      	beq.n	8003e4c <HAL_UART_Transmit+0xea>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	6882      	ldr	r2, [r0, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d104      	bne.n	8003d94 <HAL_UART_Transmit+0x32>
 8003d8a:	6903      	ldr	r3, [r0, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d90:	07cb      	lsls	r3, r1, #31
 8003d92:	d45d      	bmi.n	8003e50 <HAL_UART_Transmit+0xee>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	2384      	movs	r3, #132	; 0x84
 8003d96:	2200      	movs	r2, #0
 8003d98:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9a:	3b63      	subs	r3, #99	; 0x63
 8003d9c:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003d9e:	f7fe f9b9 	bl	8002114 <HAL_GetTick>
 8003da2:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8003da4:	2350      	movs	r3, #80	; 0x50
 8003da6:	4642      	mov	r2, r8
 8003da8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8003daa:	3302      	adds	r3, #2
 8003dac:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	015b      	lsls	r3, r3, #5
 8003db2:	68a2      	ldr	r2, [r4, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	4698      	mov	r8, r3
 8003dbc:	e01a      	b.n	8003df4 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	e014      	b.n	8003df4 <HAL_UART_Transmit+0x92>
      pdata16bits = (const uint16_t *) pData;
 8003dca:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003dcc:	2500      	movs	r5, #0
 8003dce:	e011      	b.n	8003df4 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	e033      	b.n	8003e40 <HAL_UART_Transmit+0xde>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd8:	4643      	mov	r3, r8
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	0ddb      	lsrs	r3, r3, #23
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8003de4:	2302      	movs	r3, #2
 8003de6:	469c      	mov	ip, r3
 8003de8:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8003dea:	2352      	movs	r3, #82	; 0x52
 8003dec:	5ae2      	ldrh	r2, [r4, r3]
 8003dee:	3a01      	subs	r2, #1
 8003df0:	b292      	uxth	r2, r2
 8003df2:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8003df4:	2352      	movs	r3, #82	; 0x52
 8003df6:	5ae3      	ldrh	r3, [r4, r3]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00f      	beq.n	8003e1e <HAL_UART_Transmit+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	9600      	str	r6, [sp, #0]
 8003e00:	003b      	movs	r3, r7
 8003e02:	2200      	movs	r2, #0
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	0020      	movs	r0, r4
 8003e08:	f7ff ff60 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1df      	bne.n	8003dd0 <HAL_UART_Transmit+0x6e>
      if (pdata8bits == NULL)
 8003e10:	2d00      	cmp	r5, #0
 8003e12:	d0e1      	beq.n	8003dd8 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e14:	782b      	ldrb	r3, [r5, #0]
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	e7e5      	b.n	8003dea <HAL_UART_Transmit+0x88>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	9600      	str	r6, [sp, #0]
 8003e20:	003b      	movs	r3, r7
 8003e22:	2200      	movs	r2, #0
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	0020      	movs	r0, r4
 8003e28:	f7ff ff50 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d102      	bne.n	8003e36 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8003e30:	2320      	movs	r3, #32
 8003e32:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003e34:	e004      	b.n	8003e40 <HAL_UART_Transmit+0xde>
      huart->gState = HAL_UART_STATE_READY;
 8003e36:	2320      	movs	r3, #32
 8003e38:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003e3a:	2003      	movs	r0, #3
 8003e3c:	e000      	b.n	8003e40 <HAL_UART_Transmit+0xde>
    return HAL_BUSY;
 8003e3e:	2002      	movs	r0, #2
}
 8003e40:	b002      	add	sp, #8
 8003e42:	bc80      	pop	{r7}
 8003e44:	46b8      	mov	r8, r7
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
 8003e4a:	e7f9      	b.n	8003e40 <HAL_UART_Transmit+0xde>
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	e7f7      	b.n	8003e40 <HAL_UART_Transmit+0xde>
        return  HAL_ERROR;
 8003e50:	2001      	movs	r0, #1
 8003e52:	e7f5      	b.n	8003e40 <HAL_UART_Transmit+0xde>

08003e54 <UART_CheckIdleState>:
{
 8003e54:	b530      	push	{r4, r5, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	2384      	movs	r3, #132	; 0x84
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003e60:	f7fe f958 	bl	8002114 <HAL_GetTick>
 8003e64:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	0713      	lsls	r3, r2, #28
 8003e6c:	d40f      	bmi.n	8003e8e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	075b      	lsls	r3, r3, #29
 8003e74:	d429      	bmi.n	8003eca <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	2320      	movs	r3, #32
 8003e78:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e82:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003e84:	3a08      	subs	r2, #8
 8003e86:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003e88:	2000      	movs	r0, #0
}
 8003e8a:	b003      	add	sp, #12
 8003e8c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <UART_CheckIdleState+0xc8>)
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	0003      	movs	r3, r0
 8003e96:	2200      	movs	r2, #0
 8003e98:	0389      	lsls	r1, r1, #14
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f7ff ff16 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d0e4      	beq.n	8003e6e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	2080      	movs	r0, #128	; 0x80
 8003eb4:	4383      	bics	r3, r0
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003ec0:	3358      	adds	r3, #88	; 0x58
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003ec6:	387d      	subs	r0, #125	; 0x7d
 8003ec8:	e7df      	b.n	8003e8a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <UART_CheckIdleState+0xc8>)
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	002b      	movs	r3, r5
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	03c9      	lsls	r1, r1, #15
 8003ed6:	0020      	movs	r0, r4
 8003ed8:	f7ff fef8 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0ca      	beq.n	8003e76 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	680b      	ldr	r3, [r1, #0]
 8003eee:	4d0c      	ldr	r5, [pc, #48]	; (8003f20 <UART_CheckIdleState+0xcc>)
 8003ef0:	402b      	ands	r3, r5
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	6821      	ldr	r1, [r4, #0]
 8003f02:	688b      	ldr	r3, [r1, #8]
 8003f04:	4393      	bics	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
 8003f08:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	321f      	adds	r2, #31
 8003f10:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003f12:	3b08      	subs	r3, #8
 8003f14:	2200      	movs	r2, #0
 8003f16:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003f18:	2003      	movs	r0, #3
 8003f1a:	e7b6      	b.n	8003e8a <UART_CheckIdleState+0x36>
 8003f1c:	01ffffff 	.word	0x01ffffff
 8003f20:	fffffedf 	.word	0xfffffedf

08003f24 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	0004      	movs	r4, r0
 8003f28:	000f      	movs	r7, r1
 8003f2a:	0016      	movs	r6, r2
 8003f2c:	001d      	movs	r5, r3
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d039      	beq.n	8003fa6 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02c      	beq.n	8003f92 <HAL_RS485Ex_Init+0x6e>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	2324      	movs	r3, #36	; 0x24
 8003f3a:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	438b      	bics	r3, r1
 8003f44:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f46:	0020      	movs	r0, r4
 8003f48:	f7ff fd68 	bl	8003a1c <UART_SetConfig>
 8003f4c:	2801      	cmp	r0, #1
 8003f4e:	d01f      	beq.n	8003f90 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d123      	bne.n	8003f9e <HAL_RS485Ex_Init+0x7a>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	6891      	ldr	r1, [r2, #8]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	01db      	lsls	r3, r3, #7
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_RS485Ex_Init+0x88>)
 8003f68:	4011      	ands	r1, r2
 8003f6a:	430f      	orrs	r7, r1
 8003f6c:	609f      	str	r7, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003f6e:	0576      	lsls	r6, r6, #21
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003f70:	042d      	lsls	r5, r5, #16
 8003f72:	4335      	orrs	r5, r6
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	681e      	ldr	r6, [r3, #0]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <HAL_RS485Ex_Init+0x8c>)
 8003f7a:	4016      	ands	r6, r2
 8003f7c:	4335      	orrs	r5, r6
 8003f7e:	601d      	str	r5, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	6813      	ldr	r3, [r2, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f7ff ff62 	bl	8003e54 <UART_CheckIdleState>
}
 8003f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8003f92:	3378      	adds	r3, #120	; 0x78
 8003f94:	2200      	movs	r2, #0
 8003f96:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003f98:	f7fe f818 	bl	8001fcc <HAL_UART_MspInit>
 8003f9c:	e7cc      	b.n	8003f38 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f7ff fe24 	bl	8003bec <UART_AdvFeatureConfig>
 8003fa4:	e7d7      	b.n	8003f56 <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e7f2      	b.n	8003f90 <HAL_RS485Ex_Init+0x6c>
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	ffff7fff 	.word	0xffff7fff
 8003fb0:	fc00ffff 	.word	0xfc00ffff

08003fb4 <__errno>:
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <__errno+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	200000d0 	.word	0x200000d0

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	4d0c      	ldr	r5, [pc, #48]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc6:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc8:	1b64      	subs	r4, r4, r5
 8003fca:	10a4      	asrs	r4, r4, #2
 8003fcc:	42a6      	cmp	r6, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	f001 f8a3 	bl	800511c <_init>
 8003fd6:	4d0a      	ldr	r5, [pc, #40]	; (8004000 <__libc_init_array+0x40>)
 8003fd8:	4c0a      	ldr	r4, [pc, #40]	; (8004004 <__libc_init_array+0x44>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	42a6      	cmp	r6, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	00b3      	lsls	r3, r6, #2
 8003fe6:	58eb      	ldr	r3, [r5, r3]
 8003fe8:	4798      	blx	r3
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	00b3      	lsls	r3, r6, #2
 8003ff0:	58eb      	ldr	r3, [r5, r3]
 8003ff2:	4798      	blx	r3
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	080057b0 	.word	0x080057b0
 8003ffc:	080057b0 	.word	0x080057b0
 8004000:	080057b0 	.word	0x080057b0
 8004004:	080057b4 	.word	0x080057b4

08004008 <memcmp>:
 8004008:	b530      	push	{r4, r5, lr}
 800400a:	2400      	movs	r4, #0
 800400c:	3901      	subs	r1, #1
 800400e:	42a2      	cmp	r2, r4
 8004010:	d101      	bne.n	8004016 <memcmp+0xe>
 8004012:	2000      	movs	r0, #0
 8004014:	e005      	b.n	8004022 <memcmp+0x1a>
 8004016:	5d03      	ldrb	r3, [r0, r4]
 8004018:	3401      	adds	r4, #1
 800401a:	5d0d      	ldrb	r5, [r1, r4]
 800401c:	42ab      	cmp	r3, r5
 800401e:	d0f6      	beq.n	800400e <memcmp+0x6>
 8004020:	1b58      	subs	r0, r3, r5
 8004022:	bd30      	pop	{r4, r5, pc}

08004024 <memcpy>:
 8004024:	2300      	movs	r3, #0
 8004026:	b510      	push	{r4, lr}
 8004028:	429a      	cmp	r2, r3
 800402a:	d100      	bne.n	800402e <memcpy+0xa>
 800402c:	bd10      	pop	{r4, pc}
 800402e:	5ccc      	ldrb	r4, [r1, r3]
 8004030:	54c4      	strb	r4, [r0, r3]
 8004032:	3301      	adds	r3, #1
 8004034:	e7f8      	b.n	8004028 <memcpy+0x4>

08004036 <memset>:
 8004036:	0003      	movs	r3, r0
 8004038:	1882      	adds	r2, r0, r2
 800403a:	4293      	cmp	r3, r2
 800403c:	d100      	bne.n	8004040 <memset+0xa>
 800403e:	4770      	bx	lr
 8004040:	7019      	strb	r1, [r3, #0]
 8004042:	3301      	adds	r3, #1
 8004044:	e7f9      	b.n	800403a <memset+0x4>
	...

08004048 <iprintf>:
 8004048:	b40f      	push	{r0, r1, r2, r3}
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <iprintf+0x30>)
 800404c:	b513      	push	{r0, r1, r4, lr}
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	2c00      	cmp	r4, #0
 8004052:	d005      	beq.n	8004060 <iprintf+0x18>
 8004054:	69a3      	ldr	r3, [r4, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <iprintf+0x18>
 800405a:	0020      	movs	r0, r4
 800405c:	f000 fa9c 	bl	8004598 <__sinit>
 8004060:	ab05      	add	r3, sp, #20
 8004062:	0020      	movs	r0, r4
 8004064:	9a04      	ldr	r2, [sp, #16]
 8004066:	68a1      	ldr	r1, [r4, #8]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	f000 fcaf 	bl	80049cc <_vfiprintf_r>
 800406e:	bc16      	pop	{r1, r2, r4}
 8004070:	bc08      	pop	{r3}
 8004072:	b004      	add	sp, #16
 8004074:	4718      	bx	r3
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	200000d0 	.word	0x200000d0

0800407c <_puts_r>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	0005      	movs	r5, r0
 8004080:	000e      	movs	r6, r1
 8004082:	2800      	cmp	r0, #0
 8004084:	d004      	beq.n	8004090 <_puts_r+0x14>
 8004086:	6983      	ldr	r3, [r0, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <_puts_r+0x14>
 800408c:	f000 fa84 	bl	8004598 <__sinit>
 8004090:	69ab      	ldr	r3, [r5, #24]
 8004092:	68ac      	ldr	r4, [r5, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <_puts_r+0x22>
 8004098:	0028      	movs	r0, r5
 800409a:	f000 fa7d 	bl	8004598 <__sinit>
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <_puts_r+0xd8>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d122      	bne.n	80040ea <_puts_r+0x6e>
 80040a4:	686c      	ldr	r4, [r5, #4]
 80040a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a8:	07db      	lsls	r3, r3, #31
 80040aa:	d405      	bmi.n	80040b8 <_puts_r+0x3c>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	059b      	lsls	r3, r3, #22
 80040b0:	d402      	bmi.n	80040b8 <_puts_r+0x3c>
 80040b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b4:	f000 fb11 	bl	80046da <__retarget_lock_acquire_recursive>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	071b      	lsls	r3, r3, #28
 80040bc:	d502      	bpl.n	80040c4 <_puts_r+0x48>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d129      	bne.n	8004118 <_puts_r+0x9c>
 80040c4:	0021      	movs	r1, r4
 80040c6:	0028      	movs	r0, r5
 80040c8:	f000 f8c0 	bl	800424c <__swsetup_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d023      	beq.n	8004118 <_puts_r+0x9c>
 80040d0:	2501      	movs	r5, #1
 80040d2:	426d      	negs	r5, r5
 80040d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d405      	bmi.n	80040e6 <_puts_r+0x6a>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	d402      	bmi.n	80040e6 <_puts_r+0x6a>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f000 fafb 	bl	80046dc <__retarget_lock_release_recursive>
 80040e6:	0028      	movs	r0, r5
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <_puts_r+0xdc>)
 80040ec:	429c      	cmp	r4, r3
 80040ee:	d101      	bne.n	80040f4 <_puts_r+0x78>
 80040f0:	68ac      	ldr	r4, [r5, #8]
 80040f2:	e7d8      	b.n	80040a6 <_puts_r+0x2a>
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <_puts_r+0xe0>)
 80040f6:	429c      	cmp	r4, r3
 80040f8:	d1d5      	bne.n	80040a6 <_puts_r+0x2a>
 80040fa:	68ec      	ldr	r4, [r5, #12]
 80040fc:	e7d3      	b.n	80040a6 <_puts_r+0x2a>
 80040fe:	3601      	adds	r6, #1
 8004100:	60a3      	str	r3, [r4, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	da04      	bge.n	8004110 <_puts_r+0x94>
 8004106:	69a2      	ldr	r2, [r4, #24]
 8004108:	429a      	cmp	r2, r3
 800410a:	dc16      	bgt.n	800413a <_puts_r+0xbe>
 800410c:	290a      	cmp	r1, #10
 800410e:	d014      	beq.n	800413a <_puts_r+0xbe>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	6022      	str	r2, [r4, #0]
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	7831      	ldrb	r1, [r6, #0]
 800411c:	3b01      	subs	r3, #1
 800411e:	2900      	cmp	r1, #0
 8004120:	d1ed      	bne.n	80040fe <_puts_r+0x82>
 8004122:	60a3      	str	r3, [r4, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da0f      	bge.n	8004148 <_puts_r+0xcc>
 8004128:	0028      	movs	r0, r5
 800412a:	0022      	movs	r2, r4
 800412c:	310a      	adds	r1, #10
 800412e:	f000 f837 	bl	80041a0 <__swbuf_r>
 8004132:	250a      	movs	r5, #10
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d1cd      	bne.n	80040d4 <_puts_r+0x58>
 8004138:	e7ca      	b.n	80040d0 <_puts_r+0x54>
 800413a:	0022      	movs	r2, r4
 800413c:	0028      	movs	r0, r5
 800413e:	f000 f82f 	bl	80041a0 <__swbuf_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d1e8      	bne.n	8004118 <_puts_r+0x9c>
 8004146:	e7c3      	b.n	80040d0 <_puts_r+0x54>
 8004148:	250a      	movs	r5, #10
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	6022      	str	r2, [r4, #0]
 8004150:	701d      	strb	r5, [r3, #0]
 8004152:	e7bf      	b.n	80040d4 <_puts_r+0x58>
 8004154:	0800573c 	.word	0x0800573c
 8004158:	0800575c 	.word	0x0800575c
 800415c:	0800571c 	.word	0x0800571c

08004160 <puts>:
 8004160:	b510      	push	{r4, lr}
 8004162:	4b03      	ldr	r3, [pc, #12]	; (8004170 <puts+0x10>)
 8004164:	0001      	movs	r1, r0
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	f7ff ff88 	bl	800407c <_puts_r>
 800416c:	bd10      	pop	{r4, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	200000d0 	.word	0x200000d0

08004174 <viprintf>:
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <viprintf+0x28>)
 8004176:	b570      	push	{r4, r5, r6, lr}
 8004178:	681c      	ldr	r4, [r3, #0]
 800417a:	0005      	movs	r5, r0
 800417c:	000e      	movs	r6, r1
 800417e:	2c00      	cmp	r4, #0
 8004180:	d005      	beq.n	800418e <viprintf+0x1a>
 8004182:	69a3      	ldr	r3, [r4, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <viprintf+0x1a>
 8004188:	0020      	movs	r0, r4
 800418a:	f000 fa05 	bl	8004598 <__sinit>
 800418e:	0033      	movs	r3, r6
 8004190:	002a      	movs	r2, r5
 8004192:	0020      	movs	r0, r4
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	f000 fc19 	bl	80049cc <_vfiprintf_r>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	200000d0 	.word	0x200000d0

080041a0 <__swbuf_r>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	0005      	movs	r5, r0
 80041a4:	000e      	movs	r6, r1
 80041a6:	0014      	movs	r4, r2
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d004      	beq.n	80041b6 <__swbuf_r+0x16>
 80041ac:	6983      	ldr	r3, [r0, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <__swbuf_r+0x16>
 80041b2:	f000 f9f1 	bl	8004598 <__sinit>
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <__swbuf_r+0xa0>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	d12e      	bne.n	800421a <__swbuf_r+0x7a>
 80041bc:	686c      	ldr	r4, [r5, #4]
 80041be:	69a3      	ldr	r3, [r4, #24]
 80041c0:	60a3      	str	r3, [r4, #8]
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	d532      	bpl.n	800422e <__swbuf_r+0x8e>
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02f      	beq.n	800422e <__swbuf_r+0x8e>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	6922      	ldr	r2, [r4, #16]
 80041d2:	b2f7      	uxtb	r7, r6
 80041d4:	1a98      	subs	r0, r3, r2
 80041d6:	6963      	ldr	r3, [r4, #20]
 80041d8:	b2f6      	uxtb	r6, r6
 80041da:	4283      	cmp	r3, r0
 80041dc:	dc05      	bgt.n	80041ea <__swbuf_r+0x4a>
 80041de:	0021      	movs	r1, r4
 80041e0:	0028      	movs	r0, r5
 80041e2:	f000 f937 	bl	8004454 <_fflush_r>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d127      	bne.n	800423a <__swbuf_r+0x9a>
 80041ea:	68a3      	ldr	r3, [r4, #8]
 80041ec:	3001      	adds	r0, #1
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60a3      	str	r3, [r4, #8]
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	6022      	str	r2, [r4, #0]
 80041f8:	701f      	strb	r7, [r3, #0]
 80041fa:	6963      	ldr	r3, [r4, #20]
 80041fc:	4283      	cmp	r3, r0
 80041fe:	d004      	beq.n	800420a <__swbuf_r+0x6a>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	07db      	lsls	r3, r3, #31
 8004204:	d507      	bpl.n	8004216 <__swbuf_r+0x76>
 8004206:	2e0a      	cmp	r6, #10
 8004208:	d105      	bne.n	8004216 <__swbuf_r+0x76>
 800420a:	0021      	movs	r1, r4
 800420c:	0028      	movs	r0, r5
 800420e:	f000 f921 	bl	8004454 <_fflush_r>
 8004212:	2800      	cmp	r0, #0
 8004214:	d111      	bne.n	800423a <__swbuf_r+0x9a>
 8004216:	0030      	movs	r0, r6
 8004218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <__swbuf_r+0xa4>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d101      	bne.n	8004224 <__swbuf_r+0x84>
 8004220:	68ac      	ldr	r4, [r5, #8]
 8004222:	e7cc      	b.n	80041be <__swbuf_r+0x1e>
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <__swbuf_r+0xa8>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d1c9      	bne.n	80041be <__swbuf_r+0x1e>
 800422a:	68ec      	ldr	r4, [r5, #12]
 800422c:	e7c7      	b.n	80041be <__swbuf_r+0x1e>
 800422e:	0021      	movs	r1, r4
 8004230:	0028      	movs	r0, r5
 8004232:	f000 f80b 	bl	800424c <__swsetup_r>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0c9      	beq.n	80041ce <__swbuf_r+0x2e>
 800423a:	2601      	movs	r6, #1
 800423c:	4276      	negs	r6, r6
 800423e:	e7ea      	b.n	8004216 <__swbuf_r+0x76>
 8004240:	0800573c 	.word	0x0800573c
 8004244:	0800575c 	.word	0x0800575c
 8004248:	0800571c 	.word	0x0800571c

0800424c <__swsetup_r>:
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <__swsetup_r+0xe0>)
 800424e:	b570      	push	{r4, r5, r6, lr}
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	0006      	movs	r6, r0
 8004254:	000c      	movs	r4, r1
 8004256:	2d00      	cmp	r5, #0
 8004258:	d005      	beq.n	8004266 <__swsetup_r+0x1a>
 800425a:	69ab      	ldr	r3, [r5, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <__swsetup_r+0x1a>
 8004260:	0028      	movs	r0, r5
 8004262:	f000 f999 	bl	8004598 <__sinit>
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <__swsetup_r+0xe4>)
 8004268:	429c      	cmp	r4, r3
 800426a:	d10f      	bne.n	800428c <__swsetup_r+0x40>
 800426c:	686c      	ldr	r4, [r5, #4]
 800426e:	230c      	movs	r3, #12
 8004270:	5ee2      	ldrsh	r2, [r4, r3]
 8004272:	b293      	uxth	r3, r2
 8004274:	0711      	lsls	r1, r2, #28
 8004276:	d42d      	bmi.n	80042d4 <__swsetup_r+0x88>
 8004278:	06d9      	lsls	r1, r3, #27
 800427a:	d411      	bmi.n	80042a0 <__swsetup_r+0x54>
 800427c:	2309      	movs	r3, #9
 800427e:	2001      	movs	r0, #1
 8004280:	6033      	str	r3, [r6, #0]
 8004282:	3337      	adds	r3, #55	; 0x37
 8004284:	4313      	orrs	r3, r2
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	4240      	negs	r0, r0
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <__swsetup_r+0xe8>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d101      	bne.n	8004296 <__swsetup_r+0x4a>
 8004292:	68ac      	ldr	r4, [r5, #8]
 8004294:	e7eb      	b.n	800426e <__swsetup_r+0x22>
 8004296:	4b28      	ldr	r3, [pc, #160]	; (8004338 <__swsetup_r+0xec>)
 8004298:	429c      	cmp	r4, r3
 800429a:	d1e8      	bne.n	800426e <__swsetup_r+0x22>
 800429c:	68ec      	ldr	r4, [r5, #12]
 800429e:	e7e6      	b.n	800426e <__swsetup_r+0x22>
 80042a0:	075b      	lsls	r3, r3, #29
 80042a2:	d513      	bpl.n	80042cc <__swsetup_r+0x80>
 80042a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a6:	2900      	cmp	r1, #0
 80042a8:	d008      	beq.n	80042bc <__swsetup_r+0x70>
 80042aa:	0023      	movs	r3, r4
 80042ac:	3344      	adds	r3, #68	; 0x44
 80042ae:	4299      	cmp	r1, r3
 80042b0:	d002      	beq.n	80042b8 <__swsetup_r+0x6c>
 80042b2:	0030      	movs	r0, r6
 80042b4:	f000 fa80 	bl	80047b8 <_free_r>
 80042b8:	2300      	movs	r3, #0
 80042ba:	6363      	str	r3, [r4, #52]	; 0x34
 80042bc:	2224      	movs	r2, #36	; 0x24
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	4393      	bics	r3, r2
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	2300      	movs	r3, #0
 80042c6:	6063      	str	r3, [r4, #4]
 80042c8:	6923      	ldr	r3, [r4, #16]
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	2308      	movs	r3, #8
 80042ce:	89a2      	ldrh	r2, [r4, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	6923      	ldr	r3, [r4, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <__swsetup_r+0xa6>
 80042da:	21a0      	movs	r1, #160	; 0xa0
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	0089      	lsls	r1, r1, #2
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	400b      	ands	r3, r1
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <__swsetup_r+0xa6>
 80042ea:	0021      	movs	r1, r4
 80042ec:	0030      	movs	r0, r6
 80042ee:	f000 fa1f 	bl	8004730 <__smakebuf_r>
 80042f2:	220c      	movs	r2, #12
 80042f4:	5ea3      	ldrsh	r3, [r4, r2]
 80042f6:	2001      	movs	r0, #1
 80042f8:	001a      	movs	r2, r3
 80042fa:	b299      	uxth	r1, r3
 80042fc:	4002      	ands	r2, r0
 80042fe:	4203      	tst	r3, r0
 8004300:	d00f      	beq.n	8004322 <__swsetup_r+0xd6>
 8004302:	2200      	movs	r2, #0
 8004304:	60a2      	str	r2, [r4, #8]
 8004306:	6962      	ldr	r2, [r4, #20]
 8004308:	4252      	negs	r2, r2
 800430a:	61a2      	str	r2, [r4, #24]
 800430c:	2000      	movs	r0, #0
 800430e:	6922      	ldr	r2, [r4, #16]
 8004310:	4282      	cmp	r2, r0
 8004312:	d1ba      	bne.n	800428a <__swsetup_r+0x3e>
 8004314:	060a      	lsls	r2, r1, #24
 8004316:	d5b8      	bpl.n	800428a <__swsetup_r+0x3e>
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	4313      	orrs	r3, r2
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	3801      	subs	r0, #1
 8004320:	e7b3      	b.n	800428a <__swsetup_r+0x3e>
 8004322:	0788      	lsls	r0, r1, #30
 8004324:	d400      	bmi.n	8004328 <__swsetup_r+0xdc>
 8004326:	6962      	ldr	r2, [r4, #20]
 8004328:	60a2      	str	r2, [r4, #8]
 800432a:	e7ef      	b.n	800430c <__swsetup_r+0xc0>
 800432c:	200000d0 	.word	0x200000d0
 8004330:	0800573c 	.word	0x0800573c
 8004334:	0800575c 	.word	0x0800575c
 8004338:	0800571c 	.word	0x0800571c

0800433c <__sflush_r>:
 800433c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433e:	898b      	ldrh	r3, [r1, #12]
 8004340:	0005      	movs	r5, r0
 8004342:	000c      	movs	r4, r1
 8004344:	071a      	lsls	r2, r3, #28
 8004346:	d45f      	bmi.n	8004408 <__sflush_r+0xcc>
 8004348:	684a      	ldr	r2, [r1, #4]
 800434a:	2a00      	cmp	r2, #0
 800434c:	dc04      	bgt.n	8004358 <__sflush_r+0x1c>
 800434e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004350:	2a00      	cmp	r2, #0
 8004352:	dc01      	bgt.n	8004358 <__sflush_r+0x1c>
 8004354:	2000      	movs	r0, #0
 8004356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004358:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800435a:	2f00      	cmp	r7, #0
 800435c:	d0fa      	beq.n	8004354 <__sflush_r+0x18>
 800435e:	2200      	movs	r2, #0
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	682e      	ldr	r6, [r5, #0]
 8004364:	602a      	str	r2, [r5, #0]
 8004366:	001a      	movs	r2, r3
 8004368:	0149      	lsls	r1, r1, #5
 800436a:	400a      	ands	r2, r1
 800436c:	420b      	tst	r3, r1
 800436e:	d034      	beq.n	80043da <__sflush_r+0x9e>
 8004370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	075b      	lsls	r3, r3, #29
 8004376:	d506      	bpl.n	8004386 <__sflush_r+0x4a>
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	1ac0      	subs	r0, r0, r3
 800437c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <__sflush_r+0x4a>
 8004382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004384:	1ac0      	subs	r0, r0, r3
 8004386:	0002      	movs	r2, r0
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	2300      	movs	r3, #0
 800438c:	0028      	movs	r0, r5
 800438e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004390:	47b8      	blx	r7
 8004392:	89a1      	ldrh	r1, [r4, #12]
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d106      	bne.n	80043a6 <__sflush_r+0x6a>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	2b1d      	cmp	r3, #29
 800439c:	d831      	bhi.n	8004402 <__sflush_r+0xc6>
 800439e:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <__sflush_r+0x114>)
 80043a0:	40da      	lsrs	r2, r3
 80043a2:	07d3      	lsls	r3, r2, #31
 80043a4:	d52d      	bpl.n	8004402 <__sflush_r+0xc6>
 80043a6:	2300      	movs	r3, #0
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	04cb      	lsls	r3, r1, #19
 80043b0:	d505      	bpl.n	80043be <__sflush_r+0x82>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	d102      	bne.n	80043bc <__sflush_r+0x80>
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d100      	bne.n	80043be <__sflush_r+0x82>
 80043bc:	6560      	str	r0, [r4, #84]	; 0x54
 80043be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043c0:	602e      	str	r6, [r5, #0]
 80043c2:	2900      	cmp	r1, #0
 80043c4:	d0c6      	beq.n	8004354 <__sflush_r+0x18>
 80043c6:	0023      	movs	r3, r4
 80043c8:	3344      	adds	r3, #68	; 0x44
 80043ca:	4299      	cmp	r1, r3
 80043cc:	d002      	beq.n	80043d4 <__sflush_r+0x98>
 80043ce:	0028      	movs	r0, r5
 80043d0:	f000 f9f2 	bl	80047b8 <_free_r>
 80043d4:	2000      	movs	r0, #0
 80043d6:	6360      	str	r0, [r4, #52]	; 0x34
 80043d8:	e7bd      	b.n	8004356 <__sflush_r+0x1a>
 80043da:	2301      	movs	r3, #1
 80043dc:	0028      	movs	r0, r5
 80043de:	6a21      	ldr	r1, [r4, #32]
 80043e0:	47b8      	blx	r7
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	d1c5      	bne.n	8004372 <__sflush_r+0x36>
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0c2      	beq.n	8004372 <__sflush_r+0x36>
 80043ec:	2b1d      	cmp	r3, #29
 80043ee:	d001      	beq.n	80043f4 <__sflush_r+0xb8>
 80043f0:	2b16      	cmp	r3, #22
 80043f2:	d101      	bne.n	80043f8 <__sflush_r+0xbc>
 80043f4:	602e      	str	r6, [r5, #0]
 80043f6:	e7ad      	b.n	8004354 <__sflush_r+0x18>
 80043f8:	2340      	movs	r3, #64	; 0x40
 80043fa:	89a2      	ldrh	r2, [r4, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	e7a9      	b.n	8004356 <__sflush_r+0x1a>
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	430b      	orrs	r3, r1
 8004406:	e7fa      	b.n	80043fe <__sflush_r+0xc2>
 8004408:	690f      	ldr	r7, [r1, #16]
 800440a:	2f00      	cmp	r7, #0
 800440c:	d0a2      	beq.n	8004354 <__sflush_r+0x18>
 800440e:	680a      	ldr	r2, [r1, #0]
 8004410:	600f      	str	r7, [r1, #0]
 8004412:	1bd2      	subs	r2, r2, r7
 8004414:	9201      	str	r2, [sp, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	079b      	lsls	r3, r3, #30
 800441a:	d100      	bne.n	800441e <__sflush_r+0xe2>
 800441c:	694a      	ldr	r2, [r1, #20]
 800441e:	60a2      	str	r2, [r4, #8]
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dc00      	bgt.n	8004428 <__sflush_r+0xec>
 8004426:	e795      	b.n	8004354 <__sflush_r+0x18>
 8004428:	003a      	movs	r2, r7
 800442a:	0028      	movs	r0, r5
 800442c:	9b01      	ldr	r3, [sp, #4]
 800442e:	6a21      	ldr	r1, [r4, #32]
 8004430:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004432:	47b0      	blx	r6
 8004434:	2800      	cmp	r0, #0
 8004436:	dc06      	bgt.n	8004446 <__sflush_r+0x10a>
 8004438:	2340      	movs	r3, #64	; 0x40
 800443a:	2001      	movs	r0, #1
 800443c:	89a2      	ldrh	r2, [r4, #12]
 800443e:	4240      	negs	r0, r0
 8004440:	4313      	orrs	r3, r2
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	e787      	b.n	8004356 <__sflush_r+0x1a>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	183f      	adds	r7, r7, r0
 800444a:	1a1b      	subs	r3, r3, r0
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	e7e7      	b.n	8004420 <__sflush_r+0xe4>
 8004450:	20400001 	.word	0x20400001

08004454 <_fflush_r>:
 8004454:	690b      	ldr	r3, [r1, #16]
 8004456:	b570      	push	{r4, r5, r6, lr}
 8004458:	0005      	movs	r5, r0
 800445a:	000c      	movs	r4, r1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <_fflush_r+0x12>
 8004460:	2500      	movs	r5, #0
 8004462:	0028      	movs	r0, r5
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	2800      	cmp	r0, #0
 8004468:	d004      	beq.n	8004474 <_fflush_r+0x20>
 800446a:	6983      	ldr	r3, [r0, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <_fflush_r+0x20>
 8004470:	f000 f892 	bl	8004598 <__sinit>
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <_fflush_r+0x74>)
 8004476:	429c      	cmp	r4, r3
 8004478:	d11b      	bne.n	80044b2 <_fflush_r+0x5e>
 800447a:	686c      	ldr	r4, [r5, #4]
 800447c:	220c      	movs	r2, #12
 800447e:	5ea3      	ldrsh	r3, [r4, r2]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ed      	beq.n	8004460 <_fflush_r+0xc>
 8004484:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004486:	07d2      	lsls	r2, r2, #31
 8004488:	d404      	bmi.n	8004494 <_fflush_r+0x40>
 800448a:	059b      	lsls	r3, r3, #22
 800448c:	d402      	bmi.n	8004494 <_fflush_r+0x40>
 800448e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004490:	f000 f923 	bl	80046da <__retarget_lock_acquire_recursive>
 8004494:	0028      	movs	r0, r5
 8004496:	0021      	movs	r1, r4
 8004498:	f7ff ff50 	bl	800433c <__sflush_r>
 800449c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800449e:	0005      	movs	r5, r0
 80044a0:	07db      	lsls	r3, r3, #31
 80044a2:	d4de      	bmi.n	8004462 <_fflush_r+0xe>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	059b      	lsls	r3, r3, #22
 80044a8:	d4db      	bmi.n	8004462 <_fflush_r+0xe>
 80044aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ac:	f000 f916 	bl	80046dc <__retarget_lock_release_recursive>
 80044b0:	e7d7      	b.n	8004462 <_fflush_r+0xe>
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <_fflush_r+0x78>)
 80044b4:	429c      	cmp	r4, r3
 80044b6:	d101      	bne.n	80044bc <_fflush_r+0x68>
 80044b8:	68ac      	ldr	r4, [r5, #8]
 80044ba:	e7df      	b.n	800447c <_fflush_r+0x28>
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <_fflush_r+0x7c>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	d1dc      	bne.n	800447c <_fflush_r+0x28>
 80044c2:	68ec      	ldr	r4, [r5, #12]
 80044c4:	e7da      	b.n	800447c <_fflush_r+0x28>
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	0800573c 	.word	0x0800573c
 80044cc:	0800575c 	.word	0x0800575c
 80044d0:	0800571c 	.word	0x0800571c

080044d4 <std>:
 80044d4:	2300      	movs	r3, #0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	0004      	movs	r4, r0
 80044da:	6003      	str	r3, [r0, #0]
 80044dc:	6043      	str	r3, [r0, #4]
 80044de:	6083      	str	r3, [r0, #8]
 80044e0:	8181      	strh	r1, [r0, #12]
 80044e2:	6643      	str	r3, [r0, #100]	; 0x64
 80044e4:	0019      	movs	r1, r3
 80044e6:	81c2      	strh	r2, [r0, #14]
 80044e8:	6103      	str	r3, [r0, #16]
 80044ea:	6143      	str	r3, [r0, #20]
 80044ec:	6183      	str	r3, [r0, #24]
 80044ee:	2208      	movs	r2, #8
 80044f0:	305c      	adds	r0, #92	; 0x5c
 80044f2:	f7ff fda0 	bl	8004036 <memset>
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x38>)
 80044f8:	6224      	str	r4, [r4, #32]
 80044fa:	6263      	str	r3, [r4, #36]	; 0x24
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <std+0x3c>)
 80044fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <std+0x40>)
 8004502:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <std+0x44>)
 8004506:	6323      	str	r3, [r4, #48]	; 0x30
 8004508:	bd10      	pop	{r4, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	08004f69 	.word	0x08004f69
 8004510:	08004f91 	.word	0x08004f91
 8004514:	08004fc9 	.word	0x08004fc9
 8004518:	08004ff5 	.word	0x08004ff5

0800451c <_cleanup_r>:
 800451c:	b510      	push	{r4, lr}
 800451e:	4902      	ldr	r1, [pc, #8]	; (8004528 <_cleanup_r+0xc>)
 8004520:	f000 f8ba 	bl	8004698 <_fwalk_reent>
 8004524:	bd10      	pop	{r4, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	08004455 	.word	0x08004455

0800452c <__sfmoreglue>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	2568      	movs	r5, #104	; 0x68
 8004530:	1e4a      	subs	r2, r1, #1
 8004532:	4355      	muls	r5, r2
 8004534:	000e      	movs	r6, r1
 8004536:	0029      	movs	r1, r5
 8004538:	3174      	adds	r1, #116	; 0x74
 800453a:	f000 f9a9 	bl	8004890 <_malloc_r>
 800453e:	1e04      	subs	r4, r0, #0
 8004540:	d008      	beq.n	8004554 <__sfmoreglue+0x28>
 8004542:	2100      	movs	r1, #0
 8004544:	002a      	movs	r2, r5
 8004546:	6001      	str	r1, [r0, #0]
 8004548:	6046      	str	r6, [r0, #4]
 800454a:	300c      	adds	r0, #12
 800454c:	60a0      	str	r0, [r4, #8]
 800454e:	3268      	adds	r2, #104	; 0x68
 8004550:	f7ff fd71 	bl	8004036 <memset>
 8004554:	0020      	movs	r0, r4
 8004556:	bd70      	pop	{r4, r5, r6, pc}

08004558 <__sfp_lock_acquire>:
 8004558:	b510      	push	{r4, lr}
 800455a:	4802      	ldr	r0, [pc, #8]	; (8004564 <__sfp_lock_acquire+0xc>)
 800455c:	f000 f8bd 	bl	80046da <__retarget_lock_acquire_recursive>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	20000391 	.word	0x20000391

08004568 <__sfp_lock_release>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4802      	ldr	r0, [pc, #8]	; (8004574 <__sfp_lock_release+0xc>)
 800456c:	f000 f8b6 	bl	80046dc <__retarget_lock_release_recursive>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	20000391 	.word	0x20000391

08004578 <__sinit_lock_acquire>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <__sinit_lock_acquire+0xc>)
 800457c:	f000 f8ad 	bl	80046da <__retarget_lock_acquire_recursive>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	20000392 	.word	0x20000392

08004588 <__sinit_lock_release>:
 8004588:	b510      	push	{r4, lr}
 800458a:	4802      	ldr	r0, [pc, #8]	; (8004594 <__sinit_lock_release+0xc>)
 800458c:	f000 f8a6 	bl	80046dc <__retarget_lock_release_recursive>
 8004590:	bd10      	pop	{r4, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	20000392 	.word	0x20000392

08004598 <__sinit>:
 8004598:	b513      	push	{r0, r1, r4, lr}
 800459a:	0004      	movs	r4, r0
 800459c:	f7ff ffec 	bl	8004578 <__sinit_lock_acquire>
 80045a0:	69a3      	ldr	r3, [r4, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <__sinit+0x14>
 80045a6:	f7ff ffef 	bl	8004588 <__sinit_lock_release>
 80045aa:	bd13      	pop	{r0, r1, r4, pc}
 80045ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80045ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80045b0:	6523      	str	r3, [r4, #80]	; 0x50
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <__sinit+0x68>)
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <__sinit+0x6c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d101      	bne.n	80045c4 <__sinit+0x2c>
 80045c0:	2301      	movs	r3, #1
 80045c2:	61a3      	str	r3, [r4, #24]
 80045c4:	0020      	movs	r0, r4
 80045c6:	f000 f81f 	bl	8004608 <__sfp>
 80045ca:	6060      	str	r0, [r4, #4]
 80045cc:	0020      	movs	r0, r4
 80045ce:	f000 f81b 	bl	8004608 <__sfp>
 80045d2:	60a0      	str	r0, [r4, #8]
 80045d4:	0020      	movs	r0, r4
 80045d6:	f000 f817 	bl	8004608 <__sfp>
 80045da:	2200      	movs	r2, #0
 80045dc:	2104      	movs	r1, #4
 80045de:	60e0      	str	r0, [r4, #12]
 80045e0:	6860      	ldr	r0, [r4, #4]
 80045e2:	f7ff ff77 	bl	80044d4 <std>
 80045e6:	2201      	movs	r2, #1
 80045e8:	2109      	movs	r1, #9
 80045ea:	68a0      	ldr	r0, [r4, #8]
 80045ec:	f7ff ff72 	bl	80044d4 <std>
 80045f0:	2202      	movs	r2, #2
 80045f2:	2112      	movs	r1, #18
 80045f4:	68e0      	ldr	r0, [r4, #12]
 80045f6:	f7ff ff6d 	bl	80044d4 <std>
 80045fa:	2301      	movs	r3, #1
 80045fc:	61a3      	str	r3, [r4, #24]
 80045fe:	e7d2      	b.n	80045a6 <__sinit+0xe>
 8004600:	08005718 	.word	0x08005718
 8004604:	0800451d 	.word	0x0800451d

08004608 <__sfp>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	0007      	movs	r7, r0
 800460c:	f7ff ffa4 	bl	8004558 <__sfp_lock_acquire>
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <__sfp+0x88>)
 8004612:	681e      	ldr	r6, [r3, #0]
 8004614:	69b3      	ldr	r3, [r6, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <__sfp+0x18>
 800461a:	0030      	movs	r0, r6
 800461c:	f7ff ffbc 	bl	8004598 <__sinit>
 8004620:	3648      	adds	r6, #72	; 0x48
 8004622:	68b4      	ldr	r4, [r6, #8]
 8004624:	6873      	ldr	r3, [r6, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	d504      	bpl.n	8004634 <__sfp+0x2c>
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <__sfp+0x6e>
 8004630:	6836      	ldr	r6, [r6, #0]
 8004632:	e7f6      	b.n	8004622 <__sfp+0x1a>
 8004634:	220c      	movs	r2, #12
 8004636:	5ea5      	ldrsh	r5, [r4, r2]
 8004638:	2d00      	cmp	r5, #0
 800463a:	d11a      	bne.n	8004672 <__sfp+0x6a>
 800463c:	0020      	movs	r0, r4
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <__sfp+0x8c>)
 8004640:	3058      	adds	r0, #88	; 0x58
 8004642:	60e3      	str	r3, [r4, #12]
 8004644:	6665      	str	r5, [r4, #100]	; 0x64
 8004646:	f000 f847 	bl	80046d8 <__retarget_lock_init_recursive>
 800464a:	f7ff ff8d 	bl	8004568 <__sfp_lock_release>
 800464e:	0020      	movs	r0, r4
 8004650:	2208      	movs	r2, #8
 8004652:	0029      	movs	r1, r5
 8004654:	6025      	str	r5, [r4, #0]
 8004656:	60a5      	str	r5, [r4, #8]
 8004658:	6065      	str	r5, [r4, #4]
 800465a:	6125      	str	r5, [r4, #16]
 800465c:	6165      	str	r5, [r4, #20]
 800465e:	61a5      	str	r5, [r4, #24]
 8004660:	305c      	adds	r0, #92	; 0x5c
 8004662:	f7ff fce8 	bl	8004036 <memset>
 8004666:	6365      	str	r5, [r4, #52]	; 0x34
 8004668:	63a5      	str	r5, [r4, #56]	; 0x38
 800466a:	64a5      	str	r5, [r4, #72]	; 0x48
 800466c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800466e:	0020      	movs	r0, r4
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004672:	3468      	adds	r4, #104	; 0x68
 8004674:	e7d7      	b.n	8004626 <__sfp+0x1e>
 8004676:	2104      	movs	r1, #4
 8004678:	0038      	movs	r0, r7
 800467a:	f7ff ff57 	bl	800452c <__sfmoreglue>
 800467e:	1e04      	subs	r4, r0, #0
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	d1d5      	bne.n	8004630 <__sfp+0x28>
 8004684:	f7ff ff70 	bl	8004568 <__sfp_lock_release>
 8004688:	230c      	movs	r3, #12
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	e7ef      	b.n	800466e <__sfp+0x66>
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	08005718 	.word	0x08005718
 8004694:	ffff0001 	.word	0xffff0001

08004698 <_fwalk_reent>:
 8004698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469a:	0004      	movs	r4, r0
 800469c:	0006      	movs	r6, r0
 800469e:	2700      	movs	r7, #0
 80046a0:	9101      	str	r1, [sp, #4]
 80046a2:	3448      	adds	r4, #72	; 0x48
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	68a5      	ldr	r5, [r4, #8]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	9b00      	ldr	r3, [sp, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	d504      	bpl.n	80046bc <_fwalk_reent+0x24>
 80046b2:	6824      	ldr	r4, [r4, #0]
 80046b4:	2c00      	cmp	r4, #0
 80046b6:	d1f5      	bne.n	80046a4 <_fwalk_reent+0xc>
 80046b8:	0038      	movs	r0, r7
 80046ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046bc:	89ab      	ldrh	r3, [r5, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d908      	bls.n	80046d4 <_fwalk_reent+0x3c>
 80046c2:	220e      	movs	r2, #14
 80046c4:	5eab      	ldrsh	r3, [r5, r2]
 80046c6:	3301      	adds	r3, #1
 80046c8:	d004      	beq.n	80046d4 <_fwalk_reent+0x3c>
 80046ca:	0029      	movs	r1, r5
 80046cc:	0030      	movs	r0, r6
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	4798      	blx	r3
 80046d2:	4307      	orrs	r7, r0
 80046d4:	3568      	adds	r5, #104	; 0x68
 80046d6:	e7e8      	b.n	80046aa <_fwalk_reent+0x12>

080046d8 <__retarget_lock_init_recursive>:
 80046d8:	4770      	bx	lr

080046da <__retarget_lock_acquire_recursive>:
 80046da:	4770      	bx	lr

080046dc <__retarget_lock_release_recursive>:
 80046dc:	4770      	bx	lr
	...

080046e0 <__swhatbuf_r>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	000e      	movs	r6, r1
 80046e4:	001d      	movs	r5, r3
 80046e6:	230e      	movs	r3, #14
 80046e8:	5ec9      	ldrsh	r1, [r1, r3]
 80046ea:	0014      	movs	r4, r2
 80046ec:	b096      	sub	sp, #88	; 0x58
 80046ee:	2900      	cmp	r1, #0
 80046f0:	da08      	bge.n	8004704 <__swhatbuf_r+0x24>
 80046f2:	220c      	movs	r2, #12
 80046f4:	5eb3      	ldrsh	r3, [r6, r2]
 80046f6:	2200      	movs	r2, #0
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	d411      	bmi.n	8004722 <__swhatbuf_r+0x42>
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	e00f      	b.n	8004724 <__swhatbuf_r+0x44>
 8004704:	466a      	mov	r2, sp
 8004706:	f000 fca1 	bl	800504c <_fstat_r>
 800470a:	2800      	cmp	r0, #0
 800470c:	dbf1      	blt.n	80046f2 <__swhatbuf_r+0x12>
 800470e:	23f0      	movs	r3, #240	; 0xf0
 8004710:	9901      	ldr	r1, [sp, #4]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	4019      	ands	r1, r3
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <__swhatbuf_r+0x4c>)
 8004718:	18c9      	adds	r1, r1, r3
 800471a:	424b      	negs	r3, r1
 800471c:	4159      	adcs	r1, r3
 800471e:	6029      	str	r1, [r5, #0]
 8004720:	e7ed      	b.n	80046fe <__swhatbuf_r+0x1e>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	2000      	movs	r0, #0
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	b016      	add	sp, #88	; 0x58
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	ffffe000 	.word	0xffffe000

08004730 <__smakebuf_r>:
 8004730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004732:	2602      	movs	r6, #2
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	0005      	movs	r5, r0
 8004738:	000c      	movs	r4, r1
 800473a:	4233      	tst	r3, r6
 800473c:	d006      	beq.n	800474c <__smakebuf_r+0x1c>
 800473e:	0023      	movs	r3, r4
 8004740:	3347      	adds	r3, #71	; 0x47
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	2301      	movs	r3, #1
 8004748:	6163      	str	r3, [r4, #20]
 800474a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800474c:	466a      	mov	r2, sp
 800474e:	ab01      	add	r3, sp, #4
 8004750:	f7ff ffc6 	bl	80046e0 <__swhatbuf_r>
 8004754:	9900      	ldr	r1, [sp, #0]
 8004756:	0007      	movs	r7, r0
 8004758:	0028      	movs	r0, r5
 800475a:	f000 f899 	bl	8004890 <_malloc_r>
 800475e:	2800      	cmp	r0, #0
 8004760:	d108      	bne.n	8004774 <__smakebuf_r+0x44>
 8004762:	220c      	movs	r2, #12
 8004764:	5ea3      	ldrsh	r3, [r4, r2]
 8004766:	059a      	lsls	r2, r3, #22
 8004768:	d4ef      	bmi.n	800474a <__smakebuf_r+0x1a>
 800476a:	2203      	movs	r2, #3
 800476c:	4393      	bics	r3, r2
 800476e:	431e      	orrs	r6, r3
 8004770:	81a6      	strh	r6, [r4, #12]
 8004772:	e7e4      	b.n	800473e <__smakebuf_r+0xe>
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <__smakebuf_r+0x84>)
 8004776:	62ab      	str	r3, [r5, #40]	; 0x28
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	89a2      	ldrh	r2, [r4, #12]
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	9b00      	ldr	r3, [sp, #0]
 8004784:	6120      	str	r0, [r4, #16]
 8004786:	6163      	str	r3, [r4, #20]
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <__smakebuf_r+0x7a>
 800478e:	0028      	movs	r0, r5
 8004790:	230e      	movs	r3, #14
 8004792:	5ee1      	ldrsh	r1, [r4, r3]
 8004794:	f000 fc6c 	bl	8005070 <_isatty_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	d006      	beq.n	80047aa <__smakebuf_r+0x7a>
 800479c:	2203      	movs	r2, #3
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	4393      	bics	r3, r2
 80047a2:	001a      	movs	r2, r3
 80047a4:	2301      	movs	r3, #1
 80047a6:	4313      	orrs	r3, r2
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	89a0      	ldrh	r0, [r4, #12]
 80047ac:	4307      	orrs	r7, r0
 80047ae:	81a7      	strh	r7, [r4, #12]
 80047b0:	e7cb      	b.n	800474a <__smakebuf_r+0x1a>
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	0800451d 	.word	0x0800451d

080047b8 <_free_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	0005      	movs	r5, r0
 80047bc:	2900      	cmp	r1, #0
 80047be:	d010      	beq.n	80047e2 <_free_r+0x2a>
 80047c0:	1f0c      	subs	r4, r1, #4
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da00      	bge.n	80047ca <_free_r+0x12>
 80047c8:	18e4      	adds	r4, r4, r3
 80047ca:	0028      	movs	r0, r5
 80047cc:	f000 fc82 	bl	80050d4 <__malloc_lock>
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <_free_r+0x90>)
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <_free_r+0x2c>
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	6014      	str	r4, [r2, #0]
 80047dc:	0028      	movs	r0, r5
 80047de:	f000 fc81 	bl	80050e4 <__malloc_unlock>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x42>
 80047e8:	6821      	ldr	r1, [r4, #0]
 80047ea:	1860      	adds	r0, r4, r1
 80047ec:	4283      	cmp	r3, r0
 80047ee:	d1f3      	bne.n	80047d8 <_free_r+0x20>
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	1841      	adds	r1, r0, r1
 80047f6:	6021      	str	r1, [r4, #0]
 80047f8:	e7ee      	b.n	80047d8 <_free_r+0x20>
 80047fa:	001a      	movs	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <_free_r+0x4e>
 8004802:	42a3      	cmp	r3, r4
 8004804:	d9f9      	bls.n	80047fa <_free_r+0x42>
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	1850      	adds	r0, r2, r1
 800480a:	42a0      	cmp	r0, r4
 800480c:	d10b      	bne.n	8004826 <_free_r+0x6e>
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	1809      	adds	r1, r1, r0
 8004812:	1850      	adds	r0, r2, r1
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	4283      	cmp	r3, r0
 8004818:	d1e0      	bne.n	80047dc <_free_r+0x24>
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	1841      	adds	r1, r0, r1
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	6053      	str	r3, [r2, #4]
 8004824:	e7da      	b.n	80047dc <_free_r+0x24>
 8004826:	42a0      	cmp	r0, r4
 8004828:	d902      	bls.n	8004830 <_free_r+0x78>
 800482a:	230c      	movs	r3, #12
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	e7d5      	b.n	80047dc <_free_r+0x24>
 8004830:	6821      	ldr	r1, [r4, #0]
 8004832:	1860      	adds	r0, r4, r1
 8004834:	4283      	cmp	r3, r0
 8004836:	d103      	bne.n	8004840 <_free_r+0x88>
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	1841      	adds	r1, r0, r1
 800483e:	6021      	str	r1, [r4, #0]
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	6054      	str	r4, [r2, #4]
 8004844:	e7ca      	b.n	80047dc <_free_r+0x24>
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	20000394 	.word	0x20000394

0800484c <sbrk_aligned>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4e0f      	ldr	r6, [pc, #60]	; (800488c <sbrk_aligned+0x40>)
 8004850:	000d      	movs	r5, r1
 8004852:	6831      	ldr	r1, [r6, #0]
 8004854:	0004      	movs	r4, r0
 8004856:	2900      	cmp	r1, #0
 8004858:	d102      	bne.n	8004860 <sbrk_aligned+0x14>
 800485a:	f000 fb73 	bl	8004f44 <_sbrk_r>
 800485e:	6030      	str	r0, [r6, #0]
 8004860:	0029      	movs	r1, r5
 8004862:	0020      	movs	r0, r4
 8004864:	f000 fb6e 	bl	8004f44 <_sbrk_r>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d00a      	beq.n	8004882 <sbrk_aligned+0x36>
 800486c:	2303      	movs	r3, #3
 800486e:	1cc5      	adds	r5, r0, #3
 8004870:	439d      	bics	r5, r3
 8004872:	42a8      	cmp	r0, r5
 8004874:	d007      	beq.n	8004886 <sbrk_aligned+0x3a>
 8004876:	1a29      	subs	r1, r5, r0
 8004878:	0020      	movs	r0, r4
 800487a:	f000 fb63 	bl	8004f44 <_sbrk_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d101      	bne.n	8004886 <sbrk_aligned+0x3a>
 8004882:	2501      	movs	r5, #1
 8004884:	426d      	negs	r5, r5
 8004886:	0028      	movs	r0, r5
 8004888:	bd70      	pop	{r4, r5, r6, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	20000398 	.word	0x20000398

08004890 <_malloc_r>:
 8004890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004892:	2203      	movs	r2, #3
 8004894:	1ccb      	adds	r3, r1, #3
 8004896:	4393      	bics	r3, r2
 8004898:	3308      	adds	r3, #8
 800489a:	0006      	movs	r6, r0
 800489c:	001f      	movs	r7, r3
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d232      	bcs.n	8004908 <_malloc_r+0x78>
 80048a2:	270c      	movs	r7, #12
 80048a4:	42b9      	cmp	r1, r7
 80048a6:	d831      	bhi.n	800490c <_malloc_r+0x7c>
 80048a8:	0030      	movs	r0, r6
 80048aa:	f000 fc13 	bl	80050d4 <__malloc_lock>
 80048ae:	4d32      	ldr	r5, [pc, #200]	; (8004978 <_malloc_r+0xe8>)
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	001c      	movs	r4, r3
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	d12e      	bne.n	8004916 <_malloc_r+0x86>
 80048b8:	0039      	movs	r1, r7
 80048ba:	0030      	movs	r0, r6
 80048bc:	f7ff ffc6 	bl	800484c <sbrk_aligned>
 80048c0:	0004      	movs	r4, r0
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d11e      	bne.n	8004904 <_malloc_r+0x74>
 80048c6:	682c      	ldr	r4, [r5, #0]
 80048c8:	0025      	movs	r5, r4
 80048ca:	2d00      	cmp	r5, #0
 80048cc:	d14a      	bne.n	8004964 <_malloc_r+0xd4>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0029      	movs	r1, r5
 80048d2:	18e3      	adds	r3, r4, r3
 80048d4:	0030      	movs	r0, r6
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	f000 fb34 	bl	8004f44 <_sbrk_r>
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	4283      	cmp	r3, r0
 80048e0:	d143      	bne.n	800496a <_malloc_r+0xda>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	3703      	adds	r7, #3
 80048e6:	1aff      	subs	r7, r7, r3
 80048e8:	2303      	movs	r3, #3
 80048ea:	439f      	bics	r7, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	2f0c      	cmp	r7, #12
 80048f0:	d200      	bcs.n	80048f4 <_malloc_r+0x64>
 80048f2:	270c      	movs	r7, #12
 80048f4:	0039      	movs	r1, r7
 80048f6:	0030      	movs	r0, r6
 80048f8:	f7ff ffa8 	bl	800484c <sbrk_aligned>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d034      	beq.n	800496a <_malloc_r+0xda>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	19df      	adds	r7, r3, r7
 8004904:	6027      	str	r7, [r4, #0]
 8004906:	e013      	b.n	8004930 <_malloc_r+0xa0>
 8004908:	2b00      	cmp	r3, #0
 800490a:	dacb      	bge.n	80048a4 <_malloc_r+0x14>
 800490c:	230c      	movs	r3, #12
 800490e:	2500      	movs	r5, #0
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	0028      	movs	r0, r5
 8004914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	1bd1      	subs	r1, r2, r7
 800491a:	d420      	bmi.n	800495e <_malloc_r+0xce>
 800491c:	290b      	cmp	r1, #11
 800491e:	d917      	bls.n	8004950 <_malloc_r+0xc0>
 8004920:	19e2      	adds	r2, r4, r7
 8004922:	6027      	str	r7, [r4, #0]
 8004924:	42a3      	cmp	r3, r4
 8004926:	d111      	bne.n	800494c <_malloc_r+0xbc>
 8004928:	602a      	str	r2, [r5, #0]
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	6053      	str	r3, [r2, #4]
 8004930:	0030      	movs	r0, r6
 8004932:	0025      	movs	r5, r4
 8004934:	f000 fbd6 	bl	80050e4 <__malloc_unlock>
 8004938:	2207      	movs	r2, #7
 800493a:	350b      	adds	r5, #11
 800493c:	1d23      	adds	r3, r4, #4
 800493e:	4395      	bics	r5, r2
 8004940:	1aea      	subs	r2, r5, r3
 8004942:	429d      	cmp	r5, r3
 8004944:	d0e5      	beq.n	8004912 <_malloc_r+0x82>
 8004946:	1b5b      	subs	r3, r3, r5
 8004948:	50a3      	str	r3, [r4, r2]
 800494a:	e7e2      	b.n	8004912 <_malloc_r+0x82>
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e7ec      	b.n	800492a <_malloc_r+0x9a>
 8004950:	6862      	ldr	r2, [r4, #4]
 8004952:	42a3      	cmp	r3, r4
 8004954:	d101      	bne.n	800495a <_malloc_r+0xca>
 8004956:	602a      	str	r2, [r5, #0]
 8004958:	e7ea      	b.n	8004930 <_malloc_r+0xa0>
 800495a:	605a      	str	r2, [r3, #4]
 800495c:	e7e8      	b.n	8004930 <_malloc_r+0xa0>
 800495e:	0023      	movs	r3, r4
 8004960:	6864      	ldr	r4, [r4, #4]
 8004962:	e7a7      	b.n	80048b4 <_malloc_r+0x24>
 8004964:	002c      	movs	r4, r5
 8004966:	686d      	ldr	r5, [r5, #4]
 8004968:	e7af      	b.n	80048ca <_malloc_r+0x3a>
 800496a:	230c      	movs	r3, #12
 800496c:	0030      	movs	r0, r6
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f000 fbb8 	bl	80050e4 <__malloc_unlock>
 8004974:	e7cd      	b.n	8004912 <_malloc_r+0x82>
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	20000394 	.word	0x20000394

0800497c <__sfputc_r>:
 800497c:	6893      	ldr	r3, [r2, #8]
 800497e:	b510      	push	{r4, lr}
 8004980:	3b01      	subs	r3, #1
 8004982:	6093      	str	r3, [r2, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	da04      	bge.n	8004992 <__sfputc_r+0x16>
 8004988:	6994      	ldr	r4, [r2, #24]
 800498a:	42a3      	cmp	r3, r4
 800498c:	db07      	blt.n	800499e <__sfputc_r+0x22>
 800498e:	290a      	cmp	r1, #10
 8004990:	d005      	beq.n	800499e <__sfputc_r+0x22>
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	1c58      	adds	r0, r3, #1
 8004996:	6010      	str	r0, [r2, #0]
 8004998:	7019      	strb	r1, [r3, #0]
 800499a:	0008      	movs	r0, r1
 800499c:	bd10      	pop	{r4, pc}
 800499e:	f7ff fbff 	bl	80041a0 <__swbuf_r>
 80049a2:	0001      	movs	r1, r0
 80049a4:	e7f9      	b.n	800499a <__sfputc_r+0x1e>

080049a6 <__sfputs_r>:
 80049a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a8:	0006      	movs	r6, r0
 80049aa:	000f      	movs	r7, r1
 80049ac:	0014      	movs	r4, r2
 80049ae:	18d5      	adds	r5, r2, r3
 80049b0:	42ac      	cmp	r4, r5
 80049b2:	d101      	bne.n	80049b8 <__sfputs_r+0x12>
 80049b4:	2000      	movs	r0, #0
 80049b6:	e007      	b.n	80049c8 <__sfputs_r+0x22>
 80049b8:	7821      	ldrb	r1, [r4, #0]
 80049ba:	003a      	movs	r2, r7
 80049bc:	0030      	movs	r0, r6
 80049be:	f7ff ffdd 	bl	800497c <__sfputc_r>
 80049c2:	3401      	adds	r4, #1
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d1f3      	bne.n	80049b0 <__sfputs_r+0xa>
 80049c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049cc <_vfiprintf_r>:
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	b0a1      	sub	sp, #132	; 0x84
 80049d0:	0006      	movs	r6, r0
 80049d2:	000c      	movs	r4, r1
 80049d4:	001f      	movs	r7, r3
 80049d6:	9203      	str	r2, [sp, #12]
 80049d8:	2800      	cmp	r0, #0
 80049da:	d004      	beq.n	80049e6 <_vfiprintf_r+0x1a>
 80049dc:	6983      	ldr	r3, [r0, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <_vfiprintf_r+0x1a>
 80049e2:	f7ff fdd9 	bl	8004598 <__sinit>
 80049e6:	4b8e      	ldr	r3, [pc, #568]	; (8004c20 <_vfiprintf_r+0x254>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	d11c      	bne.n	8004a26 <_vfiprintf_r+0x5a>
 80049ec:	6874      	ldr	r4, [r6, #4]
 80049ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f0:	07db      	lsls	r3, r3, #31
 80049f2:	d405      	bmi.n	8004a00 <_vfiprintf_r+0x34>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	059b      	lsls	r3, r3, #22
 80049f8:	d402      	bmi.n	8004a00 <_vfiprintf_r+0x34>
 80049fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fc:	f7ff fe6d 	bl	80046da <__retarget_lock_acquire_recursive>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	071b      	lsls	r3, r3, #28
 8004a04:	d502      	bpl.n	8004a0c <_vfiprintf_r+0x40>
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11d      	bne.n	8004a48 <_vfiprintf_r+0x7c>
 8004a0c:	0021      	movs	r1, r4
 8004a0e:	0030      	movs	r0, r6
 8004a10:	f7ff fc1c 	bl	800424c <__swsetup_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d017      	beq.n	8004a48 <_vfiprintf_r+0x7c>
 8004a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a1a:	07db      	lsls	r3, r3, #31
 8004a1c:	d50d      	bpl.n	8004a3a <_vfiprintf_r+0x6e>
 8004a1e:	2001      	movs	r0, #1
 8004a20:	4240      	negs	r0, r0
 8004a22:	b021      	add	sp, #132	; 0x84
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a26:	4b7f      	ldr	r3, [pc, #508]	; (8004c24 <_vfiprintf_r+0x258>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	d101      	bne.n	8004a30 <_vfiprintf_r+0x64>
 8004a2c:	68b4      	ldr	r4, [r6, #8]
 8004a2e:	e7de      	b.n	80049ee <_vfiprintf_r+0x22>
 8004a30:	4b7d      	ldr	r3, [pc, #500]	; (8004c28 <_vfiprintf_r+0x25c>)
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d1db      	bne.n	80049ee <_vfiprintf_r+0x22>
 8004a36:	68f4      	ldr	r4, [r6, #12]
 8004a38:	e7d9      	b.n	80049ee <_vfiprintf_r+0x22>
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	059b      	lsls	r3, r3, #22
 8004a3e:	d4ee      	bmi.n	8004a1e <_vfiprintf_r+0x52>
 8004a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a42:	f7ff fe4b 	bl	80046dc <__retarget_lock_release_recursive>
 8004a46:	e7ea      	b.n	8004a1e <_vfiprintf_r+0x52>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	ad08      	add	r5, sp, #32
 8004a4c:	616b      	str	r3, [r5, #20]
 8004a4e:	3320      	adds	r3, #32
 8004a50:	766b      	strb	r3, [r5, #25]
 8004a52:	3310      	adds	r3, #16
 8004a54:	76ab      	strb	r3, [r5, #26]
 8004a56:	9707      	str	r7, [sp, #28]
 8004a58:	9f03      	ldr	r7, [sp, #12]
 8004a5a:	783b      	ldrb	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <_vfiprintf_r+0x98>
 8004a60:	2b25      	cmp	r3, #37	; 0x25
 8004a62:	d14e      	bne.n	8004b02 <_vfiprintf_r+0x136>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	1afb      	subs	r3, r7, r3
 8004a68:	9305      	str	r3, [sp, #20]
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	429f      	cmp	r7, r3
 8004a6e:	d00d      	beq.n	8004a8c <_vfiprintf_r+0xc0>
 8004a70:	9b05      	ldr	r3, [sp, #20]
 8004a72:	0021      	movs	r1, r4
 8004a74:	0030      	movs	r0, r6
 8004a76:	9a03      	ldr	r2, [sp, #12]
 8004a78:	f7ff ff95 	bl	80049a6 <__sfputs_r>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d100      	bne.n	8004a82 <_vfiprintf_r+0xb6>
 8004a80:	e0b5      	b.n	8004bee <_vfiprintf_r+0x222>
 8004a82:	696a      	ldr	r2, [r5, #20]
 8004a84:	9b05      	ldr	r3, [sp, #20]
 8004a86:	4694      	mov	ip, r2
 8004a88:	4463      	add	r3, ip
 8004a8a:	616b      	str	r3, [r5, #20]
 8004a8c:	783b      	ldrb	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <_vfiprintf_r+0xc8>
 8004a92:	e0ac      	b.n	8004bee <_vfiprintf_r+0x222>
 8004a94:	2201      	movs	r2, #1
 8004a96:	1c7b      	adds	r3, r7, #1
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4252      	negs	r2, r2
 8004a9e:	606a      	str	r2, [r5, #4]
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	3254      	adds	r2, #84	; 0x54
 8004aa4:	1852      	adds	r2, r2, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	60eb      	str	r3, [r5, #12]
 8004aaa:	60ab      	str	r3, [r5, #8]
 8004aac:	7013      	strb	r3, [r2, #0]
 8004aae:	65ab      	str	r3, [r5, #88]	; 0x58
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	2205      	movs	r2, #5
 8004ab4:	7819      	ldrb	r1, [r3, #0]
 8004ab6:	485d      	ldr	r0, [pc, #372]	; (8004c2c <_vfiprintf_r+0x260>)
 8004ab8:	f000 fb00 	bl	80050bc <memchr>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	1c5f      	adds	r7, r3, #1
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d120      	bne.n	8004b06 <_vfiprintf_r+0x13a>
 8004ac4:	682a      	ldr	r2, [r5, #0]
 8004ac6:	06d3      	lsls	r3, r2, #27
 8004ac8:	d504      	bpl.n	8004ad4 <_vfiprintf_r+0x108>
 8004aca:	2353      	movs	r3, #83	; 0x53
 8004acc:	a904      	add	r1, sp, #16
 8004ace:	185b      	adds	r3, r3, r1
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	7019      	strb	r1, [r3, #0]
 8004ad4:	0713      	lsls	r3, r2, #28
 8004ad6:	d504      	bpl.n	8004ae2 <_vfiprintf_r+0x116>
 8004ad8:	2353      	movs	r3, #83	; 0x53
 8004ada:	a904      	add	r1, sp, #16
 8004adc:	185b      	adds	r3, r3, r1
 8004ade:	212b      	movs	r1, #43	; 0x2b
 8004ae0:	7019      	strb	r1, [r3, #0]
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d016      	beq.n	8004b18 <_vfiprintf_r+0x14c>
 8004aea:	2100      	movs	r1, #0
 8004aec:	68eb      	ldr	r3, [r5, #12]
 8004aee:	9f03      	ldr	r7, [sp, #12]
 8004af0:	783a      	ldrb	r2, [r7, #0]
 8004af2:	1c78      	adds	r0, r7, #1
 8004af4:	3a30      	subs	r2, #48	; 0x30
 8004af6:	4684      	mov	ip, r0
 8004af8:	2a09      	cmp	r2, #9
 8004afa:	d94f      	bls.n	8004b9c <_vfiprintf_r+0x1d0>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d111      	bne.n	8004b24 <_vfiprintf_r+0x158>
 8004b00:	e017      	b.n	8004b32 <_vfiprintf_r+0x166>
 8004b02:	3701      	adds	r7, #1
 8004b04:	e7a9      	b.n	8004a5a <_vfiprintf_r+0x8e>
 8004b06:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <_vfiprintf_r+0x260>)
 8004b08:	682a      	ldr	r2, [r5, #0]
 8004b0a:	1ac0      	subs	r0, r0, r3
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4083      	lsls	r3, r0
 8004b10:	4313      	orrs	r3, r2
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	9703      	str	r7, [sp, #12]
 8004b16:	e7cb      	b.n	8004ab0 <_vfiprintf_r+0xe4>
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	1d19      	adds	r1, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	9107      	str	r1, [sp, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db01      	blt.n	8004b28 <_vfiprintf_r+0x15c>
 8004b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b26:	e004      	b.n	8004b32 <_vfiprintf_r+0x166>
 8004b28:	425b      	negs	r3, r3
 8004b2a:	60eb      	str	r3, [r5, #12]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	783b      	ldrb	r3, [r7, #0]
 8004b34:	2b2e      	cmp	r3, #46	; 0x2e
 8004b36:	d10a      	bne.n	8004b4e <_vfiprintf_r+0x182>
 8004b38:	787b      	ldrb	r3, [r7, #1]
 8004b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b3c:	d137      	bne.n	8004bae <_vfiprintf_r+0x1e2>
 8004b3e:	9b07      	ldr	r3, [sp, #28]
 8004b40:	3702      	adds	r7, #2
 8004b42:	1d1a      	adds	r2, r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	9207      	str	r2, [sp, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db2d      	blt.n	8004ba8 <_vfiprintf_r+0x1dc>
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	2203      	movs	r2, #3
 8004b50:	7839      	ldrb	r1, [r7, #0]
 8004b52:	4837      	ldr	r0, [pc, #220]	; (8004c30 <_vfiprintf_r+0x264>)
 8004b54:	f000 fab2 	bl	80050bc <memchr>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d007      	beq.n	8004b6c <_vfiprintf_r+0x1a0>
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <_vfiprintf_r+0x264>)
 8004b5e:	682a      	ldr	r2, [r5, #0]
 8004b60:	1ac0      	subs	r0, r0, r3
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	4083      	lsls	r3, r0
 8004b66:	4313      	orrs	r3, r2
 8004b68:	3701      	adds	r7, #1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	7839      	ldrb	r1, [r7, #0]
 8004b6e:	1c7b      	adds	r3, r7, #1
 8004b70:	2206      	movs	r2, #6
 8004b72:	4830      	ldr	r0, [pc, #192]	; (8004c34 <_vfiprintf_r+0x268>)
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	7629      	strb	r1, [r5, #24]
 8004b78:	f000 faa0 	bl	80050bc <memchr>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d045      	beq.n	8004c0c <_vfiprintf_r+0x240>
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <_vfiprintf_r+0x26c>)
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d127      	bne.n	8004bd6 <_vfiprintf_r+0x20a>
 8004b86:	2207      	movs	r2, #7
 8004b88:	9b07      	ldr	r3, [sp, #28]
 8004b8a:	3307      	adds	r3, #7
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	3308      	adds	r3, #8
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	696b      	ldr	r3, [r5, #20]
 8004b94:	9a04      	ldr	r2, [sp, #16]
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	616b      	str	r3, [r5, #20]
 8004b9a:	e75d      	b.n	8004a58 <_vfiprintf_r+0x8c>
 8004b9c:	210a      	movs	r1, #10
 8004b9e:	434b      	muls	r3, r1
 8004ba0:	4667      	mov	r7, ip
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	3909      	subs	r1, #9
 8004ba6:	e7a3      	b.n	8004af0 <_vfiprintf_r+0x124>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	425b      	negs	r3, r3
 8004bac:	e7ce      	b.n	8004b4c <_vfiprintf_r+0x180>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	3701      	adds	r7, #1
 8004bb4:	606b      	str	r3, [r5, #4]
 8004bb6:	7839      	ldrb	r1, [r7, #0]
 8004bb8:	1c78      	adds	r0, r7, #1
 8004bba:	3930      	subs	r1, #48	; 0x30
 8004bbc:	4684      	mov	ip, r0
 8004bbe:	2909      	cmp	r1, #9
 8004bc0:	d903      	bls.n	8004bca <_vfiprintf_r+0x1fe>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0c3      	beq.n	8004b4e <_vfiprintf_r+0x182>
 8004bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bc8:	e7c1      	b.n	8004b4e <_vfiprintf_r+0x182>
 8004bca:	230a      	movs	r3, #10
 8004bcc:	435a      	muls	r2, r3
 8004bce:	4667      	mov	r7, ip
 8004bd0:	1852      	adds	r2, r2, r1
 8004bd2:	3b09      	subs	r3, #9
 8004bd4:	e7ef      	b.n	8004bb6 <_vfiprintf_r+0x1ea>
 8004bd6:	ab07      	add	r3, sp, #28
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	0022      	movs	r2, r4
 8004bdc:	0029      	movs	r1, r5
 8004bde:	0030      	movs	r0, r6
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <_vfiprintf_r+0x270>)
 8004be2:	e000      	b.n	8004be6 <_vfiprintf_r+0x21a>
 8004be4:	bf00      	nop
 8004be6:	9004      	str	r0, [sp, #16]
 8004be8:	9b04      	ldr	r3, [sp, #16]
 8004bea:	3301      	adds	r3, #1
 8004bec:	d1d1      	bne.n	8004b92 <_vfiprintf_r+0x1c6>
 8004bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf0:	07db      	lsls	r3, r3, #31
 8004bf2:	d405      	bmi.n	8004c00 <_vfiprintf_r+0x234>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	059b      	lsls	r3, r3, #22
 8004bf8:	d402      	bmi.n	8004c00 <_vfiprintf_r+0x234>
 8004bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfc:	f7ff fd6e 	bl	80046dc <__retarget_lock_release_recursive>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	d500      	bpl.n	8004c08 <_vfiprintf_r+0x23c>
 8004c06:	e70a      	b.n	8004a1e <_vfiprintf_r+0x52>
 8004c08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c0a:	e70a      	b.n	8004a22 <_vfiprintf_r+0x56>
 8004c0c:	ab07      	add	r3, sp, #28
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	0022      	movs	r2, r4
 8004c12:	0029      	movs	r1, r5
 8004c14:	0030      	movs	r0, r6
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <_vfiprintf_r+0x270>)
 8004c18:	f000 f882 	bl	8004d20 <_printf_i>
 8004c1c:	e7e3      	b.n	8004be6 <_vfiprintf_r+0x21a>
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	0800573c 	.word	0x0800573c
 8004c24:	0800575c 	.word	0x0800575c
 8004c28:	0800571c 	.word	0x0800571c
 8004c2c:	0800577c 	.word	0x0800577c
 8004c30:	08005782 	.word	0x08005782
 8004c34:	08005786 	.word	0x08005786
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	080049a7 	.word	0x080049a7

08004c40 <_printf_common>:
 8004c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c42:	0015      	movs	r5, r2
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	688a      	ldr	r2, [r1, #8]
 8004c48:	690b      	ldr	r3, [r1, #16]
 8004c4a:	000c      	movs	r4, r1
 8004c4c:	9000      	str	r0, [sp, #0]
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	da00      	bge.n	8004c54 <_printf_common+0x14>
 8004c52:	0013      	movs	r3, r2
 8004c54:	0022      	movs	r2, r4
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	3243      	adds	r2, #67	; 0x43
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d001      	beq.n	8004c64 <_printf_common+0x24>
 8004c60:	3301      	adds	r3, #1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	069b      	lsls	r3, r3, #26
 8004c68:	d502      	bpl.n	8004c70 <_printf_common+0x30>
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	2306      	movs	r3, #6
 8004c74:	0017      	movs	r7, r2
 8004c76:	401f      	ands	r7, r3
 8004c78:	421a      	tst	r2, r3
 8004c7a:	d027      	beq.n	8004ccc <_printf_common+0x8c>
 8004c7c:	0023      	movs	r3, r4
 8004c7e:	3343      	adds	r3, #67	; 0x43
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	1e5a      	subs	r2, r3, #1
 8004c84:	4193      	sbcs	r3, r2
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	0692      	lsls	r2, r2, #26
 8004c8a:	d430      	bmi.n	8004cee <_printf_common+0xae>
 8004c8c:	0022      	movs	r2, r4
 8004c8e:	9901      	ldr	r1, [sp, #4]
 8004c90:	9800      	ldr	r0, [sp, #0]
 8004c92:	9e08      	ldr	r6, [sp, #32]
 8004c94:	3243      	adds	r2, #67	; 0x43
 8004c96:	47b0      	blx	r6
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d025      	beq.n	8004ce8 <_printf_common+0xa8>
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	682a      	ldr	r2, [r5, #0]
 8004ca2:	68e1      	ldr	r1, [r4, #12]
 8004ca4:	2500      	movs	r5, #0
 8004ca6:	4003      	ands	r3, r0
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0x74>
 8004cac:	1a8d      	subs	r5, r1, r2
 8004cae:	43eb      	mvns	r3, r5
 8004cb0:	17db      	asrs	r3, r3, #31
 8004cb2:	401d      	ands	r5, r3
 8004cb4:	68a3      	ldr	r3, [r4, #8]
 8004cb6:	6922      	ldr	r2, [r4, #16]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	dd01      	ble.n	8004cc0 <_printf_common+0x80>
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	18ed      	adds	r5, r5, r3
 8004cc0:	2700      	movs	r7, #0
 8004cc2:	42bd      	cmp	r5, r7
 8004cc4:	d120      	bne.n	8004d08 <_printf_common+0xc8>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e010      	b.n	8004cec <_printf_common+0xac>
 8004cca:	3701      	adds	r7, #1
 8004ccc:	68e3      	ldr	r3, [r4, #12]
 8004cce:	682a      	ldr	r2, [r5, #0]
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	42bb      	cmp	r3, r7
 8004cd4:	ddd2      	ble.n	8004c7c <_printf_common+0x3c>
 8004cd6:	0022      	movs	r2, r4
 8004cd8:	2301      	movs	r3, #1
 8004cda:	9901      	ldr	r1, [sp, #4]
 8004cdc:	9800      	ldr	r0, [sp, #0]
 8004cde:	9e08      	ldr	r6, [sp, #32]
 8004ce0:	3219      	adds	r2, #25
 8004ce2:	47b0      	blx	r6
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d1f0      	bne.n	8004cca <_printf_common+0x8a>
 8004ce8:	2001      	movs	r0, #1
 8004cea:	4240      	negs	r0, r0
 8004cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cee:	2030      	movs	r0, #48	; 0x30
 8004cf0:	18e1      	adds	r1, r4, r3
 8004cf2:	3143      	adds	r1, #67	; 0x43
 8004cf4:	7008      	strb	r0, [r1, #0]
 8004cf6:	0021      	movs	r1, r4
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	3145      	adds	r1, #69	; 0x45
 8004cfc:	7809      	ldrb	r1, [r1, #0]
 8004cfe:	18a2      	adds	r2, r4, r2
 8004d00:	3243      	adds	r2, #67	; 0x43
 8004d02:	3302      	adds	r3, #2
 8004d04:	7011      	strb	r1, [r2, #0]
 8004d06:	e7c1      	b.n	8004c8c <_printf_common+0x4c>
 8004d08:	0022      	movs	r2, r4
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	9901      	ldr	r1, [sp, #4]
 8004d0e:	9800      	ldr	r0, [sp, #0]
 8004d10:	9e08      	ldr	r6, [sp, #32]
 8004d12:	321a      	adds	r2, #26
 8004d14:	47b0      	blx	r6
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d0e6      	beq.n	8004ce8 <_printf_common+0xa8>
 8004d1a:	3701      	adds	r7, #1
 8004d1c:	e7d1      	b.n	8004cc2 <_printf_common+0x82>
	...

08004d20 <_printf_i>:
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	b08b      	sub	sp, #44	; 0x2c
 8004d24:	9206      	str	r2, [sp, #24]
 8004d26:	000a      	movs	r2, r1
 8004d28:	3243      	adds	r2, #67	; 0x43
 8004d2a:	9307      	str	r3, [sp, #28]
 8004d2c:	9005      	str	r0, [sp, #20]
 8004d2e:	9204      	str	r2, [sp, #16]
 8004d30:	7e0a      	ldrb	r2, [r1, #24]
 8004d32:	000c      	movs	r4, r1
 8004d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d36:	2a78      	cmp	r2, #120	; 0x78
 8004d38:	d807      	bhi.n	8004d4a <_printf_i+0x2a>
 8004d3a:	2a62      	cmp	r2, #98	; 0x62
 8004d3c:	d809      	bhi.n	8004d52 <_printf_i+0x32>
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	d100      	bne.n	8004d44 <_printf_i+0x24>
 8004d42:	e0c1      	b.n	8004ec8 <_printf_i+0x1a8>
 8004d44:	2a58      	cmp	r2, #88	; 0x58
 8004d46:	d100      	bne.n	8004d4a <_printf_i+0x2a>
 8004d48:	e08c      	b.n	8004e64 <_printf_i+0x144>
 8004d4a:	0026      	movs	r6, r4
 8004d4c:	3642      	adds	r6, #66	; 0x42
 8004d4e:	7032      	strb	r2, [r6, #0]
 8004d50:	e022      	b.n	8004d98 <_printf_i+0x78>
 8004d52:	0010      	movs	r0, r2
 8004d54:	3863      	subs	r0, #99	; 0x63
 8004d56:	2815      	cmp	r0, #21
 8004d58:	d8f7      	bhi.n	8004d4a <_printf_i+0x2a>
 8004d5a:	f7fc f9d5 	bl	8001108 <__gnu_thumb1_case_shi>
 8004d5e:	0016      	.short	0x0016
 8004d60:	fff6001f 	.word	0xfff6001f
 8004d64:	fff6fff6 	.word	0xfff6fff6
 8004d68:	001ffff6 	.word	0x001ffff6
 8004d6c:	fff6fff6 	.word	0xfff6fff6
 8004d70:	fff6fff6 	.word	0xfff6fff6
 8004d74:	003600a8 	.word	0x003600a8
 8004d78:	fff6009a 	.word	0xfff6009a
 8004d7c:	00b9fff6 	.word	0x00b9fff6
 8004d80:	0036fff6 	.word	0x0036fff6
 8004d84:	fff6fff6 	.word	0xfff6fff6
 8004d88:	009e      	.short	0x009e
 8004d8a:	0026      	movs	r6, r4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	3642      	adds	r6, #66	; 0x42
 8004d90:	1d11      	adds	r1, r2, #4
 8004d92:	6019      	str	r1, [r3, #0]
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	7033      	strb	r3, [r6, #0]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a7      	b.n	8004eec <_printf_i+0x1cc>
 8004d9c:	6808      	ldr	r0, [r1, #0]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	1d0a      	adds	r2, r1, #4
 8004da2:	0605      	lsls	r5, r0, #24
 8004da4:	d50b      	bpl.n	8004dbe <_printf_i+0x9e>
 8004da6:	680d      	ldr	r5, [r1, #0]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	2d00      	cmp	r5, #0
 8004dac:	da03      	bge.n	8004db6 <_printf_i+0x96>
 8004dae:	232d      	movs	r3, #45	; 0x2d
 8004db0:	9a04      	ldr	r2, [sp, #16]
 8004db2:	426d      	negs	r5, r5
 8004db4:	7013      	strb	r3, [r2, #0]
 8004db6:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <_printf_i+0x21c>)
 8004db8:	270a      	movs	r7, #10
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	e01b      	b.n	8004df6 <_printf_i+0xd6>
 8004dbe:	680d      	ldr	r5, [r1, #0]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	0641      	lsls	r1, r0, #25
 8004dc4:	d5f1      	bpl.n	8004daa <_printf_i+0x8a>
 8004dc6:	b22d      	sxth	r5, r5
 8004dc8:	e7ef      	b.n	8004daa <_printf_i+0x8a>
 8004dca:	680d      	ldr	r5, [r1, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	1d08      	adds	r0, r1, #4
 8004dd0:	6018      	str	r0, [r3, #0]
 8004dd2:	062e      	lsls	r6, r5, #24
 8004dd4:	d501      	bpl.n	8004dda <_printf_i+0xba>
 8004dd6:	680d      	ldr	r5, [r1, #0]
 8004dd8:	e003      	b.n	8004de2 <_printf_i+0xc2>
 8004dda:	066d      	lsls	r5, r5, #25
 8004ddc:	d5fb      	bpl.n	8004dd6 <_printf_i+0xb6>
 8004dde:	680d      	ldr	r5, [r1, #0]
 8004de0:	b2ad      	uxth	r5, r5
 8004de2:	4b56      	ldr	r3, [pc, #344]	; (8004f3c <_printf_i+0x21c>)
 8004de4:	2708      	movs	r7, #8
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	2a6f      	cmp	r2, #111	; 0x6f
 8004dea:	d000      	beq.n	8004dee <_printf_i+0xce>
 8004dec:	3702      	adds	r7, #2
 8004dee:	0023      	movs	r3, r4
 8004df0:	2200      	movs	r2, #0
 8004df2:	3343      	adds	r3, #67	; 0x43
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db03      	blt.n	8004e06 <_printf_i+0xe6>
 8004dfe:	2204      	movs	r2, #4
 8004e00:	6821      	ldr	r1, [r4, #0]
 8004e02:	4391      	bics	r1, r2
 8004e04:	6021      	str	r1, [r4, #0]
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	d102      	bne.n	8004e10 <_printf_i+0xf0>
 8004e0a:	9e04      	ldr	r6, [sp, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <_printf_i+0x10a>
 8004e10:	9e04      	ldr	r6, [sp, #16]
 8004e12:	0028      	movs	r0, r5
 8004e14:	0039      	movs	r1, r7
 8004e16:	f7fc fa07 	bl	8001228 <__aeabi_uidivmod>
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	3e01      	subs	r6, #1
 8004e1e:	5c5b      	ldrb	r3, [r3, r1]
 8004e20:	7033      	strb	r3, [r6, #0]
 8004e22:	002b      	movs	r3, r5
 8004e24:	0005      	movs	r5, r0
 8004e26:	429f      	cmp	r7, r3
 8004e28:	d9f3      	bls.n	8004e12 <_printf_i+0xf2>
 8004e2a:	2f08      	cmp	r7, #8
 8004e2c:	d109      	bne.n	8004e42 <_printf_i+0x122>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d506      	bpl.n	8004e42 <_printf_i+0x122>
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	6922      	ldr	r2, [r4, #16]
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	dc02      	bgt.n	8004e42 <_printf_i+0x122>
 8004e3c:	2330      	movs	r3, #48	; 0x30
 8004e3e:	3e01      	subs	r6, #1
 8004e40:	7033      	strb	r3, [r6, #0]
 8004e42:	9b04      	ldr	r3, [sp, #16]
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	6123      	str	r3, [r4, #16]
 8004e48:	9b07      	ldr	r3, [sp, #28]
 8004e4a:	0021      	movs	r1, r4
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	9805      	ldr	r0, [sp, #20]
 8004e50:	9b06      	ldr	r3, [sp, #24]
 8004e52:	aa09      	add	r2, sp, #36	; 0x24
 8004e54:	f7ff fef4 	bl	8004c40 <_printf_common>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d14c      	bne.n	8004ef6 <_printf_i+0x1d6>
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	4240      	negs	r0, r0
 8004e60:	b00b      	add	sp, #44	; 0x2c
 8004e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e64:	3145      	adds	r1, #69	; 0x45
 8004e66:	700a      	strb	r2, [r1, #0]
 8004e68:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <_printf_i+0x21c>)
 8004e6a:	9203      	str	r2, [sp, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	ca20      	ldmia	r2!, {r5}
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	0608      	lsls	r0, r1, #24
 8004e76:	d516      	bpl.n	8004ea6 <_printf_i+0x186>
 8004e78:	07cb      	lsls	r3, r1, #31
 8004e7a:	d502      	bpl.n	8004e82 <_printf_i+0x162>
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	4319      	orrs	r1, r3
 8004e80:	6021      	str	r1, [r4, #0]
 8004e82:	2710      	movs	r7, #16
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d1b2      	bne.n	8004dee <_printf_i+0xce>
 8004e88:	2320      	movs	r3, #32
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	439a      	bics	r2, r3
 8004e8e:	6022      	str	r2, [r4, #0]
 8004e90:	e7ad      	b.n	8004dee <_printf_i+0xce>
 8004e92:	2220      	movs	r2, #32
 8004e94:	6809      	ldr	r1, [r1, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	6022      	str	r2, [r4, #0]
 8004e9a:	0022      	movs	r2, r4
 8004e9c:	2178      	movs	r1, #120	; 0x78
 8004e9e:	3245      	adds	r2, #69	; 0x45
 8004ea0:	7011      	strb	r1, [r2, #0]
 8004ea2:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <_printf_i+0x220>)
 8004ea4:	e7e1      	b.n	8004e6a <_printf_i+0x14a>
 8004ea6:	0648      	lsls	r0, r1, #25
 8004ea8:	d5e6      	bpl.n	8004e78 <_printf_i+0x158>
 8004eaa:	b2ad      	uxth	r5, r5
 8004eac:	e7e4      	b.n	8004e78 <_printf_i+0x158>
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	680d      	ldr	r5, [r1, #0]
 8004eb2:	1d10      	adds	r0, r2, #4
 8004eb4:	6949      	ldr	r1, [r1, #20]
 8004eb6:	6018      	str	r0, [r3, #0]
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	062e      	lsls	r6, r5, #24
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_i+0x1a2>
 8004ebe:	6019      	str	r1, [r3, #0]
 8004ec0:	e002      	b.n	8004ec8 <_printf_i+0x1a8>
 8004ec2:	066d      	lsls	r5, r5, #25
 8004ec4:	d5fb      	bpl.n	8004ebe <_printf_i+0x19e>
 8004ec6:	8019      	strh	r1, [r3, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9e04      	ldr	r6, [sp, #16]
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	e7bb      	b.n	8004e48 <_printf_i+0x128>
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	1d11      	adds	r1, r2, #4
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	6816      	ldr	r6, [r2, #0]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	0030      	movs	r0, r6
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	f000 f8ed 	bl	80050bc <memchr>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d001      	beq.n	8004eea <_printf_i+0x1ca>
 8004ee6:	1b80      	subs	r0, r0, r6
 8004ee8:	6060      	str	r0, [r4, #4]
 8004eea:	6863      	ldr	r3, [r4, #4]
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9a04      	ldr	r2, [sp, #16]
 8004ef2:	7013      	strb	r3, [r2, #0]
 8004ef4:	e7a8      	b.n	8004e48 <_printf_i+0x128>
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	0032      	movs	r2, r6
 8004efa:	9906      	ldr	r1, [sp, #24]
 8004efc:	9805      	ldr	r0, [sp, #20]
 8004efe:	9d07      	ldr	r5, [sp, #28]
 8004f00:	47a8      	blx	r5
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d0aa      	beq.n	8004e5c <_printf_i+0x13c>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d415      	bmi.n	8004f38 <_printf_i+0x218>
 8004f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	daa5      	bge.n	8004e60 <_printf_i+0x140>
 8004f14:	0018      	movs	r0, r3
 8004f16:	e7a3      	b.n	8004e60 <_printf_i+0x140>
 8004f18:	0022      	movs	r2, r4
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	9906      	ldr	r1, [sp, #24]
 8004f1e:	9805      	ldr	r0, [sp, #20]
 8004f20:	9e07      	ldr	r6, [sp, #28]
 8004f22:	3219      	adds	r2, #25
 8004f24:	47b0      	blx	r6
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d098      	beq.n	8004e5c <_printf_i+0x13c>
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	68e3      	ldr	r3, [r4, #12]
 8004f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	42ab      	cmp	r3, r5
 8004f34:	dcf0      	bgt.n	8004f18 <_printf_i+0x1f8>
 8004f36:	e7e9      	b.n	8004f0c <_printf_i+0x1ec>
 8004f38:	2500      	movs	r5, #0
 8004f3a:	e7f7      	b.n	8004f2c <_printf_i+0x20c>
 8004f3c:	0800578d 	.word	0x0800578d
 8004f40:	0800579e 	.word	0x0800579e

08004f44 <_sbrk_r>:
 8004f44:	2300      	movs	r3, #0
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	4d06      	ldr	r5, [pc, #24]	; (8004f64 <_sbrk_r+0x20>)
 8004f4a:	0004      	movs	r4, r0
 8004f4c:	0008      	movs	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fc fff6 	bl	8001f40 <_sbrk>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d103      	bne.n	8004f60 <_sbrk_r+0x1c>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d000      	beq.n	8004f60 <_sbrk_r+0x1c>
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	2000039c 	.word	0x2000039c

08004f68 <__sread>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	000c      	movs	r4, r1
 8004f6c:	250e      	movs	r5, #14
 8004f6e:	5f49      	ldrsh	r1, [r1, r5]
 8004f70:	f000 f8c0 	bl	80050f4 <_read_r>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	db03      	blt.n	8004f80 <__sread+0x18>
 8004f78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f7a:	181b      	adds	r3, r3, r0
 8004f7c:	6563      	str	r3, [r4, #84]	; 0x54
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	4a02      	ldr	r2, [pc, #8]	; (8004f8c <__sread+0x24>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	e7f9      	b.n	8004f7e <__sread+0x16>
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	ffffefff 	.word	0xffffefff

08004f90 <__swrite>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	001f      	movs	r7, r3
 8004f94:	898b      	ldrh	r3, [r1, #12]
 8004f96:	0005      	movs	r5, r0
 8004f98:	000c      	movs	r4, r1
 8004f9a:	0016      	movs	r6, r2
 8004f9c:	05db      	lsls	r3, r3, #23
 8004f9e:	d505      	bpl.n	8004fac <__swrite+0x1c>
 8004fa0:	230e      	movs	r3, #14
 8004fa2:	5ec9      	ldrsh	r1, [r1, r3]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	f000 f874 	bl	8005094 <_lseek_r>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <__swrite+0x34>)
 8004fb0:	0028      	movs	r0, r5
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	0032      	movs	r2, r6
 8004fb8:	230e      	movs	r3, #14
 8004fba:	5ee1      	ldrsh	r1, [r4, r3]
 8004fbc:	003b      	movs	r3, r7
 8004fbe:	f000 f81f 	bl	8005000 <_write_r>
 8004fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc4:	ffffefff 	.word	0xffffefff

08004fc8 <__sseek>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	000c      	movs	r4, r1
 8004fcc:	250e      	movs	r5, #14
 8004fce:	5f49      	ldrsh	r1, [r1, r5]
 8004fd0:	f000 f860 	bl	8005094 <_lseek_r>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	d103      	bne.n	8004fe2 <__sseek+0x1a>
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <__sseek+0x28>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	0152      	lsls	r2, r2, #5
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	81a3      	strh	r3, [r4, #12]
 8004fea:	6560      	str	r0, [r4, #84]	; 0x54
 8004fec:	e7f8      	b.n	8004fe0 <__sseek+0x18>
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	ffffefff 	.word	0xffffefff

08004ff4 <__sclose>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	230e      	movs	r3, #14
 8004ff8:	5ec9      	ldrsh	r1, [r1, r3]
 8004ffa:	f000 f815 	bl	8005028 <_close_r>
 8004ffe:	bd10      	pop	{r4, pc}

08005000 <_write_r>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	0004      	movs	r4, r0
 8005004:	0008      	movs	r0, r1
 8005006:	0011      	movs	r1, r2
 8005008:	001a      	movs	r2, r3
 800500a:	2300      	movs	r3, #0
 800500c:	4d05      	ldr	r5, [pc, #20]	; (8005024 <_write_r+0x24>)
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fc ff7c 	bl	8001f0c <_write>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d103      	bne.n	8005020 <_write_r+0x20>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d000      	beq.n	8005020 <_write_r+0x20>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	2000039c 	.word	0x2000039c

08005028 <_close_r>:
 8005028:	2300      	movs	r3, #0
 800502a:	b570      	push	{r4, r5, r6, lr}
 800502c:	4d06      	ldr	r5, [pc, #24]	; (8005048 <_close_r+0x20>)
 800502e:	0004      	movs	r4, r0
 8005030:	0008      	movs	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fc ff78 	bl	8001f28 <_close>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d103      	bne.n	8005044 <_close_r+0x1c>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d000      	beq.n	8005044 <_close_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	2000039c 	.word	0x2000039c

0800504c <_fstat_r>:
 800504c:	2300      	movs	r3, #0
 800504e:	b570      	push	{r4, r5, r6, lr}
 8005050:	4d06      	ldr	r5, [pc, #24]	; (800506c <_fstat_r+0x20>)
 8005052:	0004      	movs	r4, r0
 8005054:	0008      	movs	r0, r1
 8005056:	0011      	movs	r1, r2
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	f7fc ff68 	bl	8001f2e <_fstat>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d103      	bne.n	800506a <_fstat_r+0x1e>
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d000      	beq.n	800506a <_fstat_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	2000039c 	.word	0x2000039c

08005070 <_isatty_r>:
 8005070:	2300      	movs	r3, #0
 8005072:	b570      	push	{r4, r5, r6, lr}
 8005074:	4d06      	ldr	r5, [pc, #24]	; (8005090 <_isatty_r+0x20>)
 8005076:	0004      	movs	r4, r0
 8005078:	0008      	movs	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fc ff5c 	bl	8001f38 <_isatty>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d103      	bne.n	800508c <_isatty_r+0x1c>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d000      	beq.n	800508c <_isatty_r+0x1c>
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	2000039c 	.word	0x2000039c

08005094 <_lseek_r>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	0004      	movs	r4, r0
 8005098:	0008      	movs	r0, r1
 800509a:	0011      	movs	r1, r2
 800509c:	001a      	movs	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	4d05      	ldr	r5, [pc, #20]	; (80050b8 <_lseek_r+0x24>)
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fc ff4a 	bl	8001f3c <_lseek>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d103      	bne.n	80050b4 <_lseek_r+0x20>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <_lseek_r+0x20>
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	2000039c 	.word	0x2000039c

080050bc <memchr>:
 80050bc:	b2c9      	uxtb	r1, r1
 80050be:	1882      	adds	r2, r0, r2
 80050c0:	4290      	cmp	r0, r2
 80050c2:	d101      	bne.n	80050c8 <memchr+0xc>
 80050c4:	2000      	movs	r0, #0
 80050c6:	4770      	bx	lr
 80050c8:	7803      	ldrb	r3, [r0, #0]
 80050ca:	428b      	cmp	r3, r1
 80050cc:	d0fb      	beq.n	80050c6 <memchr+0xa>
 80050ce:	3001      	adds	r0, #1
 80050d0:	e7f6      	b.n	80050c0 <memchr+0x4>
	...

080050d4 <__malloc_lock>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4802      	ldr	r0, [pc, #8]	; (80050e0 <__malloc_lock+0xc>)
 80050d8:	f7ff faff 	bl	80046da <__retarget_lock_acquire_recursive>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	20000390 	.word	0x20000390

080050e4 <__malloc_unlock>:
 80050e4:	b510      	push	{r4, lr}
 80050e6:	4802      	ldr	r0, [pc, #8]	; (80050f0 <__malloc_unlock+0xc>)
 80050e8:	f7ff faf8 	bl	80046dc <__retarget_lock_release_recursive>
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000390 	.word	0x20000390

080050f4 <_read_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	0004      	movs	r4, r0
 80050f8:	0008      	movs	r0, r1
 80050fa:	0011      	movs	r1, r2
 80050fc:	001a      	movs	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	4d05      	ldr	r5, [pc, #20]	; (8005118 <_read_r+0x24>)
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fc fef4 	bl	8001ef0 <_read>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d103      	bne.n	8005114 <_read_r+0x20>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d000      	beq.n	8005114 <_read_r+0x20>
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	2000039c 	.word	0x2000039c

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
