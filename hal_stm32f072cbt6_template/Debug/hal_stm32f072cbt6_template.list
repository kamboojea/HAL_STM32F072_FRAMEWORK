
hal_stm32f072cbt6_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001bcc  08001bcc  00011bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c04  08001c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c04  08001c04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c04  08001c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c04  08001c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08001c18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08001c18  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ed  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  00032221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a072  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d76  00000000  00000000  000504d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d65  00000000  00000000  00067248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000f8000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000c48f  00000000  00000000  000f9e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bb4 	.word	0x08001bb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001bb4 	.word	0x08001bb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <app_task>:
 *
 * This function is responsible for coordinating the execution of all
 * tasks needed for the application.
 */
void app_task(void)
{
 8000220:	b510      	push	{r4, lr}
	led_task();
 8000222:	f000 f841 	bl	80002a8 <led_task>
}
 8000226:	bd10      	pop	{r4, pc}

08000228 <led_task_update>:

/**
 * @brief Update error and status LED classes
 */
static void led_task_update(void)
{
 8000228:	b510      	push	{r4, lr}
    // Update LED classes
	led_update(&status_led);
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <led_task_update+0x10>)
 800022c:	f000 f85c 	bl	80002e8 <led_update>
	led_update(&error_led);
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <led_task_update+0x14>)
 8000232:	f000 f859 	bl	80002e8 <led_update>
}
 8000236:	bd10      	pop	{r4, pc}
 8000238:	20000048 	.word	0x20000048
 800023c:	20000028 	.word	0x20000028

08000240 <led_task_error_led_off>:
{
 8000240:	b510      	push	{r4, lr}
    led_off(&error_led);
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <led_task_error_led_off+0xc>)
 8000244:	f000 f87f 	bl	8000346 <led_off>
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000028 	.word	0x20000028

08000250 <led_task_status_led_flash_rate>:
{
 8000250:	b510      	push	{r4, lr}
 8000252:	000a      	movs	r2, r1
    led_set_flash_rate(&status_led, on_period, off_period);
 8000254:	0001      	movs	r1, r0
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <led_task_status_led_flash_rate+0x10>)
 8000258:	f000 f86b 	bl	8000332 <led_set_flash_rate>
}
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000048 	.word	0x20000048

08000264 <led_task_intial_led_startup_flash_rate>:
{
 8000264:	b510      	push	{r4, lr}
	led_task_status_led_flash_rate(INITIAL_STATUS_LED_ON_PERIOD, INITIAL_STATUS_LED_OFF_PERIOD);
 8000266:	20fa      	movs	r0, #250	; 0xfa
 8000268:	0080      	lsls	r0, r0, #2
 800026a:	0001      	movs	r1, r0
 800026c:	f7ff fff0 	bl	8000250 <led_task_status_led_flash_rate>
}
 8000270:	bd10      	pop	{r4, pc}
	...

08000274 <led_task_init>:
{
 8000274:	b510      	push	{r4, lr}
    led_init(&error_led, ERROR_LED_PORT, ERROR_LED_PIN);
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	4c08      	ldr	r4, [pc, #32]	; (800029c <led_task_init+0x28>)
 800027a:	0212      	lsls	r2, r2, #8
 800027c:	0021      	movs	r1, r4
 800027e:	4808      	ldr	r0, [pc, #32]	; (80002a0 <led_task_init+0x2c>)
 8000280:	f000 f822 	bl	80002c8 <led_init>
    led_init(&status_led, STATUS_LED_PORT, STATUS_LED_PIN);
 8000284:	2280      	movs	r2, #128	; 0x80
 8000286:	01d2      	lsls	r2, r2, #7
 8000288:	0021      	movs	r1, r4
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <led_task_init+0x30>)
 800028c:	f000 f81c 	bl	80002c8 <led_init>
    led_task_intial_led_startup_flash_rate();
 8000290:	f7ff ffe8 	bl	8000264 <led_task_intial_led_startup_flash_rate>
    led_task_error_led_off();
 8000294:	f7ff ffd4 	bl	8000240 <led_task_error_led_off>
}
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	48000800 	.word	0x48000800
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000048 	.word	0x20000048

080002a8 <led_task>:
{
 80002a8:	b510      	push	{r4, lr}
    if (!initialised)
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <led_task+0x1c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <led_task+0x10>
    led_task_update();
 80002b2:	f7ff ffb9 	bl	8000228 <led_task_update>
}
 80002b6:	bd10      	pop	{r4, pc}
        led_task_init();
 80002b8:	f7ff ffdc 	bl	8000274 <led_task_init>
        initialised = true;
 80002bc:	4b01      	ldr	r3, [pc, #4]	; (80002c4 <led_task+0x1c>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e7f6      	b.n	80002b2 <led_task+0xa>
 80002c4:	20000044 	.word	0x20000044

080002c8 <led_init>:
 * @param  port: pointer to the GPIO port to which the led is connected
 * @param  pin: pin number of the GPIO port to which the led is connected
 * @retval None
 */
void led_init(led_t* const led, GPIO_TypeDef* port, uint16_t pin)
{
 80002c8:	b510      	push	{r4, lr}
 80002ca:	0004      	movs	r4, r0
    led->port = port;
 80002cc:	6001      	str	r1, [r0, #0]
    led->pin = pin;
 80002ce:	8082      	strh	r2, [r0, #4]
    led->flash_mode = false;
 80002d0:	2300      	movs	r3, #0
 80002d2:	7603      	strb	r3, [r0, #24]
    led->state = false;
 80002d4:	7403      	strb	r3, [r0, #16]
    led->timer = millis();
 80002d6:	f000 f850 	bl	800037a <millis>
 80002da:	6160      	str	r0, [r4, #20]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80002dc:	88a1      	ldrh	r1, [r4, #4]
 80002de:	6820      	ldr	r0, [r4, #0]
 80002e0:	2200      	movs	r2, #0
 80002e2:	f000 fc6f 	bl	8000bc4 <HAL_GPIO_WritePin>
}
 80002e6:	bd10      	pop	{r4, pc}

080002e8 <led_update>:
 * @brief  Updates the state of an led
 * @param  led: pointer to the led to update
 * @retval None
 */
void led_update(led_t* const led)
{
 80002e8:	b510      	push	{r4, lr}
 80002ea:	0004      	movs	r4, r0
    if (!led->flash_mode)
 80002ec:	7e03      	ldrb	r3, [r0, #24]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d008      	beq.n	8000304 <led_update+0x1c>
	    return;
	
    if (led->state)
 80002f2:	7c03      	ldrb	r3, [r0, #16]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d00e      	beq.n	8000316 <led_update+0x2e>
    {
        if (millis_timeout(&led->timer, led->on_period))
 80002f8:	3014      	adds	r0, #20
 80002fa:	68a1      	ldr	r1, [r4, #8]
 80002fc:	f000 f82d 	bl	800035a <millis_timeout>
 8000300:	2800      	cmp	r0, #0
 8000302:	d100      	bne.n	8000306 <led_update+0x1e>
        {
            led->state = true;
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
        }
    }
}
 8000304:	bd10      	pop	{r4, pc}
            led->state = false;
 8000306:	2300      	movs	r3, #0
 8000308:	7423      	strb	r3, [r4, #16]
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800030a:	88a1      	ldrh	r1, [r4, #4]
 800030c:	6820      	ldr	r0, [r4, #0]
 800030e:	2200      	movs	r2, #0
 8000310:	f000 fc58 	bl	8000bc4 <HAL_GPIO_WritePin>
 8000314:	e7f6      	b.n	8000304 <led_update+0x1c>
        if (millis_timeout(&led->timer, led->on_period))
 8000316:	3014      	adds	r0, #20
 8000318:	68a1      	ldr	r1, [r4, #8]
 800031a:	f000 f81e 	bl	800035a <millis_timeout>
 800031e:	2800      	cmp	r0, #0
 8000320:	d0f0      	beq.n	8000304 <led_update+0x1c>
            led->state = true;
 8000322:	2301      	movs	r3, #1
 8000324:	7423      	strb	r3, [r4, #16]
            HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000326:	88a1      	ldrh	r1, [r4, #4]
 8000328:	6820      	ldr	r0, [r4, #0]
 800032a:	2201      	movs	r2, #1
 800032c:	f000 fc4a 	bl	8000bc4 <HAL_GPIO_WritePin>
 8000330:	e7e8      	b.n	8000304 <led_update+0x1c>

08000332 <led_set_flash_rate>:
 * @param  on_period: on period of the led in milliseconds
 * @param  off_period: off period of the led in milliseconds
 * @retval None
 */
void led_set_flash_rate(led_t* const led, const uint32_t on_period, const uint32_t off_period)
{
 8000332:	b510      	push	{r4, lr}
 8000334:	0004      	movs	r4, r0
    led->on_period = on_period;
 8000336:	6081      	str	r1, [r0, #8]
    led->off_period = off_period;
 8000338:	60c2      	str	r2, [r0, #12]
    led->flash_mode = true;
 800033a:	2301      	movs	r3, #1
 800033c:	7603      	strb	r3, [r0, #24]
    led->timer = millis();
 800033e:	f000 f81c 	bl	800037a <millis>
 8000342:	6160      	str	r0, [r4, #20]
}
 8000344:	bd10      	pop	{r4, pc}

08000346 <led_off>:
 * @brief  Turns off an led
 * @param  led: pointer to the led to turn off
 * @retval None
 */
void led_off(led_t* const led)
{
 8000346:	b510      	push	{r4, lr}
    led->state = false;
 8000348:	2300      	movs	r3, #0
 800034a:	7403      	strb	r3, [r0, #16]
    led->flash_mode = false;
 800034c:	7603      	strb	r3, [r0, #24]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 800034e:	8881      	ldrh	r1, [r0, #4]
 8000350:	6800      	ldr	r0, [r0, #0]
 8000352:	2200      	movs	r2, #0
 8000354:	f000 fc36 	bl	8000bc4 <HAL_GPIO_WritePin>
}
 8000358:	bd10      	pop	{r4, pc}

0800035a <millis_timeout>:
 * @param[in] reference_time A pointer to the reference time in milliseconds.
 * @param[in] interval The time interval in milliseconds to check against.
 * @return true if the interval has passed, false otherwise.
 */
bool millis_timeout(millis_t* reference_time, millis_t interval)
{
 800035a:	b570      	push	{r4, r5, r6, lr}
 800035c:	0004      	movs	r4, r0
 800035e:	000d      	movs	r5, r1
    if (HAL_GetTick() - *reference_time > interval)
 8000360:	f000 fa68 	bl	8000834 <HAL_GetTick>
 8000364:	6823      	ldr	r3, [r4, #0]
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	42a8      	cmp	r0, r5
 800036a:	d801      	bhi.n	8000370 <millis_timeout+0x16>
    {
        *reference_time = HAL_GetTick();
        return true;
    }
    return false;
 800036c:	2000      	movs	r0, #0
}
 800036e:	bd70      	pop	{r4, r5, r6, pc}
        *reference_time = HAL_GetTick();
 8000370:	f000 fa60 	bl	8000834 <HAL_GetTick>
 8000374:	6020      	str	r0, [r4, #0]
        return true;
 8000376:	2001      	movs	r0, #1
 8000378:	e7f9      	b.n	800036e <millis_timeout+0x14>

0800037a <millis>:
 * @brief Returns the current systick in milliseconds
 *
 * @return The current systick value in milliseconds.
 */
millis_t millis(void)
{
 800037a:	b510      	push	{r4, lr}
    return HAL_GetTick();
 800037c:	f000 fa5a 	bl	8000834 <HAL_GetTick>
}
 8000380:	bd10      	pop	{r4, pc}
	...

08000384 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000384:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000386:	480c      	ldr	r0, [pc, #48]	; (80003b8 <MX_CAN_Init+0x34>)
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_CAN_Init+0x38>)
 800038a:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 16;
 800038c:	2310      	movs	r3, #16
 800038e:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000390:	2300      	movs	r3, #0
 8000392:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000394:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000396:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000398:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039a:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800039c:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800039e:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003a0:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a2:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003a4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003a6:	f000 fa4b 	bl	8000840 <HAL_CAN_Init>
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d100      	bne.n	80003b0 <MX_CAN_Init+0x2c>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ae:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003b0:	f000 f900 	bl	80005b4 <Error_Handler>
}
 80003b4:	e7fb      	b.n	80003ae <MX_CAN_Init+0x2a>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000064 	.word	0x20000064
 80003bc:	40006400 	.word	0x40006400

080003c0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003c0:	b510      	push	{r4, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	2214      	movs	r2, #20
 80003c8:	2100      	movs	r1, #0
 80003ca:	a803      	add	r0, sp, #12
 80003cc:	f001 fbea 	bl	8001ba4 <memset>
  if(canHandle->Instance==CAN)
 80003d0:	6822      	ldr	r2, [r4, #0]
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <HAL_CAN_MspInit+0x60>)
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d001      	beq.n	80003dc <HAL_CAN_MspInit+0x1c>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80003d8:	b008      	add	sp, #32
 80003da:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <HAL_CAN_MspInit+0x64>)
 80003de:	69d9      	ldr	r1, [r3, #28]
 80003e0:	2080      	movs	r0, #128	; 0x80
 80003e2:	0480      	lsls	r0, r0, #18
 80003e4:	4301      	orrs	r1, r0
 80003e6:	61d9      	str	r1, [r3, #28]
 80003e8:	69da      	ldr	r2, [r3, #28]
 80003ea:	4002      	ands	r2, r0
 80003ec:	9201      	str	r2, [sp, #4]
 80003ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	02c9      	lsls	r1, r1, #11
 80003f6:	430a      	orrs	r2, r1
 80003f8:	615a      	str	r2, [r3, #20]
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	400b      	ands	r3, r1
 80003fe:	9302      	str	r3, [sp, #8]
 8000400:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000402:	23c0      	movs	r3, #192	; 0xc0
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000408:	2302      	movs	r3, #2
 800040a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040c:	3301      	adds	r3, #1
 800040e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000410:	3301      	adds	r3, #1
 8000412:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	a903      	add	r1, sp, #12
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <HAL_CAN_MspInit+0x68>)
 8000418:	f000 fb06 	bl	8000a28 <HAL_GPIO_Init>
}
 800041c:	e7dc      	b.n	80003d8 <HAL_CAN_MspInit+0x18>
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40006400 	.word	0x40006400
 8000424:	40021000 	.word	0x40021000
 8000428:	48000400 	.word	0x48000400

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	2214      	movs	r2, #20
 8000432:	2100      	movs	r1, #0
 8000434:	a805      	add	r0, sp, #20
 8000436:	f001 fbb5 	bl	8001ba4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <MX_GPIO_Init+0x80>)
 800043c:	6959      	ldr	r1, [r3, #20]
 800043e:	2080      	movs	r0, #128	; 0x80
 8000440:	0300      	lsls	r0, r0, #12
 8000442:	4301      	orrs	r1, r0
 8000444:	6159      	str	r1, [r3, #20]
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	4002      	ands	r2, r0
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	6959      	ldr	r1, [r3, #20]
 8000450:	2080      	movs	r0, #128	; 0x80
 8000452:	03c0      	lsls	r0, r0, #15
 8000454:	4301      	orrs	r1, r0
 8000456:	6159      	str	r1, [r3, #20]
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4002      	ands	r2, r0
 800045c:	9202      	str	r2, [sp, #8]
 800045e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	6959      	ldr	r1, [r3, #20]
 8000462:	2080      	movs	r0, #128	; 0x80
 8000464:	02c0      	lsls	r0, r0, #11
 8000466:	4301      	orrs	r1, r0
 8000468:	6159      	str	r1, [r3, #20]
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	4002      	ands	r2, r0
 800046e:	9203      	str	r2, [sp, #12]
 8000470:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0289      	lsls	r1, r1, #10
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	400b      	ands	r3, r1
 8000480:	9304      	str	r3, [sp, #16]
 8000482:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000484:	25c0      	movs	r5, #192	; 0xc0
 8000486:	022d      	lsls	r5, r5, #8
 8000488:	4c09      	ldr	r4, [pc, #36]	; (80004b0 <MX_GPIO_Init+0x84>)
 800048a:	2200      	movs	r2, #0
 800048c:	0029      	movs	r1, r5
 800048e:	0020      	movs	r0, r4
 8000490:	f000 fb98 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|ERROR_LED_Pin;
 8000494:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a0:	a905      	add	r1, sp, #20
 80004a2:	0020      	movs	r0, r4
 80004a4:	f000 fac0 	bl	8000a28 <HAL_GPIO_Init>

}
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800

080004b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80004b4:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <MX_I2C2_Init+0x54>)
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_I2C2_Init+0x58>)
 80004ba:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_I2C2_Init+0x5c>)
 80004be:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c4:	2201      	movs	r2, #1
 80004c6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c8:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004ca:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004cc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ce:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004d2:	f000 fb7d 	bl	8000bd0 <HAL_I2C_Init>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d10c      	bne.n	80004f4 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	480a      	ldr	r0, [pc, #40]	; (8000508 <MX_I2C2_Init+0x54>)
 80004de:	f000 fbdd 	bl	8000c9c <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d109      	bne.n	80004fa <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <MX_I2C2_Init+0x54>)
 80004ea:	f000 fc03 	bl	8000cf4 <HAL_I2CEx_ConfigDigitalFilter>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d106      	bne.n	8000500 <MX_I2C2_Init+0x4c>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004f4:	f000 f85e 	bl	80005b4 <Error_Handler>
 80004f8:	e7ef      	b.n	80004da <MX_I2C2_Init+0x26>
    Error_Handler();
 80004fa:	f000 f85b 	bl	80005b4 <Error_Handler>
 80004fe:	e7f2      	b.n	80004e6 <MX_I2C2_Init+0x32>
    Error_Handler();
 8000500:	f000 f858 	bl	80005b4 <Error_Handler>
}
 8000504:	e7f5      	b.n	80004f2 <MX_I2C2_Init+0x3e>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	2000008c 	.word	0x2000008c
 800050c:	40005800 	.word	0x40005800
 8000510:	20303e5d 	.word	0x20303e5d

08000514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000514:	b510      	push	{r4, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	2214      	movs	r2, #20
 800051c:	2100      	movs	r1, #0
 800051e:	a803      	add	r0, sp, #12
 8000520:	f001 fb40 	bl	8001ba4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000524:	6822      	ldr	r2, [r4, #0]
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_I2C_MspInit+0x60>)
 8000528:	429a      	cmp	r2, r3
 800052a:	d001      	beq.n	8000530 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800052c:	b008      	add	sp, #32
 800052e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4c11      	ldr	r4, [pc, #68]	; (8000578 <HAL_I2C_MspInit+0x64>)
 8000532:	6962      	ldr	r2, [r4, #20]
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	02c9      	lsls	r1, r1, #11
 8000538:	430a      	orrs	r2, r1
 800053a:	6162      	str	r2, [r4, #20]
 800053c:	6963      	ldr	r3, [r4, #20]
 800053e:	400b      	ands	r3, r1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000544:	23c0      	movs	r3, #192	; 0xc0
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800054a:	2312      	movs	r3, #18
 800054c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	3b0f      	subs	r3, #15
 8000550:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000552:	3b02      	subs	r3, #2
 8000554:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	a903      	add	r1, sp, #12
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <HAL_I2C_MspInit+0x68>)
 800055a:	f000 fa65 	bl	8000a28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800055e:	69e2      	ldr	r2, [r4, #28]
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	03c9      	lsls	r1, r1, #15
 8000564:	430a      	orrs	r2, r1
 8000566:	61e2      	str	r2, [r4, #28]
 8000568:	69e3      	ldr	r3, [r4, #28]
 800056a:	400b      	ands	r3, r1
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	9b02      	ldr	r3, [sp, #8]
}
 8000570:	e7dc      	b.n	800052c <HAL_I2C_MspInit+0x18>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40005800 	.word	0x40005800
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400

08000580 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000580:	b510      	push	{r4, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <MX_IWDG_Init+0x24>)
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_IWDG_Init+0x28>)
 8000586:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000588:	2304      	movs	r3, #4
 800058a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_IWDG_Init+0x2c>)
 800058e:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 3124;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_IWDG_Init+0x30>)
 8000592:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000594:	f000 fbd8 	bl	8000d48 <HAL_IWDG_Init>
 8000598:	2800      	cmp	r0, #0
 800059a:	d100      	bne.n	800059e <MX_IWDG_Init+0x1e>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800059c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800059e:	f000 f809 	bl	80005b4 <Error_Handler>
}
 80005a2:	e7fb      	b.n	800059c <MX_IWDG_Init+0x1c>
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	40003000 	.word	0x40003000
 80005ac:	00000fff 	.word	0x00000fff
 80005b0:	00000c34 	.word	0x00000c34

080005b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <Error_Handler+0x2>

080005b8 <SystemClock_Config>:
{
 80005b8:	b500      	push	{lr}
 80005ba:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	2234      	movs	r2, #52	; 0x34
 80005be:	2100      	movs	r1, #0
 80005c0:	a80b      	add	r0, sp, #44	; 0x2c
 80005c2:	f001 faef 	bl	8001ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2210      	movs	r2, #16
 80005c8:	2100      	movs	r1, #0
 80005ca:	a807      	add	r0, sp, #28
 80005cc:	f001 faea 	bl	8001ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	221c      	movs	r2, #28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4668      	mov	r0, sp
 80005d6:	f001 fae5 	bl	8001ba4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005da:	2309      	movs	r3, #9
 80005dc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005de:	3b08      	subs	r3, #8
 80005e0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	3301      	adds	r3, #1
 80005e6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	025b      	lsls	r3, r3, #9
 80005ec:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	031b      	lsls	r3, r3, #12
 80005f2:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	a80b      	add	r0, sp, #44	; 0x2c
 80005f6:	f000 fbe3 	bl	8000dc0 <HAL_RCC_OscConfig>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d117      	bne.n	800062e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	2307      	movs	r3, #7
 8000600:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	3b05      	subs	r3, #5
 8000604:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060c:	2101      	movs	r1, #1
 800060e:	a807      	add	r0, sp, #28
 8000610:	f000 feba 	bl	8001388 <HAL_RCC_ClockConfig>
 8000614:	2800      	cmp	r0, #0
 8000616:	d10c      	bne.n	8000632 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000618:	2301      	movs	r3, #1
 800061a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800061c:	2300      	movs	r3, #0
 800061e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000620:	4668      	mov	r0, sp
 8000622:	f000 ff69 	bl	80014f8 <HAL_RCCEx_PeriphCLKConfig>
 8000626:	2800      	cmp	r0, #0
 8000628:	d105      	bne.n	8000636 <SystemClock_Config+0x7e>
}
 800062a:	b019      	add	sp, #100	; 0x64
 800062c:	bd00      	pop	{pc}
    Error_Handler();
 800062e:	f7ff ffc1 	bl	80005b4 <Error_Handler>
    Error_Handler();
 8000632:	f7ff ffbf 	bl	80005b4 <Error_Handler>
    Error_Handler();
 8000636:	f7ff ffbd 	bl	80005b4 <Error_Handler>
	...

0800063c <main>:
{
 800063c:	b510      	push	{r4, lr}
  HAL_Init();
 800063e:	f000 f8dd 	bl	80007fc <HAL_Init>
  SystemClock_Config();
 8000642:	f7ff ffb9 	bl	80005b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000646:	f7ff fef1 	bl	800042c <MX_GPIO_Init>
  MX_CAN_Init();
 800064a:	f7ff fe9b 	bl	8000384 <MX_CAN_Init>
  MX_I2C2_Init();
 800064e:	f7ff ff31 	bl	80004b4 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000652:	f7ff ff95 	bl	8000580 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f82b 	bl	80006b0 <MX_USART1_UART_Init>
	  app_task();
 800065a:	f7ff fde1 	bl	8000220 <app_task>
	  HAL_IWDG_Refresh(&hiwdg);
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <main+0x2c>)
 8000660:	f000 fba6 	bl	8000db0 <HAL_IWDG_Refresh>
  while (1)
 8000664:	e7f9      	b.n	800065a <main+0x1e>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	200000e0 	.word	0x200000e0

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x2c>)
 8000670:	6999      	ldr	r1, [r3, #24]
 8000672:	2201      	movs	r2, #1
 8000674:	4311      	orrs	r1, r2
 8000676:	6199      	str	r1, [r3, #24]
 8000678:	6999      	ldr	r1, [r3, #24]
 800067a:	400a      	ands	r2, r1
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	69da      	ldr	r2, [r3, #28]
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0549      	lsls	r1, r1, #21
 8000686:	430a      	orrs	r2, r1
 8000688:	61da      	str	r2, [r3, #28]
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	400b      	ands	r3, r1
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	b002      	add	sp, #8
 8000694:	4770      	bx	lr
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler>

0800069e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler>

080006a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	4770      	bx	lr

080006a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f8b9 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bd10      	pop	{r4, pc}

080006ac <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006ac:	4770      	bx	lr
	...

080006b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006b0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_USART1_UART_Init+0x38>)
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_USART1_UART_Init+0x3c>)
 80006b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80006b8:	2396      	movs	r3, #150	; 0x96
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	2300      	movs	r3, #0
 80006c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c6:	220c      	movs	r2, #12
 80006c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f001 f9f9 	bl	8001acc <HAL_RS485Ex_Init>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d100      	bne.n	80006e0 <MX_USART1_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006de:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006e0:	f7ff ff68 	bl	80005b4 <Error_Handler>
}
 80006e4:	e7fb      	b.n	80006de <MX_USART1_UART_Init+0x2e>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200000f0 	.word	0x200000f0
 80006ec:	40013800 	.word	0x40013800

080006f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006f0:	b510      	push	{r4, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	2214      	movs	r2, #20
 80006f8:	2100      	movs	r1, #0
 80006fa:	a803      	add	r0, sp, #12
 80006fc:	f001 fa52 	bl	8001ba4 <memset>
  if(uartHandle->Instance==USART1)
 8000700:	6822      	ldr	r2, [r4, #0]
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_UART_MspInit+0x60>)
 8000704:	429a      	cmp	r2, r3
 8000706:	d001      	beq.n	800070c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000708:	b008      	add	sp, #32
 800070a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_UART_MspInit+0x64>)
 800070e:	6999      	ldr	r1, [r3, #24]
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	01c0      	lsls	r0, r0, #7
 8000714:	4301      	orrs	r1, r0
 8000716:	6199      	str	r1, [r3, #24]
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	4002      	ands	r2, r0
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0289      	lsls	r1, r1, #10
 8000726:	430a      	orrs	r2, r1
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	400b      	ands	r3, r1
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000732:	23b0      	movs	r3, #176	; 0xb0
 8000734:	015b      	lsls	r3, r3, #5
 8000736:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	3301      	adds	r3, #1
 800073e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000740:	3b02      	subs	r3, #2
 8000742:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	2090      	movs	r0, #144	; 0x90
 8000746:	a903      	add	r1, sp, #12
 8000748:	05c0      	lsls	r0, r0, #23
 800074a:	f000 f96d 	bl	8000a28 <HAL_GPIO_Init>
}
 800074e:	e7db      	b.n	8000708 <HAL_UART_MspInit+0x18>
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000

08000758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800075c:	f7ff ffa6 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000786:	f001 f9e9 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff ff57 	bl	800063c <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800079c:	08001c0c 	.word	0x08001c0c
  ldr r2, =_sbss
 80007a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a4:	2000017c 	.word	0x2000017c

080007a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_COMP_IRQHandler>
	...

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b510      	push	{r4, lr}
 80007ae:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_InitTick+0x44>)
 80007b2:	7819      	ldrb	r1, [r3, #0]
 80007b4:	20fa      	movs	r0, #250	; 0xfa
 80007b6:	0080      	lsls	r0, r0, #2
 80007b8:	f7ff fca6 	bl	8000108 <__udivsi3>
 80007bc:	0001      	movs	r1, r0
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_InitTick+0x48>)
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f7ff fca1 	bl	8000108 <__udivsi3>
 80007c6:	f000 f913 	bl	80009f0 <HAL_SYSTICK_Config>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d10d      	bne.n	80007ea <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	2c03      	cmp	r4, #3
 80007d0:	d901      	bls.n	80007d6 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80007d2:	2001      	movs	r0, #1
 80007d4:	e00a      	b.n	80007ec <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	3001      	adds	r0, #1
 80007d8:	2200      	movs	r2, #0
 80007da:	0021      	movs	r1, r4
 80007dc:	4240      	negs	r0, r0
 80007de:	f000 f8d7 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_InitTick+0x4c>)
 80007e4:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 80007e6:	2000      	movs	r0, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x40>
    return HAL_ERROR;
 80007ea:	2001      	movs	r0, #1
}
 80007ec:	bd10      	pop	{r4, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000004 	.word	0x20000004
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_Init>:
{
 80007fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_Init+0x1c>)
 8000800:	6813      	ldr	r3, [r2, #0]
 8000802:	2110      	movs	r1, #16
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000808:	2003      	movs	r0, #3
 800080a:	f7ff ffcf 	bl	80007ac <HAL_InitTick>
  HAL_MspInit();
 800080e:	f7ff ff2d 	bl	800066c <HAL_MspInit>
}
 8000812:	2000      	movs	r0, #0
 8000814:	bd10      	pop	{r4, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x10>)
 800081e:	6811      	ldr	r1, [r2, #0]
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_IncTick+0x14>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	185b      	adds	r3, r3, r1
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	4770      	bx	lr
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000178 	.word	0x20000178
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <HAL_GetTick+0x8>)
 8000836:	6818      	ldr	r0, [r3, #0]
}
 8000838:	4770      	bx	lr
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000178 	.word	0x20000178

08000840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000844:	d100      	bne.n	8000848 <HAL_CAN_Init+0x8>
 8000846:	e0a0      	b.n	800098a <HAL_CAN_Init+0x14a>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000848:	2320      	movs	r3, #32
 800084a:	5cc3      	ldrb	r3, [r0, r3]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01a      	beq.n	8000886 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000850:	6822      	ldr	r2, [r4, #0]
 8000852:	6813      	ldr	r3, [r2, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	430b      	orrs	r3, r1
 8000858:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800085a:	f7ff ffeb 	bl	8000834 <HAL_GetTick>
 800085e:	0005      	movs	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	07d2      	lsls	r2, r2, #31
 8000866:	d411      	bmi.n	800088c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000868:	f7ff ffe4 	bl	8000834 <HAL_GetTick>
 800086c:	1b40      	subs	r0, r0, r5
 800086e:	280a      	cmp	r0, #10
 8000870:	d9f6      	bls.n	8000860 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000872:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	029b      	lsls	r3, r3, #10
 8000878:	4313      	orrs	r3, r2
 800087a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800087c:	2320      	movs	r3, #32
 800087e:	2205      	movs	r2, #5
 8000880:	54e2      	strb	r2, [r4, r3]

      return HAL_ERROR;
 8000882:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000884:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8000886:	f7ff fd9b 	bl	80003c0 <HAL_CAN_MspInit>
 800088a:	e7e1      	b.n	8000850 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	2102      	movs	r1, #2
 8000890:	438a      	bics	r2, r1
 8000892:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000894:	f7ff ffce 	bl	8000834 <HAL_GetTick>
 8000898:	0005      	movs	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	0792      	lsls	r2, r2, #30
 80008a0:	d50e      	bpl.n	80008c0 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008a2:	f7ff ffc7 	bl	8000834 <HAL_GetTick>
 80008a6:	1b40      	subs	r0, r0, r5
 80008a8:	280a      	cmp	r0, #10
 80008aa:	d9f6      	bls.n	800089a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	029b      	lsls	r3, r3, #10
 80008b2:	4313      	orrs	r3, r2
 80008b4:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80008b6:	2320      	movs	r3, #32
 80008b8:	2205      	movs	r2, #5
 80008ba:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80008bc:	2001      	movs	r0, #1
 80008be:	e7e1      	b.n	8000884 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008c0:	7e22      	ldrb	r2, [r4, #24]
 80008c2:	2a01      	cmp	r2, #1
 80008c4:	d03e      	beq.n	8000944 <HAL_CAN_Init+0x104>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	438a      	bics	r2, r1
 80008cc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80008ce:	7e63      	ldrb	r3, [r4, #25]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d03c      	beq.n	800094e <HAL_CAN_Init+0x10e>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	438b      	bics	r3, r1
 80008dc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008de:	7ea3      	ldrb	r3, [r4, #26]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d03a      	beq.n	800095a <HAL_CAN_Init+0x11a>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e4:	6822      	ldr	r2, [r4, #0]
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	2120      	movs	r1, #32
 80008ea:	438b      	bics	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ee:	7ee3      	ldrb	r3, [r4, #27]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d038      	beq.n	8000966 <HAL_CAN_Init+0x126>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008f4:	6822      	ldr	r2, [r4, #0]
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	2110      	movs	r1, #16
 80008fa:	430b      	orrs	r3, r1
 80008fc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008fe:	7f23      	ldrb	r3, [r4, #28]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d036      	beq.n	8000972 <HAL_CAN_Init+0x132>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000904:	6822      	ldr	r2, [r4, #0]
 8000906:	6813      	ldr	r3, [r2, #0]
 8000908:	2108      	movs	r1, #8
 800090a:	438b      	bics	r3, r1
 800090c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800090e:	7f63      	ldrb	r3, [r4, #29]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d034      	beq.n	800097e <HAL_CAN_Init+0x13e>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000914:	6822      	ldr	r2, [r4, #0]
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	2104      	movs	r1, #4
 800091a:	438b      	bics	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800091e:	68a3      	ldr	r3, [r4, #8]
 8000920:	68e2      	ldr	r2, [r4, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	6922      	ldr	r2, [r4, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	6962      	ldr	r2, [r4, #20]
 800092a:	4313      	orrs	r3, r2
 800092c:	6862      	ldr	r2, [r4, #4]
 800092e:	3a01      	subs	r2, #1
 8000930:	6821      	ldr	r1, [r4, #0]
 8000932:	4313      	orrs	r3, r2
 8000934:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	6263      	str	r3, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800093a:	3320      	adds	r3, #32
 800093c:	2201      	movs	r2, #1
 800093e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e79f      	b.n	8000884 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e7bf      	b.n	80008ce <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800094e:	6822      	ldr	r2, [r4, #0]
 8000950:	6813      	ldr	r3, [r2, #0]
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	e7c1      	b.n	80008de <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095a:	6822      	ldr	r2, [r4, #0]
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	2120      	movs	r1, #32
 8000960:	430b      	orrs	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e7c3      	b.n	80008ee <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	2110      	movs	r1, #16
 800096c:	438b      	bics	r3, r1
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e7c5      	b.n	80008fe <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	6813      	ldr	r3, [r2, #0]
 8000976:	2108      	movs	r1, #8
 8000978:	430b      	orrs	r3, r1
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e7c7      	b.n	800090e <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800097e:	6822      	ldr	r2, [r4, #0]
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	2104      	movs	r1, #4
 8000984:	430b      	orrs	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e7c9      	b.n	800091e <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
 800098c:	e77a      	b.n	8000884 <HAL_CAN_Init+0x44>
	...

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000992:	2800      	cmp	r0, #0
 8000994:	db11      	blt.n	80009ba <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000996:	0883      	lsrs	r3, r0, #2
 8000998:	4e13      	ldr	r6, [pc, #76]	; (80009e8 <HAL_NVIC_SetPriority+0x58>)
 800099a:	33c0      	adds	r3, #192	; 0xc0
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	599d      	ldr	r5, [r3, r6]
 80009a0:	2403      	movs	r4, #3
 80009a2:	4020      	ands	r0, r4
 80009a4:	00c0      	lsls	r0, r0, #3
 80009a6:	22ff      	movs	r2, #255	; 0xff
 80009a8:	0014      	movs	r4, r2
 80009aa:	4084      	lsls	r4, r0
 80009ac:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ae:	0189      	lsls	r1, r1, #6
 80009b0:	400a      	ands	r2, r1
 80009b2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b4:	432a      	orrs	r2, r5
 80009b6:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ba:	230f      	movs	r3, #15
 80009bc:	4003      	ands	r3, r0
 80009be:	3b08      	subs	r3, #8
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3306      	adds	r3, #6
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_NVIC_SetPriority+0x5c>)
 80009c8:	4694      	mov	ip, r2
 80009ca:	4463      	add	r3, ip
 80009cc:	685c      	ldr	r4, [r3, #4]
 80009ce:	2203      	movs	r2, #3
 80009d0:	4010      	ands	r0, r2
 80009d2:	00c0      	lsls	r0, r0, #3
 80009d4:	32fc      	adds	r2, #252	; 0xfc
 80009d6:	0015      	movs	r5, r2
 80009d8:	4085      	lsls	r5, r0
 80009da:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009dc:	0189      	lsls	r1, r1, #6
 80009de:	400a      	ands	r2, r1
 80009e0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e2:	4322      	orrs	r2, r4
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	e7e7      	b.n	80009b8 <HAL_NVIC_SetPriority+0x28>
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	3801      	subs	r0, #1
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	045b      	lsls	r3, r3, #17
 80009f6:	4298      	cmp	r0, r3
 80009f8:	d20f      	bcs.n	8000a1a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <HAL_SYSTICK_Config+0x30>)
 80009fc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <HAL_SYSTICK_Config+0x34>)
 8000a00:	6a03      	ldr	r3, [r0, #32]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	21c0      	movs	r1, #192	; 0xc0
 8000a08:	0609      	lsls	r1, r1, #24
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0e:	2300      	movs	r3, #0
 8000a10:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	3307      	adds	r3, #7
 8000a14:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a16:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000a1c:	e7fc      	b.n	8000a18 <HAL_SYSTICK_Config+0x28>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	e000e010 	.word	0xe000e010
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000a2c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e057      	b.n	8000ae0 <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a32:	005f      	lsls	r7, r3, #1
 8000a34:	2603      	movs	r6, #3
 8000a36:	40be      	lsls	r6, r7
 8000a38:	43b4      	bics	r4, r6
 8000a3a:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	68cc      	ldr	r4, [r1, #12]
 8000a3e:	40bc      	lsls	r4, r7
 8000a40:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000a42:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a46:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a48:	684a      	ldr	r2, [r1, #4]
 8000a4a:	0916      	lsrs	r6, r2, #4
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4032      	ands	r2, r6
 8000a50:	409a      	lsls	r2, r3
 8000a52:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000a54:	6042      	str	r2, [r0, #4]
 8000a56:	e053      	b.n	8000b00 <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a58:	08dc      	lsrs	r4, r3, #3
 8000a5a:	3408      	adds	r4, #8
 8000a5c:	00a4      	lsls	r4, r4, #2
 8000a5e:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	3205      	adds	r2, #5
 8000a62:	401a      	ands	r2, r3
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	270f      	movs	r7, #15
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6c:	690f      	ldr	r7, [r1, #16]
 8000a6e:	4097      	lsls	r7, r2
 8000a70:	003a      	movs	r2, r7
 8000a72:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8000a74:	5022      	str	r2, [r4, r0]
 8000a76:	e057      	b.n	8000b28 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a78:	2604      	movs	r6, #4
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x56>
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	40a6      	lsls	r6, r4
 8000a80:	0034      	movs	r4, r6
 8000a82:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a84:	3202      	adds	r2, #2
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4e47      	ldr	r6, [pc, #284]	; (8000ba8 <HAL_GPIO_Init+0x180>)
 8000a8a:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8c:	4a47      	ldr	r2, [pc, #284]	; (8000bac <HAL_GPIO_Init+0x184>)
 8000a8e:	6894      	ldr	r4, [r2, #8]
        temp &= ~(iocurrent);
 8000a90:	43ea      	mvns	r2, r5
 8000a92:	0026      	movs	r6, r4
 8000a94:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a96:	684f      	ldr	r7, [r1, #4]
 8000a98:	02ff      	lsls	r7, r7, #11
 8000a9a:	d501      	bpl.n	8000aa0 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000a9c:	432c      	orrs	r4, r5
 8000a9e:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8000aa0:	4c42      	ldr	r4, [pc, #264]	; (8000bac <HAL_GPIO_Init+0x184>)
 8000aa2:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000aa4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8000aa6:	0026      	movs	r6, r4
 8000aa8:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aaa:	684f      	ldr	r7, [r1, #4]
 8000aac:	02bf      	lsls	r7, r7, #10
 8000aae:	d501      	bpl.n	8000ab4 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8000ab0:	432c      	orrs	r4, r5
 8000ab2:	0026      	movs	r6, r4
        }
        EXTI->FTSR = temp;
 8000ab4:	4c3d      	ldr	r4, [pc, #244]	; (8000bac <HAL_GPIO_Init+0x184>)
 8000ab6:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000ab8:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8000aba:	0026      	movs	r6, r4
 8000abc:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000abe:	684f      	ldr	r7, [r1, #4]
 8000ac0:	03bf      	lsls	r7, r7, #14
 8000ac2:	d501      	bpl.n	8000ac8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8000ac4:	432c      	orrs	r4, r5
 8000ac6:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8000ac8:	4c38      	ldr	r4, [pc, #224]	; (8000bac <HAL_GPIO_Init+0x184>)
 8000aca:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8000acc:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 8000ace:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ad0:	684e      	ldr	r6, [r1, #4]
 8000ad2:	03f6      	lsls	r6, r6, #15
 8000ad4:	d501      	bpl.n	8000ada <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8000ad6:	002a      	movs	r2, r5
 8000ad8:	4322      	orrs	r2, r4
        }
        EXTI->IMR = temp;
 8000ada:	4c34      	ldr	r4, [pc, #208]	; (8000bac <HAL_GPIO_Init+0x184>)
 8000adc:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8000ade:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae0:	680c      	ldr	r4, [r1, #0]
 8000ae2:	0022      	movs	r2, r4
 8000ae4:	40da      	lsrs	r2, r3
 8000ae6:	d05c      	beq.n	8000ba2 <HAL_GPIO_Init+0x17a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0025      	movs	r5, r4
 8000aee:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8000af0:	4214      	tst	r4, r2
 8000af2:	d0f4      	beq.n	8000ade <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af4:	2403      	movs	r4, #3
 8000af6:	684e      	ldr	r6, [r1, #4]
 8000af8:	4034      	ands	r4, r6
 8000afa:	3c01      	subs	r4, #1
 8000afc:	2c01      	cmp	r4, #1
 8000afe:	d997      	bls.n	8000a30 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b00:	2203      	movs	r2, #3
 8000b02:	684c      	ldr	r4, [r1, #4]
 8000b04:	4022      	ands	r2, r4
 8000b06:	2a03      	cmp	r2, #3
 8000b08:	d009      	beq.n	8000b1e <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8000b0a:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b0c:	005e      	lsls	r6, r3, #1
 8000b0e:	2403      	movs	r4, #3
 8000b10:	40b4      	lsls	r4, r6
 8000b12:	43a2      	bics	r2, r4
 8000b14:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b16:	688a      	ldr	r2, [r1, #8]
 8000b18:	40b2      	lsls	r2, r6
 8000b1a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000b1c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	2203      	movs	r2, #3
 8000b20:	684c      	ldr	r4, [r1, #4]
 8000b22:	4022      	ands	r2, r4
 8000b24:	2a02      	cmp	r2, #2
 8000b26:	d097      	beq.n	8000a58 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000b28:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2a:	005e      	lsls	r6, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	0017      	movs	r7, r2
 8000b30:	40b7      	lsls	r7, r6
 8000b32:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b34:	684f      	ldr	r7, [r1, #4]
 8000b36:	403a      	ands	r2, r7
 8000b38:	40b2      	lsls	r2, r6
 8000b3a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b3c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3e:	22c0      	movs	r2, #192	; 0xc0
 8000b40:	0292      	lsls	r2, r2, #10
 8000b42:	684c      	ldr	r4, [r1, #4]
 8000b44:	4214      	tst	r4, r2
 8000b46:	d0ca      	beq.n	8000ade <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4c19      	ldr	r4, [pc, #100]	; (8000bb0 <HAL_GPIO_Init+0x188>)
 8000b4a:	69a6      	ldr	r6, [r4, #24]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4316      	orrs	r6, r2
 8000b50:	61a6      	str	r6, [r4, #24]
 8000b52:	69a4      	ldr	r4, [r4, #24]
 8000b54:	4022      	ands	r2, r4
 8000b56:	9201      	str	r2, [sp, #4]
 8000b58:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5a:	089a      	lsrs	r2, r3, #2
 8000b5c:	1c94      	adds	r4, r2, #2
 8000b5e:	00a4      	lsls	r4, r4, #2
 8000b60:	4e11      	ldr	r6, [pc, #68]	; (8000ba8 <HAL_GPIO_Init+0x180>)
 8000b62:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b64:	2603      	movs	r6, #3
 8000b66:	401e      	ands	r6, r3
 8000b68:	00b4      	lsls	r4, r6, #2
 8000b6a:	260f      	movs	r6, #15
 8000b6c:	40a6      	lsls	r6, r4
 8000b6e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b70:	2690      	movs	r6, #144	; 0x90
 8000b72:	05f6      	lsls	r6, r6, #23
 8000b74:	42b0      	cmp	r0, r6
 8000b76:	d081      	beq.n	8000a7c <HAL_GPIO_Init+0x54>
 8000b78:	4e0e      	ldr	r6, [pc, #56]	; (8000bb4 <HAL_GPIO_Init+0x18c>)
 8000b7a:	42b0      	cmp	r0, r6
 8000b7c:	d00b      	beq.n	8000b96 <HAL_GPIO_Init+0x16e>
 8000b7e:	4e0e      	ldr	r6, [pc, #56]	; (8000bb8 <HAL_GPIO_Init+0x190>)
 8000b80:	42b0      	cmp	r0, r6
 8000b82:	d00a      	beq.n	8000b9a <HAL_GPIO_Init+0x172>
 8000b84:	4e0d      	ldr	r6, [pc, #52]	; (8000bbc <HAL_GPIO_Init+0x194>)
 8000b86:	42b0      	cmp	r0, r6
 8000b88:	d009      	beq.n	8000b9e <HAL_GPIO_Init+0x176>
 8000b8a:	4e0d      	ldr	r6, [pc, #52]	; (8000bc0 <HAL_GPIO_Init+0x198>)
 8000b8c:	42b0      	cmp	r0, r6
 8000b8e:	d100      	bne.n	8000b92 <HAL_GPIO_Init+0x16a>
 8000b90:	e772      	b.n	8000a78 <HAL_GPIO_Init+0x50>
 8000b92:	2605      	movs	r6, #5
 8000b94:	e773      	b.n	8000a7e <HAL_GPIO_Init+0x56>
 8000b96:	2601      	movs	r6, #1
 8000b98:	e771      	b.n	8000a7e <HAL_GPIO_Init+0x56>
 8000b9a:	2602      	movs	r6, #2
 8000b9c:	e76f      	b.n	8000a7e <HAL_GPIO_Init+0x56>
 8000b9e:	2603      	movs	r6, #3
 8000ba0:	e76d      	b.n	8000a7e <HAL_GPIO_Init+0x56>
  } 
}
 8000ba2:	b003      	add	sp, #12
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	40010400 	.word	0x40010400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48001000 	.word	0x48001000

08000bc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bcc:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000bce:	e7fc      	b.n	8000bca <HAL_GPIO_WritePin+0x6>

08000bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bd4:	d059      	beq.n	8000c8a <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bd6:	2341      	movs	r3, #65	; 0x41
 8000bd8:	5cc3      	ldrb	r3, [r0, r3]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d043      	beq.n	8000c66 <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bde:	2341      	movs	r3, #65	; 0x41
 8000be0:	2224      	movs	r2, #36	; 0x24
 8000be2:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be4:	6822      	ldr	r2, [r4, #0]
 8000be6:	6813      	ldr	r3, [r2, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	438b      	bics	r3, r1
 8000bec:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_I2C_Init+0xc0>)
 8000bf2:	6861      	ldr	r1, [r4, #4]
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bf8:	6822      	ldr	r2, [r4, #0]
 8000bfa:	6893      	ldr	r3, [r2, #8]
 8000bfc:	4925      	ldr	r1, [pc, #148]	; (8000c94 <HAL_I2C_Init+0xc4>)
 8000bfe:	400b      	ands	r3, r1
 8000c00:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c02:	68e3      	ldr	r3, [r4, #12]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d034      	beq.n	8000c72 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	2384      	movs	r3, #132	; 0x84
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	68a1      	ldr	r1, [r4, #8]
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c14:	68e3      	ldr	r3, [r4, #12]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d032      	beq.n	8000c80 <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	6851      	ldr	r1, [r2, #4]
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_I2C_Init+0xc8>)
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	68d3      	ldr	r3, [r2, #12]
 8000c28:	491a      	ldr	r1, [pc, #104]	; (8000c94 <HAL_I2C_Init+0xc4>)
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c2e:	6923      	ldr	r3, [r4, #16]
 8000c30:	6962      	ldr	r2, [r4, #20]
 8000c32:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c34:	69a2      	ldr	r2, [r4, #24]
 8000c36:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c38:	6821      	ldr	r1, [r4, #0]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c3e:	6822      	ldr	r2, [r4, #0]
 8000c40:	69e3      	ldr	r3, [r4, #28]
 8000c42:	6a21      	ldr	r1, [r4, #32]
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c56:	2241      	movs	r2, #65	; 0x41
 8000c58:	311f      	adds	r1, #31
 8000c5a:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c5c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5e:	3201      	adds	r2, #1
 8000c60:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
}
 8000c64:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	2200      	movs	r2, #0
 8000c6a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8000c6c:	f7ff fc52 	bl	8000514 <HAL_I2C_MspInit>
 8000c70:	e7b5      	b.n	8000bde <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	68a1      	ldr	r1, [r4, #8]
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6093      	str	r3, [r2, #8]
 8000c7e:	e7c9      	b.n	8000c14 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	e7c7      	b.n	8000c1a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	e7ea      	b.n	8000c64 <HAL_I2C_Init+0x94>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	f0ffffff 	.word	0xf0ffffff
 8000c94:	ffff7fff 	.word	0xffff7fff
 8000c98:	02008000 	.word	0x02008000

08000c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9e:	2341      	movs	r3, #65	; 0x41
 8000ca0:	5cc3      	ldrb	r3, [r0, r3]
 8000ca2:	2b20      	cmp	r3, #32
 8000ca4:	d120      	bne.n	8000ce8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ca6:	3320      	adds	r3, #32
 8000ca8:	5cc3      	ldrb	r3, [r0, r3]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d01e      	beq.n	8000cec <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8000cae:	2440      	movs	r4, #64	; 0x40
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb4:	2541      	movs	r5, #65	; 0x41
 8000cb6:	2324      	movs	r3, #36	; 0x24
 8000cb8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cba:	6806      	ldr	r6, [r0, #0]
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	4393      	bics	r3, r2
 8000cc0:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cc2:	6806      	ldr	r6, [r0, #0]
 8000cc4:	6833      	ldr	r3, [r6, #0]
 8000cc6:	4f0a      	ldr	r7, [pc, #40]	; (8000cf0 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8000cc8:	403b      	ands	r3, r7
 8000cca:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ccc:	6806      	ldr	r6, [r0, #0]
 8000cce:	6833      	ldr	r3, [r6, #0]
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cd4:	6801      	ldr	r1, [r0, #0]
 8000cd6:	680b      	ldr	r3, [r1, #0]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8000ce4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000ce8:	2002      	movs	r0, #2
 8000cea:	e7fc      	b.n	8000ce6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8000cec:	2002      	movs	r0, #2
 8000cee:	e7fa      	b.n	8000ce6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8000cf0:	ffffefff 	.word	0xffffefff

08000cf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cf6:	2341      	movs	r3, #65	; 0x41
 8000cf8:	5cc3      	ldrb	r3, [r0, r3]
 8000cfa:	2b20      	cmp	r3, #32
 8000cfc:	d11e      	bne.n	8000d3c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cfe:	3320      	adds	r3, #32
 8000d00:	5cc3      	ldrb	r3, [r0, r3]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d01c      	beq.n	8000d40 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8000d06:	2440      	movs	r4, #64	; 0x40
 8000d08:	2201      	movs	r2, #1
 8000d0a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d0c:	2541      	movs	r5, #65	; 0x41
 8000d0e:	2324      	movs	r3, #36	; 0x24
 8000d10:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d12:	6806      	ldr	r6, [r0, #0]
 8000d14:	6833      	ldr	r3, [r6, #0]
 8000d16:	4393      	bics	r3, r2
 8000d18:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d1a:	6806      	ldr	r6, [r0, #0]
 8000d1c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d1e:	4f09      	ldr	r7, [pc, #36]	; (8000d44 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8000d20:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d22:	0209      	lsls	r1, r1, #8
 8000d24:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d26:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d28:	6801      	ldr	r1, [r0, #0]
 8000d2a:	680b      	ldr	r3, [r1, #0]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d30:	2320      	movs	r3, #32
 8000d32:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d34:	2300      	movs	r3, #0
 8000d36:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8000d38:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	e7fc      	b.n	8000d3a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8000d40:	2002      	movs	r0, #2
 8000d42:	e7fa      	b.n	8000d3a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8000d44:	fffff0ff 	.word	0xfffff0ff

08000d48 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000d48:	b570      	push	{r4, r5, r6, lr}
 8000d4a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000d4c:	d028      	beq.n	8000da0 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000d4e:	6803      	ldr	r3, [r0, #0]
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_IWDG_Init+0x5c>)
 8000d52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_IWDG_Init+0x60>)
 8000d58:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000d5a:	6803      	ldr	r3, [r0, #0]
 8000d5c:	6842      	ldr	r2, [r0, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	6882      	ldr	r2, [r0, #8]
 8000d64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000d66:	f7ff fd65 	bl	8000834 <HAL_GetTick>
 8000d6a:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	0752      	lsls	r2, r2, #29
 8000d72:	d00a      	beq.n	8000d8a <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000d74:	f7ff fd5e 	bl	8000834 <HAL_GetTick>
 8000d78:	1b40      	subs	r0, r0, r5
 8000d7a:	2827      	cmp	r0, #39	; 0x27
 8000d7c:	d9f6      	bls.n	8000d6c <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	075b      	lsls	r3, r3, #29
 8000d84:	d0f2      	beq.n	8000d6c <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8000d86:	2003      	movs	r0, #3
 8000d88:	e00b      	b.n	8000da2 <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8000d8a:	6919      	ldr	r1, [r3, #16]
 8000d8c:	68e2      	ldr	r2, [r4, #12]
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	d002      	beq.n	8000d98 <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000d92:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	e004      	b.n	8000da2 <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IWDG_Init+0x64>)
 8000d9a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e000      	b.n	8000da2 <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
}
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	0000cccc 	.word	0x0000cccc
 8000da8:	00005555 	.word	0x00005555
 8000dac:	0000aaaa 	.word	0x0000aaaa

08000db0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000db0:	6803      	ldr	r3, [r0, #0]
 8000db2:	4a02      	ldr	r2, [pc, #8]	; (8000dbc <HAL_IWDG_Refresh+0xc>)
 8000db4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000db6:	2000      	movs	r0, #0
 8000db8:	4770      	bx	lr
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	0000aaaa 	.word	0x0000aaaa

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc6:	d100      	bne.n	8000dca <HAL_RCC_OscConfig+0xa>
 8000dc8:	e27f      	b.n	80012ca <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	6803      	ldr	r3, [r0, #0]
 8000dcc:	07db      	lsls	r3, r3, #31
 8000dce:	d52b      	bpl.n	8000e28 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd0:	4bb3      	ldr	r3, [pc, #716]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d01d      	beq.n	8000e18 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ddc:	4bb0      	ldr	r3, [pc, #704]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	230c      	movs	r3, #12
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d00e      	beq.n	8000e06 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	6863      	ldr	r3, [r4, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d041      	beq.n	8000e72 <HAL_RCC_OscConfig+0xb2>
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d156      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
 8000df2:	4bab      	ldr	r3, [pc, #684]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	49ab      	ldr	r1, [pc, #684]	; (80010a4 <HAL_RCC_OscConfig+0x2e4>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	49aa      	ldr	r1, [pc, #680]	; (80010a8 <HAL_RCC_OscConfig+0x2e8>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e03b      	b.n	8000e7e <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e06:	4ba6      	ldr	r3, [pc, #664]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	22c0      	movs	r2, #192	; 0xc0
 8000e0c:	0252      	lsls	r2, r2, #9
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	0252      	lsls	r2, r2, #9
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d1e7      	bne.n	8000de8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	039b      	lsls	r3, r3, #14
 8000e1e:	d503      	bpl.n	8000e28 <HAL_RCC_OscConfig+0x68>
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x68>
 8000e26:	e253      	b.n	80012d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	079b      	lsls	r3, r3, #30
 8000e2c:	d577      	bpl.n	8000f1e <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e2e:	4b9c      	ldr	r3, [pc, #624]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	220c      	movs	r2, #12
 8000e34:	421a      	tst	r2, r3
 8000e36:	d062      	beq.n	8000efe <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e38:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d053      	beq.n	8000eec <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e44:	68e3      	ldr	r3, [r4, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <HAL_RCC_OscConfig+0x8c>
 8000e4a:	e08a      	b.n	8000f62 <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4a94      	ldr	r2, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fced 	bl	8000834 <HAL_GetTick>
 8000e5a:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	4b90      	ldr	r3, [pc, #576]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	079b      	lsls	r3, r3, #30
 8000e62:	d475      	bmi.n	8000f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fce6 	bl	8000834 <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	2802      	cmp	r0, #2
 8000e6c:	d9f6      	bls.n	8000e5c <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8000e6e:	2003      	movs	r0, #3
 8000e70:	e22c      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	025b      	lsls	r3, r3, #9
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7e:	6863      	ldr	r3, [r4, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d025      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000e84:	f7ff fcd6 	bl	8000834 <HAL_GetTick>
 8000e88:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	039b      	lsls	r3, r3, #14
 8000e90:	d4ca      	bmi.n	8000e28 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff fccf 	bl	8000834 <HAL_GetTick>
 8000e96:	1b40      	subs	r0, r0, r5
 8000e98:	2864      	cmp	r0, #100	; 0x64
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	e215      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d009      	beq.n	8000eb8 <HAL_RCC_OscConfig+0xf8>
 8000ea4:	4b7e      	ldr	r3, [pc, #504]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	497e      	ldr	r1, [pc, #504]	; (80010a4 <HAL_RCC_OscConfig+0x2e4>)
 8000eaa:	400a      	ands	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	497d      	ldr	r1, [pc, #500]	; (80010a8 <HAL_RCC_OscConfig+0x2e8>)
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e7e2      	b.n	8000e7e <HAL_RCC_OscConfig+0xbe>
 8000eb8:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	02d2      	lsls	r2, r2, #11
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	0252      	lsls	r2, r2, #9
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e7d6      	b.n	8000e7e <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fcb0 	bl	8000834 <HAL_GetTick>
 8000ed4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	039b      	lsls	r3, r3, #14
 8000edc:	d5a4      	bpl.n	8000e28 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ede:	f7ff fca9 	bl	8000834 <HAL_GetTick>
 8000ee2:	1b40      	subs	r0, r0, r5
 8000ee4:	2864      	cmp	r0, #100	; 0x64
 8000ee6:	d9f6      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000ee8:	2003      	movs	r0, #3
 8000eea:	e1ef      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eec:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	22c0      	movs	r2, #192	; 0xc0
 8000ef2:	0252      	lsls	r2, r2, #9
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0212      	lsls	r2, r2, #8
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d1a2      	bne.n	8000e44 <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	079b      	lsls	r3, r3, #30
 8000f04:	d503      	bpl.n	8000f0e <HAL_RCC_OscConfig+0x14e>
 8000f06:	68e3      	ldr	r3, [r4, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d000      	beq.n	8000f0e <HAL_RCC_OscConfig+0x14e>
 8000f0c:	e1e2      	b.n	80012d4 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4964      	ldr	r1, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f10:	680b      	ldr	r3, [r1, #0]
 8000f12:	22f8      	movs	r2, #248	; 0xf8
 8000f14:	4393      	bics	r3, r2
 8000f16:	6922      	ldr	r2, [r4, #16]
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	071b      	lsls	r3, r3, #28
 8000f22:	d544      	bpl.n	8000fae <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f24:	69e3      	ldr	r3, [r4, #28]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d02e      	beq.n	8000f88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2a:	4a5d      	ldr	r2, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc7e 	bl	8000834 <HAL_GetTick>
 8000f38:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	079b      	lsls	r3, r3, #30
 8000f40:	d435      	bmi.n	8000fae <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f42:	f7ff fc77 	bl	8000834 <HAL_GetTick>
 8000f46:	1b40      	subs	r0, r0, r5
 8000f48:	2802      	cmp	r0, #2
 8000f4a:	d9f6      	bls.n	8000f3a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e1bd      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4953      	ldr	r1, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f52:	680b      	ldr	r3, [r1, #0]
 8000f54:	22f8      	movs	r2, #248	; 0xf8
 8000f56:	4393      	bics	r3, r2
 8000f58:	6922      	ldr	r2, [r4, #16]
 8000f5a:	00d2      	lsls	r2, r2, #3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e7dd      	b.n	8000f1e <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4a4f      	ldr	r2, [pc, #316]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f64:	6813      	ldr	r3, [r2, #0]
 8000f66:	2101      	movs	r1, #1
 8000f68:	438b      	bics	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc62 	bl	8000834 <HAL_GetTick>
 8000f70:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	079b      	lsls	r3, r3, #30
 8000f78:	d5d1      	bpl.n	8000f1e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc5b 	bl	8000834 <HAL_GetTick>
 8000f7e:	1b40      	subs	r0, r0, r5
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d9f6      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000f84:	2003      	movs	r0, #3
 8000f86:	e1a1      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f88:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	438b      	bics	r3, r1
 8000f90:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fc4f 	bl	8000834 <HAL_GetTick>
 8000f96:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f98:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	079b      	lsls	r3, r3, #30
 8000f9e:	d506      	bpl.n	8000fae <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc48 	bl	8000834 <HAL_GetTick>
 8000fa4:	1b40      	subs	r0, r0, r5
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f6      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000faa:	2003      	movs	r0, #3
 8000fac:	e18e      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	075b      	lsls	r3, r3, #29
 8000fb2:	d400      	bmi.n	8000fb6 <HAL_RCC_OscConfig+0x1f6>
 8000fb4:	e080      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	d41d      	bmi.n	8000ffa <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000fc0:	69d1      	ldr	r1, [r2, #28]
 8000fc2:	2080      	movs	r0, #128	; 0x80
 8000fc4:	0540      	lsls	r0, r0, #21
 8000fc6:	4301      	orrs	r1, r0
 8000fc8:	61d1      	str	r1, [r2, #28]
 8000fca:	69d3      	ldr	r3, [r2, #28]
 8000fcc:	4003      	ands	r3, r0
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fd2:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_RCC_OscConfig+0x2ec>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	d510      	bpl.n	8000ffe <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d021      	beq.n	8001026 <HAL_RCC_OscConfig+0x266>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d136      	bne.n	8001054 <HAL_RCC_OscConfig+0x294>
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	2101      	movs	r1, #1
 8000fec:	438a      	bics	r2, r1
 8000fee:	621a      	str	r2, [r3, #32]
 8000ff0:	6a1a      	ldr	r2, [r3, #32]
 8000ff2:	3103      	adds	r1, #3
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	621a      	str	r2, [r3, #32]
 8000ff8:	e01a      	b.n	8001030 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7ea      	b.n	8000fd4 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffe:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x2ec>)
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	430b      	orrs	r3, r1
 8001008:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800100a:	f7ff fc13 	bl	8000834 <HAL_GetTick>
 800100e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_RCC_OscConfig+0x2ec>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	d4e1      	bmi.n	8000fdc <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001018:	f7ff fc0c 	bl	8000834 <HAL_GetTick>
 800101c:	1b80      	subs	r0, r0, r6
 800101e:	2864      	cmp	r0, #100	; 0x64
 8001020:	d9f6      	bls.n	8001010 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8001022:	2003      	movs	r0, #3
 8001024:	e152      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8001028:	6a13      	ldr	r3, [r2, #32]
 800102a:	2101      	movs	r1, #1
 800102c:	430b      	orrs	r3, r1
 800102e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d024      	beq.n	8001080 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fbfd 	bl	8000834 <HAL_GetTick>
 800103a:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	079b      	lsls	r3, r3, #30
 8001042:	d437      	bmi.n	80010b4 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001044:	f7ff fbf6 	bl	8000834 <HAL_GetTick>
 8001048:	1b80      	subs	r0, r0, r6
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_RCC_OscConfig+0x2f0>)
 800104c:	4298      	cmp	r0, r3
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e13b      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	2b05      	cmp	r3, #5
 8001056:	d009      	beq.n	800106c <HAL_RCC_OscConfig+0x2ac>
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	2101      	movs	r1, #1
 800105e:	438a      	bics	r2, r1
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	3103      	adds	r1, #3
 8001066:	438a      	bics	r2, r1
 8001068:	621a      	str	r2, [r3, #32]
 800106a:	e7e1      	b.n	8001030 <HAL_RCC_OscConfig+0x270>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	2104      	movs	r1, #4
 8001072:	430a      	orrs	r2, r1
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	3903      	subs	r1, #3
 800107a:	430a      	orrs	r2, r1
 800107c:	621a      	str	r2, [r3, #32]
 800107e:	e7d7      	b.n	8001030 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001080:	f7ff fbd8 	bl	8000834 <HAL_GetTick>
 8001084:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_RCC_OscConfig+0x2e0>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	079b      	lsls	r3, r3, #30
 800108c:	d512      	bpl.n	80010b4 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fbd1 	bl	8000834 <HAL_GetTick>
 8001092:	1b80      	subs	r0, r0, r6
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_RCC_OscConfig+0x2f0>)
 8001096:	4298      	cmp	r0, r3
 8001098:	d9f5      	bls.n	8001086 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800109a:	2003      	movs	r0, #3
 800109c:	e116      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40021000 	.word	0x40021000
 80010a4:	fffeffff 	.word	0xfffeffff
 80010a8:	fffbffff 	.word	0xfffbffff
 80010ac:	40007000 	.word	0x40007000
 80010b0:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010b4:	2d01      	cmp	r5, #1
 80010b6:	d039      	beq.n	800112c <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	06db      	lsls	r3, r3, #27
 80010bc:	d510      	bpl.n	80010e0 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010be:	6963      	ldr	r3, [r4, #20]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d039      	beq.n	8001138 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010c4:	3305      	adds	r3, #5
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010c8:	4a89      	ldr	r2, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80010ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80010cc:	2104      	movs	r1, #4
 80010ce:	438b      	bics	r3, r1
 80010d0:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80010d4:	31f4      	adds	r1, #244	; 0xf4
 80010d6:	438b      	bics	r3, r1
 80010d8:	69a1      	ldr	r1, [r4, #24]
 80010da:	00c9      	lsls	r1, r1, #3
 80010dc:	430b      	orrs	r3, r1
 80010de:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	069b      	lsls	r3, r3, #26
 80010e4:	d56e      	bpl.n	80011c4 <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010e6:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	230c      	movs	r3, #12
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d060      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010f2:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	230c      	movs	r3, #12
 80010f8:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d053      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010fe:	6a23      	ldr	r3, [r4, #32]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d07e      	beq.n	8001202 <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001104:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001106:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	430b      	orrs	r3, r1
 800110e:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fb90 	bl	8000834 <HAL_GetTick>
 8001114:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	d452      	bmi.n	80011c4 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800111e:	f7ff fb89 	bl	8000834 <HAL_GetTick>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	2802      	cmp	r0, #2
 8001126:	d9f6      	bls.n	8001116 <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e0cf      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800112c:	4a70      	ldr	r2, [pc, #448]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800112e:	69d3      	ldr	r3, [r2, #28]
 8001130:	4970      	ldr	r1, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x534>)
 8001132:	400b      	ands	r3, r1
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	e7bf      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001138:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800113a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113c:	2104      	movs	r1, #4
 800113e:	430a      	orrs	r2, r1
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001144:	3903      	subs	r1, #3
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800114a:	f7ff fb73 	bl	8000834 <HAL_GetTick>
 800114e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001150:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	079b      	lsls	r3, r3, #30
 8001156:	d406      	bmi.n	8001166 <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001158:	f7ff fb6c 	bl	8000834 <HAL_GetTick>
 800115c:	1b40      	subs	r0, r0, r5
 800115e:	2802      	cmp	r0, #2
 8001160:	d9f6      	bls.n	8001150 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8001162:	2003      	movs	r0, #3
 8001164:	e0b2      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001166:	4962      	ldr	r1, [pc, #392]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001168:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800116a:	22f8      	movs	r2, #248	; 0xf8
 800116c:	4393      	bics	r3, r2
 800116e:	69a2      	ldr	r2, [r4, #24]
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	4313      	orrs	r3, r2
 8001174:	634b      	str	r3, [r1, #52]	; 0x34
 8001176:	e7b3      	b.n	80010e0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001178:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	2104      	movs	r1, #4
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	3903      	subs	r1, #3
 8001186:	438a      	bics	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800118a:	f7ff fb53 	bl	8000834 <HAL_GetTick>
 800118e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001190:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	079b      	lsls	r3, r3, #30
 8001196:	d5a3      	bpl.n	80010e0 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001198:	f7ff fb4c 	bl	8000834 <HAL_GetTick>
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	2802      	cmp	r0, #2
 80011a0:	d9f6      	bls.n	8001190 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e092      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	22c0      	movs	r2, #192	; 0xc0
 80011ac:	0252      	lsls	r2, r2, #9
 80011ae:	4013      	ands	r3, r2
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d1a4      	bne.n	80010fe <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	039b      	lsls	r3, r3, #14
 80011ba:	d503      	bpl.n	80011c4 <HAL_RCC_OscConfig+0x404>
 80011bc:	6a23      	ldr	r3, [r4, #32]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d000      	beq.n	80011c4 <HAL_RCC_OscConfig+0x404>
 80011c2:	e089      	b.n	80012d8 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <HAL_RCC_OscConfig+0x40c>
 80011ca:	e087      	b.n	80012dc <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80011ce:	6851      	ldr	r1, [r2, #4]
 80011d0:	220c      	movs	r2, #12
 80011d2:	400a      	ands	r2, r1
 80011d4:	2a08      	cmp	r2, #8
 80011d6:	d060      	beq.n	800129a <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d025      	beq.n	8001228 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	4945      	ldr	r1, [pc, #276]	; (80012f8 <HAL_RCC_OscConfig+0x538>)
 80011e2:	400b      	ands	r3, r1
 80011e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb25 	bl	8000834 <HAL_GetTick>
 80011ea:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	d550      	bpl.n	8001296 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fb1e 	bl	8000834 <HAL_GetTick>
 80011f8:	1b00      	subs	r0, r0, r4
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f6      	bls.n	80011ec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
 8001200:	e064      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 8001202:	4a3b      	ldr	r2, [pc, #236]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001204:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001206:	493d      	ldr	r1, [pc, #244]	; (80012fc <HAL_RCC_OscConfig+0x53c>)
 8001208:	400b      	ands	r3, r1
 800120a:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 800120c:	f7ff fb12 	bl	8000834 <HAL_GetTick>
 8001210:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	d5d4      	bpl.n	80011c4 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800121a:	f7ff fb0b 	bl	8000834 <HAL_GetTick>
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f6      	bls.n	8001212 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8001224:	2003      	movs	r0, #3
 8001226:	e051      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 8001228:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	4932      	ldr	r1, [pc, #200]	; (80012f8 <HAL_RCC_OscConfig+0x538>)
 800122e:	400b      	ands	r3, r1
 8001230:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff faff 	bl	8000834 <HAL_GetTick>
 8001236:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	d506      	bpl.n	800124e <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff faf8 	bl	8000834 <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f6      	bls.n	8001238 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
 800124c:	e03e      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 8001250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001252:	210f      	movs	r1, #15
 8001254:	438a      	bics	r2, r1
 8001256:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4928      	ldr	r1, [pc, #160]	; (8001300 <HAL_RCC_OscConfig+0x540>)
 8001260:	400a      	ands	r2, r1
 8001262:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001264:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001266:	4301      	orrs	r1, r0
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0452      	lsls	r2, r2, #17
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001276:	f7ff fadd 	bl	8000834 <HAL_GetTick>
 800127a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	d406      	bmi.n	8001292 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fad6 	bl	8000834 <HAL_GetTick>
 8001288:	1b00      	subs	r0, r0, r4
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f6      	bls.n	800127c <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e01c      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 8001292:	2000      	movs	r0, #0
 8001294:	e01a      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
 8001296:	2000      	movs	r0, #0
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129a:	2b01      	cmp	r3, #1
 800129c:	d020      	beq.n	80012e0 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_RCC_OscConfig+0x530>)
 80012a0:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80012a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	4013      	ands	r3, r2
 80012aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012ac:	4283      	cmp	r3, r0
 80012ae:	d119      	bne.n	80012e4 <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012b0:	230f      	movs	r3, #15
 80012b2:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012b6:	428b      	cmp	r3, r1
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012ba:	23f0      	movs	r3, #240	; 0xf0
 80012bc:	039b      	lsls	r3, r3, #14
 80012be:	401a      	ands	r2, r3
 80012c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e000      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 80012ca:	2001      	movs	r0, #1
}
 80012cc:	b002      	add	sp, #8
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e7fb      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
 80012d6:	e7f9      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e7f7      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e7f5      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7f3      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7f1      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7ef      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7ed      	b.n	80012cc <HAL_RCC_OscConfig+0x50c>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	efffffff 	.word	0xefffffff
 80012f8:	feffffff 	.word	0xfeffffff
 80012fc:	fffeffff 	.word	0xfffeffff
 8001300:	ffc27fff 	.word	0xffc27fff

08001304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001308:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800130a:	230c      	movs	r3, #12
 800130c:	4013      	ands	r3, r2
 800130e:	2b08      	cmp	r3, #8
 8001310:	d007      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0x1e>
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d029      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x66>
 8001316:	2b04      	cmp	r3, #4
 8001318:	d001      	beq.n	800131e <HAL_RCC_GetSysClockFreq+0x1a>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131a:	4816      	ldr	r0, [pc, #88]	; (8001374 <HAL_RCC_GetSysClockFreq+0x70>)
      break;
    }
  }
  return sysclockfreq;
}
 800131c:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <HAL_RCC_GetSysClockFreq+0x74>)
 8001320:	e7fc      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x18>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001322:	0c91      	lsrs	r1, r2, #18
 8001324:	230f      	movs	r3, #15
 8001326:	4019      	ands	r1, r3
 8001328:	4814      	ldr	r0, [pc, #80]	; (800137c <HAL_RCC_GetSysClockFreq+0x78>)
 800132a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800132c:	4910      	ldr	r1, [pc, #64]	; (8001370 <HAL_RCC_GetSysClockFreq+0x6c>)
 800132e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001330:	400b      	ands	r3, r1
 8001332:	4913      	ldr	r1, [pc, #76]	; (8001380 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001334:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	401a      	ands	r2, r3
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	429a      	cmp	r2, r3
 8001342:	d008      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0x52>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	429a      	cmp	r2, r3
 800134a:	d009      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <HAL_RCC_GetSysClockFreq+0x70>)
 800134e:	f7fe fedb 	bl	8000108 <__udivsi3>
 8001352:	4360      	muls	r0, r4
 8001354:	e7e2      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x18>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <HAL_RCC_GetSysClockFreq+0x74>)
 8001358:	f7fe fed6 	bl	8000108 <__udivsi3>
 800135c:	4360      	muls	r0, r4
 800135e:	e7dd      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x18>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001360:	4808      	ldr	r0, [pc, #32]	; (8001384 <HAL_RCC_GetSysClockFreq+0x80>)
 8001362:	f7fe fed1 	bl	8000108 <__udivsi3>
 8001366:	4360      	muls	r0, r4
 8001368:	e7d8      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSI48_VALUE;
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_RCC_GetSysClockFreq+0x80>)
 800136c:	e7d6      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x18>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021000 	.word	0x40021000
 8001374:	007a1200 	.word	0x007a1200
 8001378:	00b71b00 	.word	0x00b71b00
 800137c:	08001be4 	.word	0x08001be4
 8001380:	08001bf4 	.word	0x08001bf4
 8001384:	02dc6c00 	.word	0x02dc6c00

08001388 <HAL_RCC_ClockConfig>:
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	0004      	movs	r4, r0
 800138c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800138e:	2800      	cmp	r0, #0
 8001390:	d100      	bne.n	8001394 <HAL_RCC_ClockConfig+0xc>
 8001392:	e086      	b.n	80014a2 <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_ClockConfig+0x12c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	4013      	ands	r3, r2
 800139c:	428b      	cmp	r3, r1
 800139e:	d20a      	bcs.n	80013b6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a0:	4944      	ldr	r1, [pc, #272]	; (80014b4 <HAL_RCC_ClockConfig+0x12c>)
 80013a2:	680b      	ldr	r3, [r1, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4393      	bics	r3, r2
 80013a8:	432b      	orrs	r3, r5
 80013aa:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ac:	680b      	ldr	r3, [r1, #0]
 80013ae:	401a      	ands	r2, r3
 80013b0:	42aa      	cmp	r2, r5
 80013b2:	d000      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x2e>
 80013b4:	e077      	b.n	80014a6 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	079a      	lsls	r2, r3, #30
 80013ba:	d50e      	bpl.n	80013da <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	075b      	lsls	r3, r3, #29
 80013be:	d505      	bpl.n	80013cc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013c0:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 80013c2:	6851      	ldr	r1, [r2, #4]
 80013c4:	23e0      	movs	r3, #224	; 0xe0
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 80013ce:	6853      	ldr	r3, [r2, #4]
 80013d0:	21f0      	movs	r1, #240	; 0xf0
 80013d2:	438b      	bics	r3, r1
 80013d4:	68a1      	ldr	r1, [r4, #8]
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	07db      	lsls	r3, r3, #31
 80013de:	d535      	bpl.n	800144c <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e0:	6863      	ldr	r3, [r4, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d024      	beq.n	8001434 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d028      	beq.n	8001440 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	0792      	lsls	r2, r2, #30
 80013f4:	d405      	bmi.n	8001402 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
 80013f8:	e052      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	0392      	lsls	r2, r2, #14
 8001400:	d553      	bpl.n	80014aa <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001402:	492d      	ldr	r1, [pc, #180]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001404:	684a      	ldr	r2, [r1, #4]
 8001406:	2003      	movs	r0, #3
 8001408:	4382      	bics	r2, r0
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800140e:	f7ff fa11 	bl	8000834 <HAL_GetTick>
 8001412:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	220c      	movs	r2, #12
 800141a:	401a      	ands	r2, r3
 800141c:	6863      	ldr	r3, [r4, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d013      	beq.n	800144c <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fa06 	bl	8000834 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_ClockConfig+0x134>)
 800142c:	4298      	cmp	r0, r3
 800142e:	d9f1      	bls.n	8001414 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
 8001432:	e035      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	0192      	lsls	r2, r2, #6
 800143a:	d4e2      	bmi.n	8001402 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
 800143e:	e02f      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001444:	0392      	lsls	r2, r2, #14
 8001446:	d4dc      	bmi.n	8001402 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
 800144a:	e029      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_ClockConfig+0x12c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	4013      	ands	r3, r2
 8001454:	42ab      	cmp	r3, r5
 8001456:	d909      	bls.n	800146c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001458:	4916      	ldr	r1, [pc, #88]	; (80014b4 <HAL_RCC_ClockConfig+0x12c>)
 800145a:	680b      	ldr	r3, [r1, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4393      	bics	r3, r2
 8001460:	432b      	orrs	r3, r5
 8001462:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001464:	680b      	ldr	r3, [r1, #0]
 8001466:	401a      	ands	r2, r3
 8001468:	42aa      	cmp	r2, r5
 800146a:	d120      	bne.n	80014ae <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	075b      	lsls	r3, r3, #29
 8001470:	d506      	bpl.n	8001480 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001474:	6853      	ldr	r3, [r2, #4]
 8001476:	4912      	ldr	r1, [pc, #72]	; (80014c0 <HAL_RCC_ClockConfig+0x138>)
 8001478:	400b      	ands	r3, r1
 800147a:	68e1      	ldr	r1, [r4, #12]
 800147c:	430b      	orrs	r3, r1
 800147e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001480:	f7ff ff40 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	0912      	lsrs	r2, r2, #4
 800148a:	230f      	movs	r3, #15
 800148c:	4013      	ands	r3, r2
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_RCC_ClockConfig+0x13c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	40d8      	lsrs	r0, r3
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_RCC_ClockConfig+0x140>)
 8001496:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff f987 	bl	80007ac <HAL_InitTick>
  return HAL_OK;
 800149e:	2000      	movs	r0, #0
}
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	e7fc      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e7fa      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7f8      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	e7f6      	b.n	80014a0 <HAL_RCC_ClockConfig+0x118>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	00001388 	.word	0x00001388
 80014c0:	fffff8ff 	.word	0xfffff8ff
 80014c4:	08001bcc 	.word	0x08001bcc
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
}
 80014d0:	4770      	bx	lr
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014da:	f7ff fff7 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	0a12      	lsrs	r2, r2, #8
 80014e4:	2307      	movs	r3, #7
 80014e6:	4013      	ands	r3, r2
 80014e8:	4a02      	ldr	r2, [pc, #8]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	40d8      	lsrs	r0, r3
}    
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	08001bdc 	.word	0x08001bdc

080014f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014fe:	6803      	ldr	r3, [r0, #0]
 8001500:	03db      	lsls	r3, r3, #15
 8001502:	d537      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001504:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	d467      	bmi.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800150e:	69d1      	ldr	r1, [r2, #28]
 8001510:	2080      	movs	r0, #128	; 0x80
 8001512:	0540      	lsls	r0, r0, #21
 8001514:	4301      	orrs	r1, r0
 8001516:	61d1      	str	r1, [r2, #28]
 8001518:	69d3      	ldr	r3, [r2, #28]
 800151a:	4003      	ands	r3, r0
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001520:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b46      	ldr	r3, [pc, #280]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	d55a      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800152a:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800152c:	6a1a      	ldr	r2, [r3, #32]
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	0011      	movs	r1, r2
 8001534:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001536:	421a      	tst	r2, r3
 8001538:	d013      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	4013      	ands	r3, r2
 800153e:	428b      	cmp	r3, r1
 8001540:	d00f      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001544:	6a18      	ldr	r0, [r3, #32]
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001548:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800154a:	6a1e      	ldr	r6, [r3, #32]
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	0249      	lsls	r1, r1, #9
 8001550:	4331      	orrs	r1, r6
 8001552:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001554:	6a19      	ldr	r1, [r3, #32]
 8001556:	4e3b      	ldr	r6, [pc, #236]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001558:	4031      	ands	r1, r6
 800155a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800155c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800155e:	07c3      	lsls	r3, r0, #31
 8001560:	d452      	bmi.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001562:	4a35      	ldr	r2, [pc, #212]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001564:	6a13      	ldr	r3, [r2, #32]
 8001566:	4936      	ldr	r1, [pc, #216]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001568:	400b      	ands	r3, r1
 800156a:	6861      	ldr	r1, [r4, #4]
 800156c:	430b      	orrs	r3, r1
 800156e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001570:	2d01      	cmp	r5, #1
 8001572:	d058      	beq.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	07db      	lsls	r3, r3, #31
 8001578:	d506      	bpl.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800157c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800157e:	2103      	movs	r1, #3
 8001580:	438b      	bics	r3, r1
 8001582:	68a1      	ldr	r1, [r4, #8]
 8001584:	430b      	orrs	r3, r1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	079b      	lsls	r3, r3, #30
 800158c:	d506      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001590:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001592:	492d      	ldr	r1, [pc, #180]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001594:	400b      	ands	r3, r1
 8001596:	68e1      	ldr	r1, [r4, #12]
 8001598:	430b      	orrs	r3, r1
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	069b      	lsls	r3, r3, #26
 80015a0:	d506      	bpl.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015a2:	4a25      	ldr	r2, [pc, #148]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80015a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015a6:	2110      	movs	r1, #16
 80015a8:	438b      	bics	r3, r1
 80015aa:	6921      	ldr	r1, [r4, #16]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	d506      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80015b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	438b      	bics	r3, r1
 80015be:	69a1      	ldr	r1, [r4, #24]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	055b      	lsls	r3, r3, #21
 80015c8:	d532      	bpl.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80015cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	438b      	bics	r3, r1
 80015d2:	6961      	ldr	r1, [r4, #20]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015d8:	2000      	movs	r0, #0
 80015da:	e02a      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 80015dc:	2500      	movs	r5, #0
 80015de:	e7a0      	b.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80015e2:	6811      	ldr	r1, [r2, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015ec:	f7ff f922 	bl	8000834 <HAL_GetTick>
 80015f0:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	05db      	lsls	r3, r3, #23
 80015f8:	d497      	bmi.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fa:	f7ff f91b 	bl	8000834 <HAL_GetTick>
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	2864      	cmp	r0, #100	; 0x64
 8001602:	d9f6      	bls.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8001604:	2003      	movs	r0, #3
 8001606:	e014      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001608:	f7ff f914 	bl	8000834 <HAL_GetTick>
 800160c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	079b      	lsls	r3, r3, #30
 8001614:	d4a5      	bmi.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff f90d 	bl	8000834 <HAL_GetTick>
 800161a:	1b80      	subs	r0, r0, r6
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800161e:	4298      	cmp	r0, r3
 8001620:	d9f5      	bls.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8001622:	2003      	movs	r0, #3
 8001624:	e005      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	69d3      	ldr	r3, [r2, #28]
 8001628:	4909      	ldr	r1, [pc, #36]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800162a:	400b      	ands	r3, r1
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	e7a1      	b.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8001630:	2000      	movs	r0, #0
}
 8001632:	b002      	add	sp, #8
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	fffffcff 	.word	0xfffffcff
 8001644:	fffeffff 	.word	0xfffeffff
 8001648:	fffcffff 	.word	0xfffcffff
 800164c:	00001388 	.word	0x00001388
 8001650:	efffffff 	.word	0xefffffff

08001654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001654:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001656:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800165a:	2201      	movs	r2, #1
 800165c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001660:	6801      	ldr	r1, [r0, #0]
 8001662:	680b      	ldr	r3, [r1, #0]
 8001664:	4c12      	ldr	r4, [pc, #72]	; (80016b0 <UART_EndRxTransfer+0x5c>)
 8001666:	4023      	ands	r3, r4
 8001668:	600b      	str	r3, [r1, #0]
 800166a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800166e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001672:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001676:	6801      	ldr	r1, [r0, #0]
 8001678:	688b      	ldr	r3, [r1, #8]
 800167a:	4393      	bics	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
 800167e:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001682:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001684:	2b01      	cmp	r3, #1
 8001686:	d006      	beq.n	8001696 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	2220      	movs	r2, #32
 800168c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800168e:	2300      	movs	r3, #0
 8001690:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001692:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001694:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001696:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800169a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800169e:	6802      	ldr	r2, [r0, #0]
 80016a0:	6813      	ldr	r3, [r2, #0]
 80016a2:	3432      	adds	r4, #50	; 0x32
 80016a4:	34ff      	adds	r4, #255	; 0xff
 80016a6:	43a3      	bics	r3, r4
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	f381 8810 	msr	PRIMASK, r1
}
 80016ae:	e7eb      	b.n	8001688 <UART_EndRxTransfer+0x34>
 80016b0:	fffffedf 	.word	0xfffffedf

080016b4 <UART_SetConfig>:
{
 80016b4:	b510      	push	{r4, lr}
 80016b6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016b8:	6883      	ldr	r3, [r0, #8]
 80016ba:	6902      	ldr	r2, [r0, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	6942      	ldr	r2, [r0, #20]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	69c2      	ldr	r2, [r0, #28]
 80016c4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016c6:	6801      	ldr	r1, [r0, #0]
 80016c8:	680a      	ldr	r2, [r1, #0]
 80016ca:	4864      	ldr	r0, [pc, #400]	; (800185c <UART_SetConfig+0x1a8>)
 80016cc:	4002      	ands	r2, r0
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	6853      	ldr	r3, [r2, #4]
 80016d6:	4962      	ldr	r1, [pc, #392]	; (8001860 <UART_SetConfig+0x1ac>)
 80016d8:	400b      	ands	r3, r1
 80016da:	68e1      	ldr	r1, [r4, #12]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80016e0:	6a22      	ldr	r2, [r4, #32]
 80016e2:	69a3      	ldr	r3, [r4, #24]
 80016e4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016e6:	6821      	ldr	r1, [r4, #0]
 80016e8:	688b      	ldr	r3, [r1, #8]
 80016ea:	485e      	ldr	r0, [pc, #376]	; (8001864 <UART_SetConfig+0x1b0>)
 80016ec:	4003      	ands	r3, r0
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	4a5c      	ldr	r2, [pc, #368]	; (8001868 <UART_SetConfig+0x1b4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00a      	beq.n	8001710 <UART_SetConfig+0x5c>
 80016fa:	4a5c      	ldr	r2, [pc, #368]	; (800186c <UART_SetConfig+0x1b8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d038      	beq.n	8001772 <UART_SetConfig+0xbe>
 8001700:	4a5b      	ldr	r2, [pc, #364]	; (8001870 <UART_SetConfig+0x1bc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d05f      	beq.n	80017c6 <UART_SetConfig+0x112>
 8001706:	4a5b      	ldr	r2, [pc, #364]	; (8001874 <UART_SetConfig+0x1c0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d04a      	beq.n	80017a2 <UART_SetConfig+0xee>
 800170c:	2310      	movs	r3, #16
 800170e:	e00b      	b.n	8001728 <UART_SetConfig+0x74>
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <UART_SetConfig+0x1c4>)
 8001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001714:	2303      	movs	r3, #3
 8001716:	4013      	ands	r3, r2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d044      	beq.n	80017a6 <UART_SetConfig+0xf2>
 800171c:	d825      	bhi.n	800176a <UART_SetConfig+0xb6>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d043      	beq.n	80017aa <UART_SetConfig+0xf6>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d143      	bne.n	80017ae <UART_SetConfig+0xfa>
 8001726:	3303      	adds	r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001728:	69e0      	ldr	r0, [r4, #28]
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	0212      	lsls	r2, r2, #8
 800172e:	4290      	cmp	r0, r2
 8001730:	d04b      	beq.n	80017ca <UART_SetConfig+0x116>
    switch (clocksource)
 8001732:	2b04      	cmp	r3, #4
 8001734:	d100      	bne.n	8001738 <UART_SetConfig+0x84>
 8001736:	e089      	b.n	800184c <UART_SetConfig+0x198>
 8001738:	d877      	bhi.n	800182a <UART_SetConfig+0x176>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <UART_SetConfig+0x8c>
 800173e:	e07e      	b.n	800183e <UART_SetConfig+0x18a>
 8001740:	2b02      	cmp	r3, #2
 8001742:	d170      	bne.n	8001826 <UART_SetConfig+0x172>
 8001744:	484d      	ldr	r0, [pc, #308]	; (800187c <UART_SetConfig+0x1c8>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001746:	6863      	ldr	r3, [r4, #4]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	1818      	adds	r0, r3, r0
 800174c:	6861      	ldr	r1, [r4, #4]
 800174e:	f7fe fcdb 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001752:	0002      	movs	r2, r0
 8001754:	3a10      	subs	r2, #16
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <UART_SetConfig+0x1cc>)
 8001758:	429a      	cmp	r2, r3
 800175a:	d900      	bls.n	800175e <UART_SetConfig+0xaa>
 800175c:	e07b      	b.n	8001856 <UART_SetConfig+0x1a2>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	0400      	lsls	r0, r0, #16
 8001762:	0c00      	lsrs	r0, r0, #16
 8001764:	60d8      	str	r0, [r3, #12]
 8001766:	2000      	movs	r0, #0
 8001768:	e065      	b.n	8001836 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800176a:	2b03      	cmp	r3, #3
 800176c:	d121      	bne.n	80017b2 <UART_SetConfig+0xfe>
 800176e:	3b01      	subs	r3, #1
 8001770:	e7da      	b.n	8001728 <UART_SetConfig+0x74>
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <UART_SetConfig+0x1c4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	22c0      	movs	r2, #192	; 0xc0
 8001778:	0292      	lsls	r2, r2, #10
 800177a:	4013      	ands	r3, r2
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0292      	lsls	r2, r2, #10
 8001780:	4293      	cmp	r3, r2
 8001782:	d018      	beq.n	80017b6 <UART_SetConfig+0x102>
 8001784:	d807      	bhi.n	8001796 <UART_SetConfig+0xe2>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d017      	beq.n	80017ba <UART_SetConfig+0x106>
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	0252      	lsls	r2, r2, #9
 800178e:	4293      	cmp	r3, r2
 8001790:	d115      	bne.n	80017be <UART_SetConfig+0x10a>
 8001792:	2304      	movs	r3, #4
 8001794:	e7c8      	b.n	8001728 <UART_SetConfig+0x74>
 8001796:	22c0      	movs	r2, #192	; 0xc0
 8001798:	0292      	lsls	r2, r2, #10
 800179a:	4293      	cmp	r3, r2
 800179c:	d111      	bne.n	80017c2 <UART_SetConfig+0x10e>
 800179e:	2302      	movs	r3, #2
 80017a0:	e7c2      	b.n	8001728 <UART_SetConfig+0x74>
 80017a2:	2300      	movs	r3, #0
 80017a4:	e7c0      	b.n	8001728 <UART_SetConfig+0x74>
 80017a6:	2308      	movs	r3, #8
 80017a8:	e7be      	b.n	8001728 <UART_SetConfig+0x74>
 80017aa:	2300      	movs	r3, #0
 80017ac:	e7bc      	b.n	8001728 <UART_SetConfig+0x74>
 80017ae:	2310      	movs	r3, #16
 80017b0:	e7ba      	b.n	8001728 <UART_SetConfig+0x74>
 80017b2:	2310      	movs	r3, #16
 80017b4:	e7b8      	b.n	8001728 <UART_SetConfig+0x74>
 80017b6:	2308      	movs	r3, #8
 80017b8:	e7b6      	b.n	8001728 <UART_SetConfig+0x74>
 80017ba:	2300      	movs	r3, #0
 80017bc:	e7b4      	b.n	8001728 <UART_SetConfig+0x74>
 80017be:	2310      	movs	r3, #16
 80017c0:	e7b2      	b.n	8001728 <UART_SetConfig+0x74>
 80017c2:	2310      	movs	r3, #16
 80017c4:	e7b0      	b.n	8001728 <UART_SetConfig+0x74>
 80017c6:	2300      	movs	r3, #0
 80017c8:	e7ae      	b.n	8001728 <UART_SetConfig+0x74>
    switch (clocksource)
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d028      	beq.n	8001820 <UART_SetConfig+0x16c>
 80017ce:	d81d      	bhi.n	800180c <UART_SetConfig+0x158>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01f      	beq.n	8001814 <UART_SetConfig+0x160>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d117      	bne.n	8001808 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 80017d8:	4828      	ldr	r0, [pc, #160]	; (800187c <UART_SetConfig+0x1c8>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017da:	0040      	lsls	r0, r0, #1
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	18c0      	adds	r0, r0, r3
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	f7fe fc90 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017e8:	0002      	movs	r2, r0
 80017ea:	3a10      	subs	r2, #16
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <UART_SetConfig+0x1cc>)
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d82f      	bhi.n	8001852 <UART_SetConfig+0x19e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017f2:	b282      	uxth	r2, r0
 80017f4:	230f      	movs	r3, #15
 80017f6:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017f8:	0840      	lsrs	r0, r0, #1
 80017fa:	3b08      	subs	r3, #8
 80017fc:	4018      	ands	r0, r3
 80017fe:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	60d8      	str	r0, [r3, #12]
 8001804:	2000      	movs	r0, #0
 8001806:	e016      	b.n	8001836 <UART_SetConfig+0x182>
    switch (clocksource)
 8001808:	2001      	movs	r0, #1
 800180a:	e014      	b.n	8001836 <UART_SetConfig+0x182>
 800180c:	2b08      	cmp	r3, #8
 800180e:	d0e4      	beq.n	80017da <UART_SetConfig+0x126>
 8001810:	2001      	movs	r0, #1
 8001812:	e010      	b.n	8001836 <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001814:	f7ff fe60 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001818:	2800      	cmp	r0, #0
 800181a:	d1de      	bne.n	80017da <UART_SetConfig+0x126>
 800181c:	2000      	movs	r0, #0
 800181e:	e00a      	b.n	8001836 <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetSysClockFreq();
 8001820:	f7ff fd70 	bl	8001304 <HAL_RCC_GetSysClockFreq>
        break;
 8001824:	e7f8      	b.n	8001818 <UART_SetConfig+0x164>
    switch (clocksource)
 8001826:	2001      	movs	r0, #1
 8001828:	e005      	b.n	8001836 <UART_SetConfig+0x182>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d102      	bne.n	8001834 <UART_SetConfig+0x180>
        pclk = (uint32_t) LSE_VALUE;
 800182e:	2080      	movs	r0, #128	; 0x80
 8001830:	0200      	lsls	r0, r0, #8
 8001832:	e788      	b.n	8001746 <UART_SetConfig+0x92>
    switch (clocksource)
 8001834:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001836:	2300      	movs	r3, #0
 8001838:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800183a:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800183c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800183e:	f7ff fe4b 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001842:	2800      	cmp	r0, #0
 8001844:	d000      	beq.n	8001848 <UART_SetConfig+0x194>
 8001846:	e77e      	b.n	8001746 <UART_SetConfig+0x92>
 8001848:	2000      	movs	r0, #0
 800184a:	e7f4      	b.n	8001836 <UART_SetConfig+0x182>
        pclk = HAL_RCC_GetSysClockFreq();
 800184c:	f7ff fd5a 	bl	8001304 <HAL_RCC_GetSysClockFreq>
        break;
 8001850:	e7f7      	b.n	8001842 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	e7ef      	b.n	8001836 <UART_SetConfig+0x182>
        ret = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e7ed      	b.n	8001836 <UART_SetConfig+0x182>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	efff69f3 	.word	0xefff69f3
 8001860:	ffffcfff 	.word	0xffffcfff
 8001864:	fffff4ff 	.word	0xfffff4ff
 8001868:	40013800 	.word	0x40013800
 800186c:	40004400 	.word	0x40004400
 8001870:	40004800 	.word	0x40004800
 8001874:	40004c00 	.word	0x40004c00
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200
 8001880:	0000ffef 	.word	0x0000ffef

08001884 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d506      	bpl.n	8001898 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800188a:	6802      	ldr	r2, [r0, #0]
 800188c:	6853      	ldr	r3, [r2, #4]
 800188e:	492c      	ldr	r1, [pc, #176]	; (8001940 <UART_AdvFeatureConfig+0xbc>)
 8001890:	400b      	ands	r3, r1
 8001892:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001894:	430b      	orrs	r3, r1
 8001896:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800189a:	079b      	lsls	r3, r3, #30
 800189c:	d506      	bpl.n	80018ac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	6853      	ldr	r3, [r2, #4]
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <UART_AdvFeatureConfig+0xc0>)
 80018a4:	400b      	ands	r3, r1
 80018a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ae:	075b      	lsls	r3, r3, #29
 80018b0:	d506      	bpl.n	80018c0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018b2:	6802      	ldr	r2, [r0, #0]
 80018b4:	6853      	ldr	r3, [r2, #4]
 80018b6:	4924      	ldr	r1, [pc, #144]	; (8001948 <UART_AdvFeatureConfig+0xc4>)
 80018b8:	400b      	ands	r3, r1
 80018ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80018bc:	430b      	orrs	r3, r1
 80018be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018c2:	071b      	lsls	r3, r3, #28
 80018c4:	d506      	bpl.n	80018d4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018c6:	6802      	ldr	r2, [r0, #0]
 80018c8:	6853      	ldr	r3, [r2, #4]
 80018ca:	4920      	ldr	r1, [pc, #128]	; (800194c <UART_AdvFeatureConfig+0xc8>)
 80018cc:	400b      	ands	r3, r1
 80018ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018d6:	06db      	lsls	r3, r3, #27
 80018d8:	d506      	bpl.n	80018e8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018da:	6802      	ldr	r2, [r0, #0]
 80018dc:	6893      	ldr	r3, [r2, #8]
 80018de:	491c      	ldr	r1, [pc, #112]	; (8001950 <UART_AdvFeatureConfig+0xcc>)
 80018e0:	400b      	ands	r3, r1
 80018e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ea:	069b      	lsls	r3, r3, #26
 80018ec:	d506      	bpl.n	80018fc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018ee:	6802      	ldr	r2, [r0, #0]
 80018f0:	6893      	ldr	r3, [r2, #8]
 80018f2:	4918      	ldr	r1, [pc, #96]	; (8001954 <UART_AdvFeatureConfig+0xd0>)
 80018f4:	400b      	ands	r3, r1
 80018f6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018fe:	065b      	lsls	r3, r3, #25
 8001900:	d50b      	bpl.n	800191a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	6853      	ldr	r3, [r2, #4]
 8001906:	4914      	ldr	r1, [pc, #80]	; (8001958 <UART_AdvFeatureConfig+0xd4>)
 8001908:	400b      	ands	r3, r1
 800190a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800190c:	430b      	orrs	r3, r1
 800190e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	035b      	lsls	r3, r3, #13
 8001914:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001916:	429a      	cmp	r2, r3
 8001918:	d00a      	beq.n	8001930 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800191a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	d506      	bpl.n	800192e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001920:	6802      	ldr	r2, [r0, #0]
 8001922:	6853      	ldr	r3, [r2, #4]
 8001924:	490d      	ldr	r1, [pc, #52]	; (800195c <UART_AdvFeatureConfig+0xd8>)
 8001926:	400b      	ands	r3, r1
 8001928:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800192a:	430b      	orrs	r3, r1
 800192c:	6053      	str	r3, [r2, #4]
}
 800192e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001930:	6802      	ldr	r2, [r0, #0]
 8001932:	6853      	ldr	r3, [r2, #4]
 8001934:	490a      	ldr	r1, [pc, #40]	; (8001960 <UART_AdvFeatureConfig+0xdc>)
 8001936:	400b      	ands	r3, r1
 8001938:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800193a:	430b      	orrs	r3, r1
 800193c:	6053      	str	r3, [r2, #4]
 800193e:	e7ec      	b.n	800191a <UART_AdvFeatureConfig+0x96>
 8001940:	fffdffff 	.word	0xfffdffff
 8001944:	fffeffff 	.word	0xfffeffff
 8001948:	fffbffff 	.word	0xfffbffff
 800194c:	ffff7fff 	.word	0xffff7fff
 8001950:	ffffefff 	.word	0xffffefff
 8001954:	ffffdfff 	.word	0xffffdfff
 8001958:	ffefffff 	.word	0xffefffff
 800195c:	fff7ffff 	.word	0xfff7ffff
 8001960:	ff9fffff 	.word	0xff9fffff

08001964 <UART_WaitOnFlagUntilTimeout>:
{
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	46ce      	mov	lr, r9
 8001968:	4647      	mov	r7, r8
 800196a:	b580      	push	{r7, lr}
 800196c:	0006      	movs	r6, r0
 800196e:	000d      	movs	r5, r1
 8001970:	0017      	movs	r7, r2
 8001972:	4699      	mov	r9, r3
 8001974:	9b08      	ldr	r3, [sp, #32]
 8001976:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	69dc      	ldr	r4, [r3, #28]
 800197c:	402c      	ands	r4, r5
 800197e:	1b64      	subs	r4, r4, r5
 8001980:	4263      	negs	r3, r4
 8001982:	415c      	adcs	r4, r3
 8001984:	42bc      	cmp	r4, r7
 8001986:	d12f      	bne.n	80019e8 <UART_WaitOnFlagUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8001988:	4643      	mov	r3, r8
 800198a:	3301      	adds	r3, #1
 800198c:	d0f4      	beq.n	8001978 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7fe ff51 	bl	8000834 <HAL_GetTick>
 8001992:	464b      	mov	r3, r9
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	4540      	cmp	r0, r8
 8001998:	d82b      	bhi.n	80019f2 <UART_WaitOnFlagUntilTimeout+0x8e>
 800199a:	4643      	mov	r3, r8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d02a      	beq.n	80019f6 <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019a0:	6833      	ldr	r3, [r6, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	0752      	lsls	r2, r2, #29
 80019a6:	d5e7      	bpl.n	8001978 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	0712      	lsls	r2, r2, #28
 80019ac:	d410      	bmi.n	80019d0 <UART_WaitOnFlagUntilTimeout+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	0512      	lsls	r2, r2, #20
 80019b2:	d5e1      	bpl.n	8001978 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80019ba:	0030      	movs	r0, r6
 80019bc:	f7ff fe4a 	bl	8001654 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80019c0:	2384      	movs	r3, #132	; 0x84
 80019c2:	2220      	movs	r2, #32
 80019c4:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80019c6:	3b0c      	subs	r3, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80019cc:	2003      	movs	r0, #3
 80019ce:	e00c      	b.n	80019ea <UART_WaitOnFlagUntilTimeout+0x86>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80019d0:	2408      	movs	r4, #8
 80019d2:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 80019d4:	0030      	movs	r0, r6
 80019d6:	f7ff fe3d 	bl	8001654 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80019da:	2384      	movs	r3, #132	; 0x84
 80019dc:	50f4      	str	r4, [r6, r3]
           __HAL_UNLOCK(huart);
 80019de:	3b0c      	subs	r3, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	54f2      	strb	r2, [r6, r3]
           return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e000      	b.n	80019ea <UART_WaitOnFlagUntilTimeout+0x86>
  return HAL_OK;
 80019e8:	2000      	movs	r0, #0
}
 80019ea:	bcc0      	pop	{r6, r7}
 80019ec:	46b9      	mov	r9, r7
 80019ee:	46b0      	mov	r8, r6
 80019f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80019f2:	2003      	movs	r0, #3
 80019f4:	e7f9      	b.n	80019ea <UART_WaitOnFlagUntilTimeout+0x86>
 80019f6:	2003      	movs	r0, #3
 80019f8:	e7f7      	b.n	80019ea <UART_WaitOnFlagUntilTimeout+0x86>
	...

080019fc <UART_CheckIdleState>:
{
 80019fc:	b530      	push	{r4, r5, lr}
 80019fe:	b083      	sub	sp, #12
 8001a00:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a02:	2384      	movs	r3, #132	; 0x84
 8001a04:	2200      	movs	r2, #0
 8001a06:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001a08:	f7fe ff14 	bl	8000834 <HAL_GetTick>
 8001a0c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	0713      	lsls	r3, r2, #28
 8001a14:	d40f      	bmi.n	8001a36 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	075b      	lsls	r3, r3, #29
 8001a1c:	d429      	bmi.n	8001a72 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a26:	2300      	movs	r3, #0
 8001a28:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a2a:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8001a2c:	3a08      	subs	r2, #8
 8001a2e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
}
 8001a32:	b003      	add	sp, #12
 8001a34:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <UART_CheckIdleState+0xc8>)
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	0389      	lsls	r1, r1, #14
 8001a42:	0020      	movs	r0, r4
 8001a44:	f7ff ff8e 	bl	8001964 <UART_WaitOnFlagUntilTimeout>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d0e4      	beq.n	8001a16 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a50:	2301      	movs	r3, #1
 8001a52:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	2080      	movs	r0, #128	; 0x80
 8001a5c:	4383      	bics	r3, r0
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001a64:	2320      	movs	r3, #32
 8001a66:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8001a68:	3358      	adds	r3, #88	; 0x58
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001a6e:	387d      	subs	r0, #125	; 0x7d
 8001a70:	e7df      	b.n	8001a32 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <UART_CheckIdleState+0xc8>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	002b      	movs	r3, r5
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	03c9      	lsls	r1, r1, #15
 8001a7e:	0020      	movs	r0, r4
 8001a80:	f7ff ff70 	bl	8001964 <UART_WaitOnFlagUntilTimeout>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d0ca      	beq.n	8001a1e <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a92:	6821      	ldr	r1, [r4, #0]
 8001a94:	680b      	ldr	r3, [r1, #0]
 8001a96:	4d0c      	ldr	r5, [pc, #48]	; (8001ac8 <UART_CheckIdleState+0xcc>)
 8001a98:	402b      	ands	r3, r5
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aa4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa8:	6821      	ldr	r1, [r4, #0]
 8001aaa:	688b      	ldr	r3, [r1, #8]
 8001aac:	4393      	bics	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	321f      	adds	r2, #31
 8001ab8:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001aba:	3b08      	subs	r3, #8
 8001abc:	2200      	movs	r2, #0
 8001abe:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	e7b6      	b.n	8001a32 <UART_CheckIdleState+0x36>
 8001ac4:	01ffffff 	.word	0x01ffffff
 8001ac8:	fffffedf 	.word	0xfffffedf

08001acc <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	0004      	movs	r4, r0
 8001ad0:	000f      	movs	r7, r1
 8001ad2:	0016      	movs	r6, r2
 8001ad4:	001d      	movs	r5, r3
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d039      	beq.n	8001b4e <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ada:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02c      	beq.n	8001b3a <HAL_RS485Ex_Init+0x6e>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae0:	2324      	movs	r3, #36	; 0x24
 8001ae2:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	438b      	bics	r3, r1
 8001aec:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aee:	0020      	movs	r0, r4
 8001af0:	f7ff fde0 	bl	80016b4 <UART_SetConfig>
 8001af4:	2801      	cmp	r0, #1
 8001af6:	d01f      	beq.n	8001b38 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d123      	bne.n	8001b46 <HAL_RS485Ex_Init+0x7a>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	6891      	ldr	r1, [r2, #8]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	01db      	lsls	r3, r3, #7
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_RS485Ex_Init+0x88>)
 8001b10:	4011      	ands	r1, r2
 8001b12:	430f      	orrs	r7, r1
 8001b14:	609f      	str	r7, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8001b16:	0576      	lsls	r6, r6, #21
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8001b18:	042d      	lsls	r5, r5, #16
 8001b1a:	4335      	orrs	r5, r6
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	681e      	ldr	r6, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_RS485Ex_Init+0x8c>)
 8001b22:	4016      	ands	r6, r2
 8001b24:	4335      	orrs	r5, r6
 8001b26:	601d      	str	r5, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b32:	0020      	movs	r0, r4
 8001b34:	f7ff ff62 	bl	80019fc <UART_CheckIdleState>
}
 8001b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b3a:	3378      	adds	r3, #120	; 0x78
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001b40:	f7fe fdd6 	bl	80006f0 <HAL_UART_MspInit>
 8001b44:	e7cc      	b.n	8001ae0 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8001b46:	0020      	movs	r0, r4
 8001b48:	f7ff fe9c 	bl	8001884 <UART_AdvFeatureConfig>
 8001b4c:	e7d7      	b.n	8001afe <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e7f2      	b.n	8001b38 <HAL_RS485Ex_Init+0x6c>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	ffff7fff 	.word	0xffff7fff
 8001b58:	fc00ffff 	.word	0xfc00ffff

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	2600      	movs	r6, #0
 8001b60:	4d0c      	ldr	r5, [pc, #48]	; (8001b94 <__libc_init_array+0x38>)
 8001b62:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b64:	1b64      	subs	r4, r4, r5
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	42a6      	cmp	r6, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	f000 f821 	bl	8001bb4 <_init>
 8001b72:	4d0a      	ldr	r5, [pc, #40]	; (8001b9c <__libc_init_array+0x40>)
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <__libc_init_array+0x44>)
 8001b76:	1b64      	subs	r4, r4, r5
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	42a6      	cmp	r6, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	00b3      	lsls	r3, r6, #2
 8001b82:	58eb      	ldr	r3, [r5, r3]
 8001b84:	4798      	blx	r3
 8001b86:	3601      	adds	r6, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	00b3      	lsls	r3, r6, #2
 8001b8c:	58eb      	ldr	r3, [r5, r3]
 8001b8e:	4798      	blx	r3
 8001b90:	3601      	adds	r6, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001c04 	.word	0x08001c04
 8001b98:	08001c04 	.word	0x08001c04
 8001b9c:	08001c04 	.word	0x08001c04
 8001ba0:	08001c08 	.word	0x08001c08

08001ba4 <memset>:
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	1882      	adds	r2, r0, r2
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d100      	bne.n	8001bae <memset+0xa>
 8001bac:	4770      	bx	lr
 8001bae:	7019      	strb	r1, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	e7f9      	b.n	8001ba8 <memset+0x4>

08001bb4 <_init>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr

08001bc0 <_fini>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr
